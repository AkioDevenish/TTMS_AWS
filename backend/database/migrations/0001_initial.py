# Generated by Django 5.0.1 on 2025-02-26 20:59

import database.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'brands',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50)),
                ('notifiable_id', models.IntegerField()),
                ('notifiable_type', models.CharField(max_length=100)),
                ('data', models.JSONField()),
                ('read_at', models.DateTimeField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('unit', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'sensors',
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.CharField(max_length=100)),
                ('activity', models.TextField()),
                ('type', models.CharField(max_length=50)),
                ('user_id', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_logs',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Suspended', 'Suspended'), ('Pending', 'Pending')], default='Active', max_length=20)),
                ('username', models.CharField(default=database.models.generate_username, max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('organization', models.CharField(blank=True, max_length=255, null=True)),
                ('package', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(default='user', max_length=50)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'swappable': 'AUTH_USER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ApiAccessKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
                ('token_name', models.CharField(max_length=255)),
                ('expires_at', models.DateTimeField()),
                ('note', models.TextField(blank=True, null=True)),
                ('last_used', models.DateTimeField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_access_keys',
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('support_chat', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participants', models.ManyToManyField(related_name='participated_chats', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chats',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='database.chat')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('last_updated_at', models.DateTimeField()),
                ('address', models.TextField()),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('installation_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stations', to='database.brand')),
            ],
            options={
                'db_table': 'stations',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('value', models.FloatField()),
                ('status', models.CharField(max_length=50)),
                ('note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='database.sensor')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='database.station')),
            ],
            options={
                'db_table': 'measurements',
            },
        ),
        migrations.CreateModel(
            name='ApiAccessKeyStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_access_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.apiaccesskey')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.station')),
            ],
            options={
                'db_table': 'api_access_key_stations',
            },
        ),
        migrations.AddField(
            model_name='apiaccesskey',
            name='stations',
            field=models.ManyToManyField(through='database.ApiAccessKeyStation', to='database.station'),
        ),
        migrations.CreateModel(
            name='StationHealthLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battery_status', models.CharField(max_length=50)),
                ('connectivity_status', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_logs', to='database.station')),
            ],
            options={
                'db_table': 'station_health_logs',
            },
        ),
        migrations.CreateModel(
            name='StationSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_sensors', to='database.sensor')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_sensors', to='database.station')),
            ],
            options={
                'db_table': 'station_sensors',
            },
        ),
        migrations.AddField(
            model_name='station',
            name='sensors',
            field=models.ManyToManyField(related_name='stations', through='database.StationSensor', to='database.sensor'),
        ),
        migrations.CreateModel(
            name='UserPresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_online', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='presence', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User presences',
                'db_table': 'user_presences',
            },
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['user', '-created_at'], name='chats_user_id_e04d4e_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['support_chat'], name='chats_support_268deb_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['chat', 'created_at'], name='messages_chat_id_ec31ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='apiaccesskeystation',
            unique_together={('api_access_key', 'station')},
        ),
        migrations.AlterUniqueTogether(
            name='stationsensor',
            unique_together={('station', 'sensor')},
        ),
    ]

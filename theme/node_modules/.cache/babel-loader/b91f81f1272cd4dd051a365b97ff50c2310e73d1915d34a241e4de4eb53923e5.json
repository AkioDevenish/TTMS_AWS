{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /*#__PURE__*/function (_SimpleGeometry) {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  function MultiPoint(coordinates, layout) {\n    var _this;\n    _classCallCheck(this, MultiPoint);\n    _this = _callSuper(this, MultiPoint);\n    if (layout && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n    return _this;\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  _inherits(MultiPoint, _SimpleGeometry);\n  return _createClass(MultiPoint, [{\n    key: \"appendPoint\",\n    value: function appendPoint(point) {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n      this.changed();\n    }\n\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPoint} Clone.\n     * @api\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n      multiPoint.applyProperties(this);\n      return multiPoint;\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n        return minSquaredDistance;\n      }\n      var flatCoordinates = this.flatCoordinates;\n      var stride = this.stride;\n      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n        var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n        if (squaredDistance < minSquaredDistance) {\n          minSquaredDistance = squaredDistance;\n          for (var j = 0; j < stride; ++j) {\n            closestPoint[j] = flatCoordinates[i + j];\n          }\n          closestPoint.length = stride;\n        }\n      }\n      return minSquaredDistance;\n    }\n\n    /**\n     * Return the coordinates of the multipoint.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n  }, {\n    key: \"getCoordinates\",\n    value: function getCoordinates() {\n      return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n\n    /**\n     * Return the point at the specified index.\n     * @param {number} index Index.\n     * @return {Point} Point.\n     * @api\n     */\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(index) {\n      var n = this.flatCoordinates.length / this.stride;\n      if (index < 0 || n <= index) {\n        return null;\n      }\n      return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    }\n\n    /**\n     * Return the points of this multipoint.\n     * @return {Array<Point>} Points.\n     * @api\n     */\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      var flatCoordinates = this.flatCoordinates;\n      var layout = this.layout;\n      var stride = this.stride;\n      /** @type {Array<Point>} */\n      var points = [];\n      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n        var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n        points.push(point);\n      }\n      return points;\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'MultiPoint';\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      var flatCoordinates = this.flatCoordinates;\n      var stride = this.stride;\n      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n        var x = flatCoordinates[i];\n        var y = flatCoordinates[i + 1];\n        if (containsXY(extent, x, y)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Set the coordinates of the multipoint.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n     * @api\n     */\n  }, {\n    key: \"setCoordinates\",\n    value: function setCoordinates(coordinates, layout) {\n      this.setLayout(layout, coordinates, 1);\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = [];\n      }\n      this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n      this.changed();\n    }\n  }]);\n}(SimpleGeometry);\nexport default MultiPoint;","map":{"version":3,"names":["Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","_SimpleGeometry","coordinates","layout","_this","_classCallCheck","_callSuper","Array","isArray","setFlatCoordinates","setCoordinates","_inherits","_createClass","key","value","appendPoint","point","flatCoordinates","getFlatCoordinates","changed","clone","multiPoint","slice","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/geom/MultiPoint.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    extend(this.flatCoordinates, point.getFlatCoordinates());\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
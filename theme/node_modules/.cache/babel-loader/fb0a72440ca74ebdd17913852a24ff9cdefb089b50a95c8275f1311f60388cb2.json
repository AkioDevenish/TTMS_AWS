{"ast":null,"code":"import _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.math.cosh.js\";\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /*#__PURE__*/function (_Projection) {\n  /**\n   * @param {string} code Code.\n   */\n  function EPSG3857Projection(code) {\n    _classCallCheck(this, EPSG3857Projection);\n    return _callSuper(this, EPSG3857Projection, [{\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function getPointResolution(resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      }\n    }]);\n  }\n  _inherits(EPSG3857Projection, _Projection);\n  return _createClass(EPSG3857Projection);\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension) {\n  var length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension) {\n  var length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}","map":{"version":3,"names":["Projection","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","_Projection","code","_classCallCheck","_callSuper","units","extent","global","worldExtent","getPointResolution","resolution","point","cosh","_inherits","_createClass","PROJECTIONS","fromEPSG4326","input","output","dimension","length","undefined","slice","Array","i","y","toEPSG4326","atan","exp"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/proj/epsg3857.js"],"sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,MAAM,GAAG,OAAO;;AAE7B;AACA;AACA;AACA;AACA,OAAO,IAAMC,SAAS,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;;AAEzC;AACA;AACA;AACA;AACA,OAAO,IAAMI,MAAM,GAAG,CAAC,CAACH,SAAS,EAAE,CAACA,SAAS,EAAEA,SAAS,EAAEA,SAAS,CAAC;;AAEpE;AACA;AACA;AACA;AACA,OAAO,IAAMI,YAAY,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,UAAU,GAAGN,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACN,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAC;;AAElE;AACA;AACA;AACA;AAHA,IAIMM,kBAAkB,0BAAAC,WAAA;EACtB;AACF;AACA;EACE,SAAAD,mBAAYE,IAAI,EAAE;IAAAC,eAAA,OAAAH,kBAAA;IAAA,OAAAI,UAAA,OAAAJ,kBAAA,GACV;MACJE,IAAI,EAAEA,IAAI;MACVG,KAAK,EAAE,GAAG;MACVC,MAAM,EAAEX,MAAM;MACdY,MAAM,EAAE,IAAI;MACZC,WAAW,EAAEZ,YAAY;MACzBa,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAYC,UAAU,EAAEC,KAAK,EAAE;QAC/C,OAAOD,UAAU,GAAGjB,IAAI,CAACmB,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,GAAGpB,MAAM,CAAC;MAClD;IACF,CAAC;EACH;EAACsB,SAAA,CAAAb,kBAAA,EAAAC,WAAA;EAAA,OAAAa,YAAA,CAAAd,kBAAA;AAAA,EAf8BV,UAAU;AAkB3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMyB,WAAW,GAAG,CACzB,IAAIf,kBAAkB,CAAC,WAAW,CAAC,EACnC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,4CAA4C,CAAC,EACpE,IAAIA,kBAAkB,CAAC,8CAA8C,CAAC,CACvE;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACrD,IAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3BD,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;EACzC,IAAID,MAAM,KAAKG,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;MACjB;MACAD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM;MACLJ,MAAM,GAAG,IAAIK,KAAK,CAACH,MAAM,CAAC;IAC5B;EACF;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAIL,SAAS,EAAE;IAC1CD,MAAM,CAACM,CAAC,CAAC,GAAIhC,SAAS,GAAGyB,KAAK,CAACO,CAAC,CAAC,GAAI,GAAG;IACxC,IAAIC,CAAC,GAAGlC,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAAEN,IAAI,CAACC,EAAE,IAAI,CAACuB,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAI,GAAG,CAAC,CAAC;IAC3E,IAAIC,CAAC,GAAG5B,UAAU,EAAE;MAClB4B,CAAC,GAAG5B,UAAU;IAChB,CAAC,MAAM,IAAI4B,CAAC,GAAG,CAAC5B,UAAU,EAAE;MAC1B4B,CAAC,GAAG,CAAC5B,UAAU;IACjB;IACAqB,MAAM,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGC,CAAC;EACnB;EACA,OAAOP,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,UAAUA,CAACT,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACnD,IAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3BD,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;EACzC,IAAID,MAAM,KAAKG,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;MACjB;MACAD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM;MACLJ,MAAM,GAAG,IAAIK,KAAK,CAACH,MAAM,CAAC;IAC5B;EACF;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAIL,SAAS,EAAE;IAC1CD,MAAM,CAACM,CAAC,CAAC,GAAI,GAAG,GAAGP,KAAK,CAACO,CAAC,CAAC,GAAIhC,SAAS;IACxC0B,MAAM,CAACM,CAAC,GAAG,CAAC,CAAC,GACV,GAAG,GAAG/B,IAAI,CAACkC,IAAI,CAAClC,IAAI,CAACmC,GAAG,CAACX,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGjC,MAAM,CAAC,CAAC,GAAIE,IAAI,CAACC,EAAE,GAAG,EAAE;EACrE;EACA,OAAOwB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nvar ImageCanvasSource = /*#__PURE__*/function (_ImageSource) {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  function ImageCanvasSource(options) {\n    var _this;\n    _classCallCheck(this, ImageCanvasSource);\n    options = options ? options : {};\n    _this = _callSuper(this, ImageCanvasSource, [{\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    }]);\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    _this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    _this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  _inherits(ImageCanvasSource, _ImageSource);\n  return _createClass(ImageCanvasSource, [{\n    key: \"getImageInternal\",\n    value: function getImageInternal(extent, resolution, pixelRatio, projection) {\n      resolution = this.findNearestResolution(resolution);\n      var canvas = this.canvas_;\n      if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n        return canvas;\n      }\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n      var width = getWidth(extent) / resolution;\n      var height = getHeight(extent) / resolution;\n      var size = [width * pixelRatio, height * pixelRatio];\n      var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n      if (canvasElement) {\n        canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n      }\n      this.canvas_ = canvas;\n      this.renderedRevision_ = this.getRevision();\n      return canvas;\n    }\n  }]);\n}(ImageSource);\nexport default ImageCanvasSource;","map":{"version":3,"names":["ImageCanvas","ImageSource","containsExtent","getHeight","getWidth","scaleFromCenter","ImageCanvasSource","_ImageSource","options","_this","_classCallCheck","_callSuper","attributions","interpolate","projection","resolutions","state","canvasFunction_","canvasFunction","canvas_","renderedRevision_","ratio_","ratio","undefined","_inherits","_createClass","key","value","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","canvas","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","canvasElement","call"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport {\n  containsExtent,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state,\n    });\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n\n    let canvas = this.canvas_;\n    if (\n      canvas &&\n      this.renderedRevision_ == this.getRevision() &&\n      canvas.getResolution() == resolution &&\n      canvas.getPixelRatio() == pixelRatio &&\n      containsExtent(canvas.getExtent(), extent)\n    ) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    const canvasElement = this.canvasFunction_.call(\n      this,\n      extent,\n      resolution,\n      pixelRatio,\n      size,\n      projection\n    );\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n\n    return canvas;\n  }\n}\n\nexport default ImageCanvasSource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/*\tCopyright (c) 2016 Jean-Marc VIGLINO,\r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\n\nimport ol_control_Button from './Button.js';\n\n/** A simple toggle control\r\n * The control can be created with an interaction to control its activation.\r\n *\r\n * @constructor\r\n * @extends {ol_control_Button}\r\n * @fires change:active, change:disable\r\n * @param {Object=} options Control options.\r\n *  @param {String} options.className class of the control\r\n *  @param {String} options.title title of the control\r\n *  @param {String} options.html html to insert in the control\r\n *  @param {ol.interaction} options.interaction interaction associated with the control\r\n *  @param {bool} options.active the control is created active, default false\r\n *  @param {bool} options.disable the control is created disabled, default false\r\n *  @param {ol.control.Bar} options.bar a subbar associated with the control (drawn when active if control is nested in a ol.control.Bar)\r\n *  @param {bool} options.autoActive the control will activate when shown in an ol.control.Bar, default false\r\n *  @param {function} options.onToggle callback when control is clicked (or use change:active event)\r\n */\nvar ol_control_Toggle = /*#__PURE__*/function (_ol_control_Button) {\n  function olcontrolToggle(options) {\n    var _this;\n    _classCallCheck(this, olcontrolToggle);\n    options = options || {};\n    if (options.toggleFn) {\n      options.onToggle = options.toggleFn; // compat old version\n    }\n    options.handleClick = function () {\n      self.toggle();\n      if (options.onToggle) {\n        options.onToggle.call(self, self.getActive());\n      }\n    };\n    options.className = (options.className || '') + ' ol-toggle';\n    _this = _callSuper(this, olcontrolToggle, [options]);\n    var self = _this;\n    _this.interaction_ = options.interaction;\n    if (_this.interaction_) {\n      _this.interaction_.setActive(options.active);\n      _this.interaction_.on(\"change:active\", function () {\n        self.setActive(self.interaction_.getActive());\n      });\n    }\n    _this.set(\"title\", options.title);\n    _this.set(\"autoActivate\", options.autoActivate);\n    if (options.bar) _this.setSubBar(options.bar);\n    _this.setActive(options.active);\n    _this.setDisable(options.disable);\n    return _this;\n  }\n  /**\r\n   * Set the map instance the control is associated with\r\n   * and add interaction attached to it to this map.\r\n   * @param {_ol_Map_} map The map instance.\r\n   */\n  _inherits(olcontrolToggle, _ol_control_Button);\n  return _createClass(olcontrolToggle, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      if (!map && this.getMap()) {\n        if (this.interaction_) {\n          this.getMap().removeInteraction(this.interaction_);\n        }\n        if (this.subbar_) this.getMap().removeControl(this.subbar_);\n      }\n      _superPropGet(olcontrolToggle, \"setMap\", this, 3)([map]);\n      if (map) {\n        if (this.interaction_) map.addInteraction(this.interaction_);\n        if (this.subbar_) map.addControl(this.subbar_);\n      }\n    }\n    /** Get the subbar associated with a control\r\n     * @return {ol_control_Bar}\r\n     */\n  }, {\n    key: \"getSubBar\",\n    value: function getSubBar() {\n      return this.subbar_;\n    }\n    /** Set the subbar associated with a control\r\n     * @param {ol_control_Bar} [bar] a subbar if none remove the current subbar\r\n     */\n  }, {\n    key: \"setSubBar\",\n    value: function setSubBar(bar) {\n      var map = this.getMap();\n      if (map && this.subbar_) map.removeControl(this.subbar_);\n      this.subbar_ = bar;\n      if (bar) {\n        this.subbar_.setTarget(this.element);\n        this.subbar_.element.classList.add(\"ol-option-bar\");\n        if (map) map.addControl(this.subbar_);\n      }\n    }\n    /**\r\n     * Test if the control is disabled.\r\n     * @return {bool}\r\n     * @api stable\r\n     */\n  }, {\n    key: \"getDisable\",\n    value: function getDisable() {\n      var button = this.element.querySelector('button');\n      return button && button.disabled;\n    }\n    /** Disable the control. If disable, the control will be deactivated too.\r\n    * @param {bool} b disable (or enable) the control, default false (enable)\r\n    */\n  }, {\n    key: \"setDisable\",\n    value: function setDisable(b) {\n      if (this.getDisable() == b) return;\n      this.element.querySelector('button').disabled = b;\n      if (b && this.getActive()) this.setActive(false);\n      this.dispatchEvent({\n        type: 'change:disable',\n        key: 'disable',\n        oldValue: !b,\n        disable: b\n      });\n    }\n    /**\r\n     * Test if the control is active.\r\n     * @return {bool}.\r\n     * @api stable\r\n     */\n  }, {\n    key: \"getActive\",\n    value: function getActive() {\n      return this.element.classList.contains(\"ol-active\");\n    }\n    /** Toggle control state active/deactive\r\n     */\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.getActive()) this.setActive(false);else this.setActive(true);\n    }\n    /** Change control state\r\n     * @param {bool} b activate or deactivate the control, default false\r\n     */\n  }, {\n    key: \"setActive\",\n    value: function setActive(b) {\n      if (this.interaction_) this.interaction_.setActive(b);\n      if (this.subbar_) this.subbar_.setActive(b);\n      if (this.getActive() === b) return;\n      if (b) this.element.classList.add(\"ol-active\");else this.element.classList.remove(\"ol-active\");\n      this.dispatchEvent({\n        type: 'change:active',\n        key: 'active',\n        oldValue: !b,\n        active: b\n      });\n    }\n    /** Set the control interaction\r\n    * @param {_ol_interaction_} i interaction to associate with the control\r\n    */\n  }, {\n    key: \"setInteraction\",\n    value: function setInteraction(i) {\n      this.interaction_ = i;\n    }\n    /** Get the control interaction\r\n    * @return {_ol_interaction_} interaction associated with the control\r\n    */\n  }, {\n    key: \"getInteraction\",\n    value: function getInteraction() {\n      return this.interaction_;\n    }\n  }]);\n}(ol_control_Button);\nexport default ol_control_Toggle;","map":{"version":3,"names":["ol_control_Button","ol_control_Toggle","_ol_control_Button","olcontrolToggle","options","_this","_classCallCheck","toggleFn","onToggle","handleClick","self","toggle","call","getActive","className","_callSuper","interaction_","interaction","setActive","active","on","set","title","autoActivate","bar","setSubBar","setDisable","disable","_inherits","_createClass","key","value","setMap","map","getMap","removeInteraction","subbar_","removeControl","_superPropGet","addInteraction","addControl","getSubBar","setTarget","element","classList","add","getDisable","button","querySelector","disabled","b","dispatchEvent","type","oldValue","contains","remove","setInteraction","i","getInteraction"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol-ext/control/Toggle.js"],"sourcesContent":["/*\tCopyright (c) 2016 Jean-Marc VIGLINO,\r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\n\r\nimport ol_control_Button from './Button.js'\r\n\r\n/** A simple toggle control\r\n * The control can be created with an interaction to control its activation.\r\n *\r\n * @constructor\r\n * @extends {ol_control_Button}\r\n * @fires change:active, change:disable\r\n * @param {Object=} options Control options.\r\n *  @param {String} options.className class of the control\r\n *  @param {String} options.title title of the control\r\n *  @param {String} options.html html to insert in the control\r\n *  @param {ol.interaction} options.interaction interaction associated with the control\r\n *  @param {bool} options.active the control is created active, default false\r\n *  @param {bool} options.disable the control is created disabled, default false\r\n *  @param {ol.control.Bar} options.bar a subbar associated with the control (drawn when active if control is nested in a ol.control.Bar)\r\n *  @param {bool} options.autoActive the control will activate when shown in an ol.control.Bar, default false\r\n *  @param {function} options.onToggle callback when control is clicked (or use change:active event)\r\n */\r\nvar ol_control_Toggle = class olcontrolToggle extends ol_control_Button {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    if (options.toggleFn) {\r\n      options.onToggle = options.toggleFn; // compat old version\r\n    }\r\n    options.handleClick = function () {\r\n      self.toggle();\r\n      if (options.onToggle) {\r\n        options.onToggle.call(self, self.getActive());\r\n      }\r\n    };\r\n    options.className = (options.className || '') + ' ol-toggle';\r\n    super(options);\r\n\r\n    var self = this;\r\n\r\n    this.interaction_ = options.interaction;\r\n    if (this.interaction_) {\r\n      this.interaction_.setActive(options.active);\r\n      this.interaction_.on(\"change:active\", function () {\r\n        self.setActive(self.interaction_.getActive());\r\n      });\r\n    }\r\n\r\n    this.set(\"title\", options.title);\r\n\r\n    this.set(\"autoActivate\", options.autoActivate);\r\n    if (options.bar)\r\n      this.setSubBar(options.bar);\r\n\r\n    this.setActive(options.active);\r\n    this.setDisable(options.disable);\r\n  }\r\n  /**\r\n   * Set the map instance the control is associated with\r\n   * and add interaction attached to it to this map.\r\n   * @param {_ol_Map_} map The map instance.\r\n   */\r\n  setMap(map) {\r\n    if (!map && this.getMap()) {\r\n      if (this.interaction_) {\r\n        this.getMap().removeInteraction(this.interaction_);\r\n      }\r\n      if (this.subbar_)\r\n        this.getMap().removeControl(this.subbar_);\r\n    }\r\n\r\n    super.setMap(map);\r\n\r\n    if (map) {\r\n      if (this.interaction_)\r\n        map.addInteraction(this.interaction_);\r\n      if (this.subbar_)\r\n        map.addControl(this.subbar_);\r\n    }\r\n  }\r\n  /** Get the subbar associated with a control\r\n   * @return {ol_control_Bar}\r\n   */\r\n  getSubBar() {\r\n    return this.subbar_;\r\n  }\r\n  /** Set the subbar associated with a control\r\n   * @param {ol_control_Bar} [bar] a subbar if none remove the current subbar\r\n   */\r\n  setSubBar(bar) {\r\n    var map = this.getMap();\r\n    if (map && this.subbar_)\r\n      map.removeControl(this.subbar_);\r\n    this.subbar_ = bar;\r\n    if (bar) {\r\n      this.subbar_.setTarget(this.element);\r\n      this.subbar_.element.classList.add(\"ol-option-bar\");\r\n      if (map)\r\n        map.addControl(this.subbar_);\r\n    }\r\n  }\r\n  /**\r\n   * Test if the control is disabled.\r\n   * @return {bool}\r\n   * @api stable\r\n   */\r\n  getDisable() {\r\n    var button = this.element.querySelector('button');\r\n    return button && button.disabled;\r\n  }\r\n  /** Disable the control. If disable, the control will be deactivated too.\r\n  * @param {bool} b disable (or enable) the control, default false (enable)\r\n  */\r\n  setDisable(b) {\r\n    if (this.getDisable() == b) return;\r\n    this.element.querySelector('button').disabled = b;\r\n    if (b && this.getActive()) this.setActive(false);\r\n\r\n    this.dispatchEvent({ type: 'change:disable', key: 'disable', oldValue: !b, disable: b });\r\n  }\r\n  /**\r\n   * Test if the control is active.\r\n   * @return {bool}.\r\n   * @api stable\r\n   */\r\n  getActive() {\r\n    return this.element.classList.contains(\"ol-active\");\r\n  }\r\n  /** Toggle control state active/deactive\r\n   */\r\n  toggle() {\r\n    if (this.getActive())\r\n      this.setActive(false);\r\n    else\r\n      this.setActive(true);\r\n  }\r\n  /** Change control state\r\n   * @param {bool} b activate or deactivate the control, default false\r\n   */\r\n  setActive(b) {\r\n    if (this.interaction_)\r\n      this.interaction_.setActive(b);\r\n    if (this.subbar_)\r\n      this.subbar_.setActive(b);\r\n    if (this.getActive() === b)\r\n      return;\r\n    if (b)\r\n      this.element.classList.add(\"ol-active\");\r\n    else\r\n      this.element.classList.remove(\"ol-active\");\r\n\r\n    this.dispatchEvent({ type: 'change:active', key: 'active', oldValue: !b, active: b });\r\n  }\r\n  /** Set the control interaction\r\n  * @param {_ol_interaction_} i interaction to associate with the control\r\n  */\r\n  setInteraction(i) {\r\n    this.interaction_ = i;\r\n  }\r\n  /** Get the control interaction\r\n  * @return {_ol_interaction_} interaction associated with the control\r\n  */\r\n  getInteraction() {\r\n    return this.interaction_;\r\n  }\r\n}\r\n\r\nexport default ol_control_Toggle\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
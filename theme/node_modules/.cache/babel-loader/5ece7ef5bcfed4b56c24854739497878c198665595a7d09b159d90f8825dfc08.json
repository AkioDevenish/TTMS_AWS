{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport var BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nvar WebGLArrayBuffer = /*#__PURE__*/function () {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  function WebGLArrayBuffer(type, usage) {\n    _classCallCheck(this, WebGLArrayBuffer);\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`');\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  return _createClass(WebGLArrayBuffer, [{\n    key: \"ofSize\",\n    value: function ofSize(size) {\n      this.array_ = new (getArrayClassForType(this.type_))(size);\n      return this;\n    }\n\n    /**\n     * Populates the buffer with an array of the given size.\n     * @param {Array<number>} array Numerical array\n     * @return {WebGLArrayBuffer} This\n     */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      this.array_ = getArrayClassForType(this.type_).from(array);\n      return this;\n    }\n\n    /**\n     * Populates the buffer with a raw binary array buffer.\n     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n     * initialized for the same typed array class.\n     * @return {WebGLArrayBuffer} This\n     */\n  }, {\n    key: \"fromArrayBuffer\",\n    value: function fromArrayBuffer(buffer) {\n      this.array_ = new (getArrayClassForType(this.type_))(buffer);\n      return this;\n    }\n\n    /**\n     * @return {number} Buffer type.\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this.type_;\n    }\n\n    /**\n     * Will return null if the buffer was not initialized\n     * @return {Float32Array|Uint32Array|null} Array.\n     */\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return this.array_;\n    }\n\n    /**\n     * @return {number} Usage.\n     */\n  }, {\n    key: \"getUsage\",\n    value: function getUsage() {\n      return this.usage_;\n    }\n\n    /**\n     * Will return 0 if the buffer is not initialized\n     * @return {number} Array size\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.array_ ? this.array_.length : 0;\n    }\n  }]);\n}();\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","map":{"version":3,"names":["ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","STREAM_DRAW","assert","BufferUsage","WebGLArrayBuffer","type","usage","_classCallCheck","array_","type_","usage_","undefined","_createClass","key","value","ofSize","size","getArrayClassForType","fromArray","array","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","length","Float32Array","Uint32Array"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/webgl/Buffer.js"],"sourcesContent":["/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`'\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nvar TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond\n * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,\n * which is unique for each imagery set in BingMaps.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nvar BingMaps = /*#__PURE__*/function (_TileImage) {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  function BingMaps(options) {\n    var _this;\n    _classCallCheck(this, BingMaps);\n    var hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    _this = _callSuper(this, BingMaps, [{\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }]);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.imagerySet_ = options.imagerySet;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    _this.placeholderTiles_ = options.placeholderTiles;\n    var url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + _this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + _this.apiKey_ + '&c=' + _this.culture_;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return _this.handleImageryMetadataResponse(json);\n    });\n    return _this;\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  _inherits(BingMaps, _TileImage);\n  return _createClass(BingMaps, [{\n    key: \"getApiKey\",\n    value: function getApiKey() {\n      return this.apiKey_;\n    }\n\n    /**\n     * Get the imagery set associated with this source.\n     *\n     * @return {string} The imagery set.\n     * @api\n     */\n  }, {\n    key: \"getImagerySet\",\n    value: function getImagerySet() {\n      return this.imagerySet_;\n    }\n\n    /**\n     * @param {BingMapsImageryMetadataResponse} response Response.\n     */\n  }, {\n    key: \"handleImageryMetadataResponse\",\n    value: function handleImageryMetadataResponse(response) {\n      var _this2 = this;\n      if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n        this.setState('error');\n        return;\n      }\n      var resource = response.resourceSets[0].resources[0];\n      var maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n      var sourceProjection = this.getProjection();\n      var extent = extentFromProjection(sourceProjection);\n      var scale = this.hidpi_ ? 2 : 1;\n      var tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n      var tileGrid = createXYZ({\n        extent: extent,\n        minZoom: resource.zoomMin,\n        maxZoom: maxZoom,\n        tileSize: tileSize\n      });\n      this.tileGrid = tileGrid;\n      var culture = this.culture_;\n      var hidpi = this.hidpi_;\n      var placeholderTiles = this.placeholderTiles_;\n      this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        var quadKeyTileCoord = [0, 0, 0];\n        var imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            }\n            createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n            var url = new URL(imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord)));\n            var params = url.searchParams;\n            if (hidpi) {\n              params.set('dpi', 'd1');\n              params.set('device', 'mobile');\n            }\n            if (placeholderTiles === true) {\n              params[\"delete\"]('n');\n            } else if (placeholderTiles === false) {\n              params.set('n', 'z');\n            }\n            return url.toString();\n          }\n        );\n      }));\n      if (resource.imageryProviders) {\n        var transform = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n        this.setAttributions(function (frameState) {\n          var attributions = [];\n          var viewState = frameState.viewState;\n          var tileGrid = _this2.getTileGrid();\n          var z = tileGrid.getZForResolution(viewState.resolution, _this2.zDirection);\n          var tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n          var zoom = tileCoord[0];\n          resource.imageryProviders.map(function (imageryProvider) {\n            var intersecting = false;\n            var coverageAreas = imageryProvider.coverageAreas;\n            for (var i = 0, ii = coverageAreas.length; i < ii; ++i) {\n              var coverageArea = coverageAreas[i];\n              if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n                var bbox = coverageArea.bbox;\n                var epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n                var _extent = applyTransform(epsg4326Extent, transform);\n                if (intersects(_extent, frameState.extent)) {\n                  intersecting = true;\n                  break;\n                }\n              }\n            }\n            if (intersecting) {\n              attributions.push(imageryProvider.attribution);\n            }\n          });\n          attributions.push(TOS_ATTRIBUTION);\n          return attributions;\n        });\n      }\n      this.setState('ready');\n    }\n  }]);\n}(TileImage);\nexport default BingMaps;","map":{"version":3,"names":["TileImage","applyTransform","intersects","createFromTileUrlFunctions","createOrUpdate","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","quadKey","tileCoord","z","digits","Array","mask","i","charCode","String","fromCharCode","join","TOS_ATTRIBUTION","BingMaps","_TileImage","options","_this","_classCallCheck","hidpi","undefined","_callSuper","cacheSize","crossOrigin","interpolate","opaque","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","key","imagerySet_","imagerySet","placeholderTiles_","placeholderTiles","url","fetch","then","response","json","handleImageryMetadataResponse","_inherits","_createClass","value","getApiKey","getImagerySet","_this2","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","resource","zoomMax","sourceProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","pixelRatio","URL","params","searchParams","set","toString","imageryProviders","transform","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","getTileCoordForCoordAndZ","center","zoom","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","push","attribution"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/BingMaps.js"],"sourcesContent":["/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {createOrUpdate} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION =\n  '<a class=\"ol-attribution-bing-tos\" ' +\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n  'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond\n * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,\n * which is unique for each imagery set in BingMaps.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.placeholderTiles_ = options.placeholderTiles;\n\n    const url =\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n      this.imagerySet_ +\n      '?uriScheme=https&include=ImageryProviders&key=' +\n      this.apiKey_ +\n      '&c=' +\n      this.culture_;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => this.handleImageryMetadataResponse(json));\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (\n      response.statusCode != 200 ||\n      response.statusDescription != 'OK' ||\n      response.authenticationResultCode != 'ValidCredentials' ||\n      response.resourceSets.length != 1 ||\n      response.resourceSets[0].resources.length != 1\n    ) {\n      this.setState('error');\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize =\n      resource.imageWidth == resource.imageHeight\n        ? resource.imageWidth / scale\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    const placeholderTiles = this.placeholderTiles_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            }\n            createOrUpdate(\n              tileCoord[0],\n              tileCoord[1],\n              tileCoord[2],\n              quadKeyTileCoord\n            );\n            const url = new URL(\n              imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord))\n            );\n            const params = url.searchParams;\n            if (hidpi) {\n              params.set('dpi', 'd1');\n              params.set('device', 'mobile');\n            }\n            if (placeholderTiles === true) {\n              params.delete('n');\n            } else if (placeholderTiles === false) {\n              params.set('n', 'z');\n            }\n            return url.toString();\n          }\n        );\n      })\n    );\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        this.getProjection()\n      );\n\n      this.setAttributions((frameState) => {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const z = tileGrid.getZForResolution(\n          viewState.resolution,\n          this.zDirection\n        );\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(\n          viewState.center,\n          z\n        );\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      });\n    }\n\n    this.setState('ready');\n  }\n}\n\nexport default BingMaps;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,SAAQC,cAAc,EAAEC,UAAU,QAAO,cAAc;AACvD,SAAQC,0BAA0B,QAAO,uBAAuB;AAChE,SAAQC,cAAc,QAAO,iBAAiB;AAC9C,SAAQC,SAAS,EAAEC,oBAAoB,QAAO,gBAAgB;AAC9D,SAAQC,GAAG,IAAIC,aAAa,EAAEC,2BAA2B,QAAO,YAAY;;AAE5E;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,SAAS,EAAE;EACjC,IAAMC,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;EACtB,IAAME,MAAM,GAAG,IAAIC,KAAK,CAACF,CAAC,CAAC;EAC3B,IAAIG,IAAI,GAAG,CAAC,IAAKH,CAAC,GAAG,CAAE;EACvB,IAAII,CAAC,EAAEC,QAAQ;EACf,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAE,EAAEI,CAAC,EAAE;IACtB;IACAC,QAAQ,GAAG,EAAE;IACb,IAAIN,SAAS,CAAC,CAAC,CAAC,GAAGI,IAAI,EAAE;MACvBE,QAAQ,IAAI,CAAC;IACf;IACA,IAAIN,SAAS,CAAC,CAAC,CAAC,GAAGI,IAAI,EAAE;MACvBE,QAAQ,IAAI,CAAC;IACf;IACAJ,MAAM,CAACG,CAAC,CAAC,GAAGE,MAAM,CAACC,YAAY,CAACF,QAAQ,CAAC;IACzCF,IAAI,KAAK,CAAC;EACZ;EACA,OAAOF,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,eAAe,GACnB,qCAAqC,GACrC,2EAA2E,GAC3E,kBAAkB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA,IAKMC,QAAQ,0BAAAC,UAAA;EACZ;AACF;AACA;EACE,SAAAD,SAAYE,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,QAAA;IACnB,IAAMK,KAAK,GAAGH,OAAO,CAACG,KAAK,KAAKC,SAAS,GAAGJ,OAAO,CAACG,KAAK,GAAG,KAAK;IAEjEF,KAAA,GAAAI,UAAA,OAAAP,QAAA,GAAM;MACJQ,SAAS,EAAEN,OAAO,CAACM,SAAS;MAC5BC,WAAW,EAAE,WAAW;MACxBC,WAAW,EAAER,OAAO,CAACQ,WAAW;MAChCC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE1B,aAAa,CAAC,WAAW,CAAC;MACtC2B,0BAA0B,EAAEX,OAAO,CAACW,0BAA0B;MAC9DC,KAAK,EAAE,SAAS;MAChBC,gBAAgB,EAAEb,OAAO,CAACa,gBAAgB;MAC1CC,cAAc,EAAEX,KAAK,GAAG,CAAC,GAAG,CAAC;MAC7BY,KAAK,EAAEf,OAAO,CAACe,KAAK,KAAKX,SAAS,GAAGJ,OAAO,CAACe,KAAK,GAAG,IAAI;MACzDC,UAAU,EAAEhB,OAAO,CAACgB,UAAU;MAC9BC,UAAU,EAAEjB,OAAO,CAACiB;IACtB,CAAC;;IAED;AACJ;AACA;AACA;IACIhB,KAAA,CAAKiB,MAAM,GAAGf,KAAK;;IAEnB;AACJ;AACA;AACA;IACIF,KAAA,CAAKkB,QAAQ,GAAGnB,OAAO,CAACoB,OAAO,KAAKhB,SAAS,GAAGJ,OAAO,CAACoB,OAAO,GAAG,OAAO;;IAEzE;AACJ;AACA;AACA;IACInB,KAAA,CAAKoB,QAAQ,GAAGrB,OAAO,CAACsB,OAAO,KAAKlB,SAAS,GAAGJ,OAAO,CAACsB,OAAO,GAAG,CAAC,CAAC;;IAEpE;AACJ;AACA;AACA;IACIrB,KAAA,CAAKsB,OAAO,GAAGvB,OAAO,CAACwB,GAAG;;IAE1B;AACJ;AACA;AACA;IACIvB,KAAA,CAAKwB,WAAW,GAAGzB,OAAO,CAAC0B,UAAU;;IAErC;AACJ;AACA;AACA;IACIzB,KAAA,CAAK0B,iBAAiB,GAAG3B,OAAO,CAAC4B,gBAAgB;IAEjD,IAAMC,GAAG,GACP,wDAAwD,GACxD5B,KAAA,CAAKwB,WAAW,GAChB,gDAAgD,GAChDxB,KAAA,CAAKsB,OAAO,GACZ,KAAK,GACLtB,KAAA,CAAKkB,QAAQ;IAEfW,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAAC,UAACC,QAAQ;MAAA,OAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAAA,EAAC,CACnCF,IAAI,CAAC,UAACE,IAAI;MAAA,OAAKhC,KAAA,CAAKiC,6BAA6B,CAACD,IAAI,CAAC;IAAA,EAAC;IAAC,OAAAhC,KAAA;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;EALEkC,SAAA,CAAArC,QAAA,EAAAC,UAAA;EAAA,OAAAqC,YAAA,CAAAtC,QAAA;IAAA0B,GAAA;IAAAa,KAAA,EAMA,SAAAC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACf,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAC,GAAA;IAAAa,KAAA,EAMA,SAAAE,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACd,WAAW;IACzB;;IAEA;AACF;AACA;EAFE;IAAAD,GAAA;IAAAa,KAAA,EAGA,SAAAH,6BAA6BA,CAACF,QAAQ,EAAE;MAAA,IAAAQ,MAAA;MACtC,IACER,QAAQ,CAACS,UAAU,IAAI,GAAG,IAC1BT,QAAQ,CAACU,iBAAiB,IAAI,IAAI,IAClCV,QAAQ,CAACW,wBAAwB,IAAI,kBAAkB,IACvDX,QAAQ,CAACY,YAAY,CAACC,MAAM,IAAI,CAAC,IACjCb,QAAQ,CAACY,YAAY,CAAC,CAAC,CAAC,CAACE,SAAS,CAACD,MAAM,IAAI,CAAC,EAC9C;QACA,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC;QACtB;MACF;MAEA,IAAMC,QAAQ,GAAGhB,QAAQ,CAACY,YAAY,CAAC,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;MACtD,IAAMxB,OAAO,GAAG,IAAI,CAACD,QAAQ,IAAI,CAAC,CAAC,GAAG2B,QAAQ,CAACC,OAAO,GAAG,IAAI,CAAC5B,QAAQ;MAEtE,IAAM6B,gBAAgB,GAAG,IAAI,CAAClE,aAAa,CAAC,CAAC;MAC7C,IAAMmE,MAAM,GAAGrE,oBAAoB,CAACoE,gBAAgB,CAAC;MACrD,IAAME,KAAK,GAAG,IAAI,CAAClC,MAAM,GAAG,CAAC,GAAG,CAAC;MACjC,IAAMmC,QAAQ,GACZL,QAAQ,CAACM,UAAU,IAAIN,QAAQ,CAACO,WAAW,GACvCP,QAAQ,CAACM,UAAU,GAAGF,KAAK,GAC3B,CAACJ,QAAQ,CAACM,UAAU,GAAGF,KAAK,EAAEJ,QAAQ,CAACO,WAAW,GAAGH,KAAK,CAAC;MAEjE,IAAMI,QAAQ,GAAG3E,SAAS,CAAC;QACzBsE,MAAM,EAAEA,MAAM;QACdM,OAAO,EAAET,QAAQ,CAACU,OAAO;QACzBpC,OAAO,EAAEA,OAAO;QAChB+B,QAAQ,EAAEA;MACZ,CAAC,CAAC;MACF,IAAI,CAACG,QAAQ,GAAGA,QAAQ;MAExB,IAAMpC,OAAO,GAAG,IAAI,CAACD,QAAQ;MAC7B,IAAMhB,KAAK,GAAG,IAAI,CAACe,MAAM;MACzB,IAAMU,gBAAgB,GAAG,IAAI,CAACD,iBAAiB;MAC/C,IAAI,CAACgC,eAAe,GAAGhF,0BAA0B,CAC/CqE,QAAQ,CAACY,kBAAkB,CAACC,GAAG,CAAC,UAAUC,SAAS,EAAE;QACnD;QACA,IAAMC,gBAAgB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClC,IAAMC,QAAQ,GAAGhB,QAAQ,CAACgB,QAAQ,CAC/BC,OAAO,CAAC,aAAa,EAAEH,SAAS,CAAC,CACjCG,OAAO,CAAC,WAAW,EAAE7C,OAAO,CAAC;QAChC;UACE;AACV;AACA;AACA;AACA;AACA;UACU,UAAUjC,SAAS,EAAE+E,UAAU,EAAExD,UAAU,EAAE;YAC3C,IAAI,CAACvB,SAAS,EAAE;cACd,OAAOiB,SAAS;YAClB;YACAxB,cAAc,CACZO,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZ4E,gBACF,CAAC;YACD,IAAMlC,GAAG,GAAG,IAAIsC,GAAG,CACjBH,QAAQ,CAACC,OAAO,CAAC,WAAW,EAAE/E,OAAO,CAAC6E,gBAAgB,CAAC,CACzD,CAAC;YACD,IAAMK,MAAM,GAAGvC,GAAG,CAACwC,YAAY;YAC/B,IAAIlE,KAAK,EAAE;cACTiE,MAAM,CAACE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;cACvBF,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAChC;YACA,IAAI1C,gBAAgB,KAAK,IAAI,EAAE;cAC7BwC,MAAM,UAAO,CAAC,GAAG,CAAC;YACpB,CAAC,MAAM,IAAIxC,gBAAgB,KAAK,KAAK,EAAE;cACrCwC,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;YACtB;YACA,OAAOzC,GAAG,CAAC0C,QAAQ,CAAC,CAAC;UACvB;QAAC;MAEL,CAAC,CACH,CAAC;MAED,IAAIvB,QAAQ,CAACwB,gBAAgB,EAAE;QAC7B,IAAMC,SAAS,GAAGxF,2BAA2B,CAC3CD,aAAa,CAAC,WAAW,CAAC,EAC1B,IAAI,CAACA,aAAa,CAAC,CACrB,CAAC;QAED,IAAI,CAAC0F,eAAe,CAAC,UAACC,UAAU,EAAK;UACnC,IAAMC,YAAY,GAAG,EAAE;UACvB,IAAMC,SAAS,GAAGF,UAAU,CAACE,SAAS;UACtC,IAAMrB,QAAQ,GAAGhB,MAAI,CAACsC,WAAW,CAAC,CAAC;UACnC,IAAM1F,CAAC,GAAGoE,QAAQ,CAACuB,iBAAiB,CAClCF,SAAS,CAACG,UAAU,EACpBxC,MAAI,CAACvB,UACP,CAAC;UACD,IAAM9B,SAAS,GAAGqE,QAAQ,CAACyB,wBAAwB,CACjDJ,SAAS,CAACK,MAAM,EAChB9F,CACF,CAAC;UACD,IAAM+F,IAAI,GAAGhG,SAAS,CAAC,CAAC,CAAC;UACzB6D,QAAQ,CAACwB,gBAAgB,CAACX,GAAG,CAAC,UAAUuB,eAAe,EAAE;YACvD,IAAIC,YAAY,GAAG,KAAK;YACxB,IAAMC,aAAa,GAAGF,eAAe,CAACE,aAAa;YACnD,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAE+F,EAAE,GAAGD,aAAa,CAACzC,MAAM,EAAErD,CAAC,GAAG+F,EAAE,EAAE,EAAE/F,CAAC,EAAE;cACtD,IAAMgG,YAAY,GAAGF,aAAa,CAAC9F,CAAC,CAAC;cACrC,IAAI2F,IAAI,IAAIK,YAAY,CAAC9B,OAAO,IAAIyB,IAAI,IAAIK,YAAY,CAACvC,OAAO,EAAE;gBAChE,IAAMwC,IAAI,GAAGD,YAAY,CAACC,IAAI;gBAC9B,IAAMC,cAAc,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3D,IAAMtC,OAAM,GAAG1E,cAAc,CAACiH,cAAc,EAAEjB,SAAS,CAAC;gBACxD,IAAI/F,UAAU,CAACyE,OAAM,EAAEwB,UAAU,CAACxB,MAAM,CAAC,EAAE;kBACzCkC,YAAY,GAAG,IAAI;kBACnB;gBACF;cACF;YACF;YACA,IAAIA,YAAY,EAAE;cAChBT,YAAY,CAACe,IAAI,CAACP,eAAe,CAACQ,WAAW,CAAC;YAChD;UACF,CAAC,CAAC;UAEFhB,YAAY,CAACe,IAAI,CAAC9F,eAAe,CAAC;UAClC,OAAO+E,YAAY;QACrB,CAAC,CAAC;MACJ;MAEA,IAAI,CAAC7B,QAAQ,CAAC,OAAO,CAAC;IACxB;EAAC;AAAA,EAxNoBvE,SAAS;AA2NhC,eAAesB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
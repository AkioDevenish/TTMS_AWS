{"ast":null,"code":"import { EPSILON, MathAbs, NativeArrayBuffer, NativeFloat32Array, NativeUint16Array, NativeUint32Array, NativeUint8Array, NumberIsFinite, NumberIsNaN } from \"./primordials.mjs\";\nvar INVERSE_OF_EPSILON = 1 / EPSILON;\n\n/**\n * rounds to the nearest value;\n * if the number falls midway, it is rounded to the nearest value with an even least significant digit\n * @param {number} num\n * @returns {number}\n */\nfunction roundTiesToEven(num) {\n  return num + INVERSE_OF_EPSILON - INVERSE_OF_EPSILON;\n}\nvar FLOAT16_MIN_VALUE = 6.103515625e-05;\nvar FLOAT16_MAX_VALUE = 65504;\nvar FLOAT16_EPSILON = 0.0009765625;\nvar FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE;\nvar FLOAT16_EPSILON_DEVIDED_BY_EPSILON = FLOAT16_EPSILON * INVERSE_OF_EPSILON;\n\n/**\n * round a number to a half float number\n * @param {unknown} num - double float\n * @returns {number} half float number\n */\nexport function roundToFloat16(num) {\n  var number = +num;\n\n  // NaN, Infinity, -Infinity, 0, -0\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n\n  // finite except 0, -0\n  var sign = number > 0 ? 1 : -1;\n  var absolute = MathAbs(number);\n\n  // small number\n  if (absolute < FLOAT16_MIN_VALUE) {\n    return sign * roundTiesToEven(absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE) * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;\n  }\n  var temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute;\n  var result = temp - (temp - absolute);\n\n  // large number\n  if (result > FLOAT16_MAX_VALUE || NumberIsNaN(result)) {\n    return sign * Infinity;\n  }\n  return sign * result;\n}\n\n// base algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nvar buffer = new NativeArrayBuffer(4);\nvar floatView = new NativeFloat32Array(buffer);\nvar uint32View = new NativeUint32Array(buffer);\nvar baseTable = new NativeUint16Array(512);\nvar shiftTable = new NativeUint8Array(512);\nfor (var i = 0; i < 256; ++i) {\n  var e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -24) {\n    baseTable[i] = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n\n    // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i] = 0x0400 >> -e - 14;\n    baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n    shiftTable[i] = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n    // normal number\n  } else if (e <= 15) {\n    baseTable[i] = e + 15 << 10;\n    baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n\n    // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n\n    // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = roundToFloat16(num);\n  var f = uint32View[0];\n  var e = f >> 23 & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\nvar mantissaTable = new NativeUint32Array(2048);\nfor (var _i = 1; _i < 1024; ++_i) {\n  var m = _i << 13; // zero pad mantissa bits\n  var _e = 0; // zero exponent\n\n  // normalized\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    _e -= 0x00800000; // decrement exponent\n  }\n  m &= ~0x00800000; // clear leading 1 bit\n  _e += 0x38800000; // adjust bias\n\n  mantissaTable[_i] = m | _e;\n}\nfor (var _i2 = 1024; _i2 < 2048; ++_i2) {\n  mantissaTable[_i2] = 0x38000000 + (_i2 - 1024 << 13);\n}\nvar exponentTable = new NativeUint32Array(64);\nfor (var _i3 = 1; _i3 < 31; ++_i3) {\n  exponentTable[_i3] = _i3 << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (var _i4 = 33; _i4 < 63; ++_i4) {\n  exponentTable[_i4] = 0x80000000 + (_i4 - 32 << 23);\n}\nexponentTable[63] = 0xc7800000;\nvar offsetTable = new NativeUint16Array(64);\nfor (var _i5 = 1; _i5 < 64; ++_i5) {\n  if (_i5 !== 32) {\n    offsetTable[_i5] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  var i = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[i] + (float16bits & 0x3ff)] + exponentTable[i];\n  return floatView[0];\n}","map":{"version":3,"names":["EPSILON","MathAbs","NativeArrayBuffer","NativeFloat32Array","NativeUint16Array","NativeUint32Array","NativeUint8Array","NumberIsFinite","NumberIsNaN","INVERSE_OF_EPSILON","roundTiesToEven","num","FLOAT16_MIN_VALUE","FLOAT16_MAX_VALUE","FLOAT16_EPSILON","FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE","FLOAT16_EPSILON_DEVIDED_BY_EPSILON","roundToFloat16","number","sign","absolute","temp","result","Infinity","buffer","floatView","uint32View","baseTable","shiftTable","i","e","roundToFloat16Bits","f","mantissaTable","m","exponentTable","offsetTable","convertToNumber","float16bits"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@petamoriken/float16/src/_util/converter.mjs"],"sourcesContent":["import {\n  EPSILON,\n  MathAbs,\n  NativeArrayBuffer,\n  NativeFloat32Array,\n  NativeUint16Array,\n  NativeUint32Array,\n  NativeUint8Array,\n  NumberIsFinite,\n  NumberIsNaN,\n} from \"./primordials.mjs\";\n\nconst INVERSE_OF_EPSILON = 1 / EPSILON;\n\n/**\n * rounds to the nearest value;\n * if the number falls midway, it is rounded to the nearest value with an even least significant digit\n * @param {number} num\n * @returns {number}\n */\nfunction roundTiesToEven(num) {\n  return (num + INVERSE_OF_EPSILON) - INVERSE_OF_EPSILON;\n}\n\nconst FLOAT16_MIN_VALUE = 6.103515625e-05;\nconst FLOAT16_MAX_VALUE = 65504;\nconst FLOAT16_EPSILON = 0.0009765625;\n\nconst FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE;\nconst FLOAT16_EPSILON_DEVIDED_BY_EPSILON = FLOAT16_EPSILON * INVERSE_OF_EPSILON;\n\n/**\n * round a number to a half float number\n * @param {unknown} num - double float\n * @returns {number} half float number\n */\nexport function roundToFloat16(num) {\n  const number = +num;\n\n  // NaN, Infinity, -Infinity, 0, -0\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n\n  // finite except 0, -0\n  const sign = number > 0 ? 1 : -1;\n  const absolute = MathAbs(number);\n\n  // small number\n  if (absolute < FLOAT16_MIN_VALUE) {\n    return sign * roundTiesToEven(absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE) * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;\n  }\n\n  const temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute;\n  const result = temp - (temp - absolute);\n\n  // large number\n  if (result > FLOAT16_MAX_VALUE || NumberIsNaN(result)) {\n    return sign * Infinity;\n  }\n\n  return sign * result;\n}\n\n// base algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\n\nconst baseTable = new NativeUint16Array(512);\nconst shiftTable = new NativeUint8Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -24) {\n    baseTable[i]         = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i]         =  0x0400 >> (-e - 14);\n    baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n    shiftTable[i]         = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n  // normal number\n  } else if (e <= 15) {\n    baseTable[i]         =  (e + 15) << 10;\n    baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n\n  // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = roundToFloat16(num);\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\nconst mantissaTable = new NativeUint32Array(2048);\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13; // zero pad mantissa bits\n  let e = 0; // zero exponent\n\n  // normalized\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000; // decrement exponent\n  }\n\n  m &= ~0x00800000; // clear leading 1 bit\n  e += 0x38800000; // adjust bias\n\n  mantissaTable[i] = m | e;\n}\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n}\n\nconst exponentTable = new NativeUint32Array(64);\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n}\nexponentTable[63] = 0xc7800000;\n\nconst offsetTable = new NativeUint16Array(64);\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  const i = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[i] + (float16bits & 0x3ff)] + exponentTable[i];\n  return floatView[0];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
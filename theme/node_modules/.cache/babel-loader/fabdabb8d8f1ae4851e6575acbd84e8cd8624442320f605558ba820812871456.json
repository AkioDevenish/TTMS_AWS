{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/*\tCopyright (c) 2016 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n\r\n  Usefull function to handle geometric operations\r\n*/\n\nimport ol_geom_LineString from 'ol/geom/LineString.js';\nimport ol_geom_LinearRing from 'ol/geom/LinearRing.js';\nimport ol_geom_MultiLineString from 'ol/geom/MultiLineString.js';\nimport ol_geom_MultiPoint from 'ol/geom/MultiPoint.js';\nimport ol_geom_MultiPolygon from 'ol/geom/MultiPolygon.js';\nimport ol_geom_Point from 'ol/geom/Point.js';\nimport ol_geom_Polygon from 'ol/geom/Polygon.js';\nimport ol_geom_Circle from 'ol/geom/Circle.js';\nimport { getCenter as ol_extent_getCenter } from 'ol/extent.js';\nimport { buffer as ol_extent_buffer } from 'ol/extent.js';\n\n/** Distance beetween 2 points\r\n *\tUsefull geometric functions\r\n * @param {ol.Coordinate} p1 first point\r\n * @param {ol.Coordinate} p2 second point\r\n * @return {number} distance\r\n */\nvar ol_coordinate_dist2d = function ol_coordinate_dist2d(p1, p2) {\n  var dx = p1[0] - p2[0];\n  var dy = p1[1] - p2[1];\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/** 2 points are equal\r\n *\tUsefull geometric functions\r\n * @param {ol.Coordinate} p1 first point\r\n * @param {ol.Coordinate} p2 second point\r\n * @return {boolean}\r\n */\nvar ol_coordinate_equal = function ol_coordinate_equal(p1, p2) {\n  return p1[0] == p2[0] && p1[1] == p2[1];\n};\n\n/** Get center coordinate of a feature\r\n * @param {ol.Feature} f\r\n * @return {ol.coordinate} the center\r\n */\nvar ol_coordinate_getFeatureCenter = function ol_coordinate_getFeatureCenter(f) {\n  return ol_coordinate_getGeomCenter(f.getGeometry());\n};\n\n/** Get center coordinate of a geometry\r\n* @param {ol.geom.Geometry} geom\r\n* @return {ol.Coordinate} the center\r\n*/\nvar ol_coordinate_getGeomCenter = function ol_coordinate_getGeomCenter(geom) {\n  switch (geom.getType()) {\n    case 'Point':\n      return geom.getCoordinates();\n    case \"MultiPolygon\":\n      geom = geom.getPolygon(0);\n    // fallthrough\n    case \"Polygon\":\n      return geom.getInteriorPoint().getCoordinates();\n    default:\n      return geom.getClosestPoint(ol_extent_getCenter(geom.getExtent()));\n  }\n};\n\n/** Offset a polyline\r\n * @param {Array<ol.Coordinate>} coords\r\n * @param {number} offset\r\n * @return {Array<ol.Coordinate>} resulting coord\r\n * @see http://stackoverflow.com/a/11970006/796832\r\n * @see https://drive.google.com/viewerng/viewer?a=v&pid=sites&srcid=ZGVmYXVsdGRvbWFpbnxqa2dhZGdldHN0b3JlfGd4OjQ4MzI5M2Y0MjNmNzI2MjY\r\n */\nvar ol_coordinate_offsetCoords = function ol_coordinate_offsetCoords(coords, offset) {\n  var path = [];\n  var N = coords.length - 1;\n  var max = N;\n  var mi, mi1, li, li1, ri, ri1, si, si1, Xi1, Yi1;\n  var p0, p1, p2;\n  var isClosed = ol_coordinate_equal(coords[0], coords[N]);\n  if (!isClosed) {\n    p0 = coords[0];\n    p1 = coords[1];\n    p2 = [p0[0] + (p1[1] - p0[1]) / ol_coordinate_dist2d(p0, p1) * offset, p0[1] - (p1[0] - p0[0]) / ol_coordinate_dist2d(p0, p1) * offset];\n    path.push(p2);\n    coords.push(coords[N]);\n    N++;\n    max--;\n  }\n  for (var i = 0; i < max; i++) {\n    p0 = coords[i];\n    p1 = coords[(i + 1) % N];\n    p2 = coords[(i + 2) % N];\n    mi = (p1[1] - p0[1]) / (p1[0] - p0[0]);\n    mi1 = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n    // Prevent alignements\n    if (Math.abs(mi - mi1) > 1e-10) {\n      li = Math.sqrt((p1[0] - p0[0]) * (p1[0] - p0[0]) + (p1[1] - p0[1]) * (p1[1] - p0[1]));\n      li1 = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\n      ri = p0[0] + offset * (p1[1] - p0[1]) / li;\n      ri1 = p1[0] + offset * (p2[1] - p1[1]) / li1;\n      si = p0[1] - offset * (p1[0] - p0[0]) / li;\n      si1 = p1[1] - offset * (p2[0] - p1[0]) / li1;\n      Xi1 = (mi1 * ri1 - mi * ri + si - si1) / (mi1 - mi);\n      Yi1 = (mi * mi1 * (ri1 - ri) + mi1 * si - mi * si1) / (mi1 - mi);\n\n      // Correction for vertical lines\n      if (p1[0] - p0[0] == 0) {\n        Xi1 = p1[0] + offset * (p1[1] - p0[1]) / Math.abs(p1[1] - p0[1]);\n        Yi1 = mi1 * Xi1 - mi1 * ri1 + si1;\n      }\n      if (p2[0] - p1[0] == 0) {\n        Xi1 = p2[0] + offset * (p2[1] - p1[1]) / Math.abs(p2[1] - p1[1]);\n        Yi1 = mi * Xi1 - mi * ri + si;\n      }\n      path.push([Xi1, Yi1]);\n    }\n  }\n  if (isClosed) {\n    path.push(path[0]);\n  } else {\n    coords.pop();\n    p0 = coords[coords.length - 1];\n    p1 = coords[coords.length - 2];\n    p2 = [p0[0] - (p1[1] - p0[1]) / ol_coordinate_dist2d(p0, p1) * offset, p0[1] + (p1[0] - p0[0]) / ol_coordinate_dist2d(p0, p1) * offset];\n    path.push(p2);\n  }\n  return path;\n};\n\n/** Find the segment a point belongs to\r\n * @param {ol.Coordinate} pt\r\n * @param {Array<ol.Coordinate>} coords\r\n * @return {} the index (-1 if not found) and the segment\r\n */\nvar ol_coordinate_findSegment = function ol_coordinate_findSegment(pt, coords) {\n  for (var i = 0; i < coords.length - 1; i++) {\n    var p0 = coords[i];\n    var p1 = coords[i + 1];\n    if (ol_coordinate_equal(pt, p0) || ol_coordinate_equal(pt, p1)) {\n      return {\n        index: 1,\n        segment: [p0, p1]\n      };\n    } else {\n      var d0 = ol_coordinate_dist2d(p0, p1);\n      var v0 = [(p1[0] - p0[0]) / d0, (p1[1] - p0[1]) / d0];\n      var d1 = ol_coordinate_dist2d(p0, pt);\n      var v1 = [(pt[0] - p0[0]) / d1, (pt[1] - p0[1]) / d1];\n      if (Math.abs(v0[0] * v1[1] - v0[1] * v1[0]) < 1e-10) {\n        return {\n          index: 1,\n          segment: [p0, p1]\n        };\n      }\n    }\n  }\n  return {\n    index: -1\n  };\n};\n\n/**\r\n * Split a Polygon geom with horizontal lines\r\n * @param {Array<ol.Coordinate>} geom\r\n * @param {number} y the y to split\r\n * @param {number} n contour index\r\n * @return {Array<Array<ol.Coordinate>>}\r\n */\nvar ol_coordinate_splitH = function ol_coordinate_splitH(geom, y, n) {\n  var x, abs;\n  var list = [];\n  for (var i = 0; i < geom.length - 1; i++) {\n    // Hole separator?\n    if (!geom[i].length || !geom[i + 1].length) continue;\n    // Intersect\n    if (geom[i][1] <= y && geom[i + 1][1] > y || geom[i][1] >= y && geom[i + 1][1] < y) {\n      abs = (y - geom[i][1]) / (geom[i + 1][1] - geom[i][1]);\n      x = abs * (geom[i + 1][0] - geom[i][0]) + geom[i][0];\n      list.push({\n        contour: n,\n        index: i,\n        pt: [x, y],\n        abs: abs\n      });\n    }\n  }\n  // Sort x\n  list.sort(function (a, b) {\n    return a.pt[0] - b.pt[0];\n  });\n  // Horizontal segment\n  var result = [];\n  for (var j = 0; j < list.length - 1; j += 2) {\n    result.push([list[j], list[j + 1]]);\n  }\n  return result;\n};\n\n/** Create a geometry given a type and coordinates */\nvar ol_geom_createFromType = function ol_geom_createFromType(type, coordinates) {\n  switch (type) {\n    case 'LineString':\n      return new ol_geom_LineString(coordinates);\n    case 'LinearRing':\n      return new ol_geom_LinearRing(coordinates);\n    case 'MultiLineString':\n      return new ol_geom_MultiLineString(coordinates);\n    case 'MultiPoint':\n      return new ol_geom_MultiPoint(coordinates);\n    case 'MultiPolygon':\n      return new ol_geom_MultiPolygon(coordinates);\n    case 'Point':\n      return new ol_geom_Point(coordinates);\n    case 'Polygon':\n      return new ol_geom_Polygon(coordinates);\n    default:\n      console.error('[createFromType] Unsupported type: ' + type);\n      return null;\n  }\n};\nexport { ol_geom_createFromType };\nexport { ol_coordinate_dist2d, ol_coordinate_equal, ol_coordinate_findSegment, ol_coordinate_getFeatureCenter, ol_coordinate_getGeomCenter, ol_coordinate_offsetCoords, ol_coordinate_splitH };\n\n/** Intersect 2 lines\r\n * @param {Arrar<ol.coordinate>} d1\r\n * @param {Arrar<ol.coordinate>} d2\r\n */\nvar ol_coordinate_getIntersectionPoint = function ol_coordinate_getIntersectionPoint(d1, d2) {\n  var d1x = d1[1][0] - d1[0][0];\n  var d1y = d1[1][1] - d1[0][1];\n  var d2x = d2[1][0] - d2[0][0];\n  var d2y = d2[1][1] - d2[0][1];\n  var det = d1x * d2y - d1y * d2x;\n  if (det != 0) {\n    var k = (d1x * d1[0][1] - d1x * d2[0][1] - d1y * d1[0][0] + d1y * d2[0][0]) / det;\n    return [d2[0][0] + k * d2x, d2[0][1] + k * d2y];\n  } else {\n    return false;\n  }\n};\nexport { ol_coordinate_getIntersectionPoint };\nvar ol_extent_intersection;\n(function () {\n  // Split at x\n  function splitX(pts, x) {\n    var pt;\n    for (var i = pts.length - 1; i > 0; i--) {\n      if (pts[i][0] > x && pts[i - 1][0] < x || pts[i][0] < x && pts[i - 1][0] > x) {\n        pt = [x, (x - pts[i][0]) / (pts[i - 1][0] - pts[i][0]) * (pts[i - 1][1] - pts[i][1]) + pts[i][1]];\n        pts.splice(i, 0, pt);\n      }\n    }\n  }\n  // Split at y\n  function splitY(pts, y) {\n    var pt;\n    for (var i = pts.length - 1; i > 0; i--) {\n      if (pts[i][1] > y && pts[i - 1][1] < y || pts[i][1] < y && pts[i - 1][1] > y) {\n        pt = [(y - pts[i][1]) / (pts[i - 1][1] - pts[i][1]) * (pts[i - 1][0] - pts[i][0]) + pts[i][0], y];\n        pts.splice(i, 0, pt);\n      }\n    }\n  }\n\n  /** Fast polygon intersection with an extent (used for area calculation)\r\n   * @param {ol_extent_Extent} extent\r\n   * @param {ol_geom_Polygon|ol_geom_MultiPolygon} polygon\r\n   * @returns {ol_geom_Polygon|ol_geom_MultiPolygon|null} return null if not a polygon geometry\r\n   */\n  ol_extent_intersection = function ol_extent_intersection(extent, polygon) {\n    var poly = polygon.getType() === 'Polygon';\n    if (!poly && polygon.getType() !== 'MultiPolygon') return null;\n    var geom = polygon.getCoordinates();\n    if (poly) geom = [geom];\n    geom.forEach(function (g) {\n      g.forEach(function (c) {\n        splitX(c, extent[0]);\n        splitX(c, extent[2]);\n        splitY(c, extent[1]);\n        splitY(c, extent[3]);\n      });\n    });\n    // Snap geom to the extent \n    geom.forEach(function (g) {\n      g.forEach(function (c) {\n        c.forEach(function (p) {\n          if (p[0] < extent[0]) p[0] = extent[0];else if (p[0] > extent[2]) p[0] = extent[2];\n          if (p[1] < extent[1]) p[1] = extent[1];else if (p[1] > extent[3]) p[1] = extent[3];\n        });\n      });\n    });\n    if (poly) {\n      return new ol_geom_Polygon(geom[0]);\n    } else {\n      return new ol_geom_MultiPolygon(geom);\n    }\n  };\n})();\nexport { ol_extent_intersection };\nexport { ol_extent_intersection as extentIntersection };\n\n/** Add points along a segment\r\n * @param {ol_Coordinate} p1 \r\n * @param {ol_Coordinate} p2 \r\n * @param {number} d \r\n * @param {boolean} start include starting point, default true\r\n * @returns {Array<ol_Coordinate>}\r\n */\nvar ol_coordinate_sampleAt = function ol_coordinate_sampleAt(p1, p2, d, start) {\n  var pts = [];\n  if (start !== false) pts.push(p1);\n  var dl = ol_coordinate_dist2d(p1, p2);\n  if (dl) {\n    var nb = Math.round(dl / d);\n    if (nb > 1) {\n      var dx = (p2[0] - p1[0]) / nb;\n      var dy = (p2[1] - p1[1]) / nb;\n      for (var i = 1; i < nb; i++) {\n        pts.push([p1[0] + dx * i, p1[1] + dy * i]);\n      }\n    }\n  }\n  pts.push(p2);\n  return pts;\n};\nexport { ol_coordinate_sampleAt };\n\n/** Sample a LineString at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_LineString}\r\n */\nol_geom_LineString.prototype.sampleAt = function (d) {\n  var line = this.getCoordinates();\n  var result = [];\n  for (var i = 1; i < line.length; i++) {\n    result = result.concat(ol_coordinate_sampleAt(line[i - 1], line[i], d, i === 1));\n  }\n  return new ol_geom_LineString(result);\n};\n\n/** Sample a MultiLineString at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_MultiLineString}\r\n */\nol_geom_MultiLineString.prototype.sampleAt = function (d) {\n  var lines = this.getCoordinates();\n  var result = [];\n  lines.forEach(function (p) {\n    var l = [];\n    for (var i = 1; i < p.length; i++) {\n      l = l.concat(ol_coordinate_sampleAt(p[i - 1], p[i], d, i === 1));\n    }\n    result.push(l);\n  });\n  return new ol_geom_MultiLineString(result);\n};\n\n/** Sample a Polygon at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_Polygon}\r\n */\nol_geom_Polygon.prototype.sampleAt = function (res) {\n  var poly = this.getCoordinates();\n  var result = [];\n  poly.forEach(function (p) {\n    var l = [];\n    for (var i = 1; i < p.length; i++) {\n      l = l.concat(ol_coordinate_sampleAt(p[i - 1], p[i], res, i === 1));\n    }\n    result.push(l);\n  });\n  return new ol_geom_Polygon(result);\n};\n\n/** Sample a MultiPolygon at a distance\r\n * @param {number} res\r\n * @returns {ol_geom_MultiPolygon}\r\n */\nol_geom_MultiPolygon.prototype.sampleAt = function (res) {\n  var mpoly = this.getCoordinates();\n  var result = [];\n  mpoly.forEach(function (poly) {\n    var a = [];\n    result.push(a);\n    poly.forEach(function (p) {\n      var l = [];\n      for (var i = 1; i < p.length; i++) {\n        l = l.concat(ol_coordinate_sampleAt(p[i - 1], p[i], res, i === 1));\n      }\n      a.push(l);\n    });\n  });\n  return new ol_geom_MultiPolygon(result);\n};\n\n/** Intersect a geometry using a circle\r\n * @param {ol_geom_Geometry} geom\r\n * @param {number} resolution circle resolution to sample the polygon on the circle, default 1\r\n * @returns {ol_geom_Geometry}\r\n */\nol_geom_Circle.prototype.intersection = function (geom, resolution) {\n  if (geom.sampleAt) {\n    var ext = ol_extent_buffer(this.getCenter().concat(this.getCenter()), this.getRadius());\n    geom = ol_extent_intersection(ext, geom);\n    geom = geom.simplify(resolution);\n    var c = this.getCenter();\n    var r = this.getRadius();\n    //var res = (resolution||1) * r / 100;\n    var g = geom.sampleAt(resolution).getCoordinates();\n    switch (geom.getType()) {\n      case 'Polygon':\n        g = [g];\n      // fallthrough\n      case 'MultiPolygon':\n        {\n          var hasout = false;\n          // var hasin = false;\n          var result = [];\n          g.forEach(function (poly) {\n            var a = [];\n            result.push(a);\n            poly.forEach(function (ring) {\n              var l = [];\n              a.push(l);\n              ring.forEach(function (p) {\n                var d = ol_coordinate_dist2d(c, p);\n                if (d > r) {\n                  hasout = true;\n                  l.push([c[0] + r / d * (p[0] - c[0]), c[1] + r / d * (p[1] - c[1])]);\n                } else {\n                  // hasin = true;\n                  l.push(p);\n                }\n              });\n            });\n          });\n          if (!hasout) return geom;\n          if (geom.getType() === 'Polygon') {\n            return new ol_geom_Polygon(result[0]);\n          } else {\n            return new ol_geom_MultiPolygon(result);\n          }\n        }\n    }\n  } else {\n    console.warn('[ol/geom/Circle~intersection] Unsupported geometry type: ' + geom.getType());\n  }\n  return geom;\n};","map":{"version":3,"names":["ol_geom_LineString","ol_geom_LinearRing","ol_geom_MultiLineString","ol_geom_MultiPoint","ol_geom_MultiPolygon","ol_geom_Point","ol_geom_Polygon","ol_geom_Circle","getCenter","ol_extent_getCenter","buffer","ol_extent_buffer","ol_coordinate_dist2d","p1","p2","dx","dy","Math","sqrt","ol_coordinate_equal","ol_coordinate_getFeatureCenter","f","ol_coordinate_getGeomCenter","getGeometry","geom","getType","getCoordinates","getPolygon","getInteriorPoint","getClosestPoint","getExtent","ol_coordinate_offsetCoords","coords","offset","path","N","length","max","mi","mi1","li","li1","ri","ri1","si","si1","Xi1","Yi1","p0","isClosed","push","i","abs","pop","ol_coordinate_findSegment","pt","index","segment","d0","v0","d1","v1","ol_coordinate_splitH","y","n","x","list","contour","sort","a","b","result","j","ol_geom_createFromType","type","coordinates","console","error","ol_coordinate_getIntersectionPoint","d2","d1x","d1y","d2x","d2y","det","k","ol_extent_intersection","splitX","pts","splice","splitY","extent","polygon","poly","forEach","g","c","p","extentIntersection","ol_coordinate_sampleAt","d","start","dl","nb","round","prototype","sampleAt","line","concat","lines","l","res","mpoly","intersection","resolution","ext","getRadius","simplify","r","hasout","ring","warn"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol-ext/geom/GeomUtils.js"],"sourcesContent":["/*\tCopyright (c) 2016 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n\r\n  Usefull function to handle geometric operations\r\n*/\r\n\r\nimport ol_geom_LineString from 'ol/geom/LineString.js'\r\nimport ol_geom_LinearRing from 'ol/geom/LinearRing.js'\r\nimport ol_geom_MultiLineString from 'ol/geom/MultiLineString.js'\r\nimport ol_geom_MultiPoint from 'ol/geom/MultiPoint.js'\r\nimport ol_geom_MultiPolygon from 'ol/geom/MultiPolygon.js'\r\nimport ol_geom_Point from 'ol/geom/Point.js'\r\nimport ol_geom_Polygon from 'ol/geom/Polygon.js'\r\nimport ol_geom_Circle from 'ol/geom/Circle.js'\r\nimport {getCenter as ol_extent_getCenter} from 'ol/extent.js'\r\nimport {buffer as ol_extent_buffer} from 'ol/extent.js'\r\n\r\n/** Distance beetween 2 points\r\n *\tUsefull geometric functions\r\n * @param {ol.Coordinate} p1 first point\r\n * @param {ol.Coordinate} p2 second point\r\n * @return {number} distance\r\n */\r\nvar ol_coordinate_dist2d = function(p1, p2) {\r\n  var dx = p1[0]-p2[0];\r\n  var dy = p1[1]-p2[1];\r\n  return Math.sqrt(dx*dx+dy*dy);\r\n}\r\n\r\n/** 2 points are equal\r\n *\tUsefull geometric functions\r\n * @param {ol.Coordinate} p1 first point\r\n * @param {ol.Coordinate} p2 second point\r\n * @return {boolean}\r\n */\r\nvar ol_coordinate_equal = function(p1, p2) {\r\n  return (p1[0]==p2[0] && p1[1]==p2[1]);\r\n}\r\n\r\n/** Get center coordinate of a feature\r\n * @param {ol.Feature} f\r\n * @return {ol.coordinate} the center\r\n */\r\nvar ol_coordinate_getFeatureCenter = function(f) {\r\n  return ol_coordinate_getGeomCenter (f.getGeometry());\r\n};\r\n\r\n/** Get center coordinate of a geometry\r\n* @param {ol.geom.Geometry} geom\r\n* @return {ol.Coordinate} the center\r\n*/\r\nvar ol_coordinate_getGeomCenter = function(geom) {\r\n  switch (geom.getType()) {\r\n    case 'Point': \r\n      return geom.getCoordinates();\r\n    case \"MultiPolygon\":\r\n      geom = geom.getPolygon(0);\r\n      // fallthrough\r\n    case \"Polygon\":\r\n      return geom.getInteriorPoint().getCoordinates();\r\n    default:\r\n      return geom.getClosestPoint(ol_extent_getCenter(geom.getExtent()));\r\n  }\r\n};\r\n\r\n/** Offset a polyline\r\n * @param {Array<ol.Coordinate>} coords\r\n * @param {number} offset\r\n * @return {Array<ol.Coordinate>} resulting coord\r\n * @see http://stackoverflow.com/a/11970006/796832\r\n * @see https://drive.google.com/viewerng/viewer?a=v&pid=sites&srcid=ZGVmYXVsdGRvbWFpbnxqa2dhZGdldHN0b3JlfGd4OjQ4MzI5M2Y0MjNmNzI2MjY\r\n */\r\nvar ol_coordinate_offsetCoords = function (coords, offset) {\r\n  var path = [];\r\n  var N = coords.length-1;\r\n  var max = N;\r\n  var mi, mi1, li, li1, ri, ri1, si, si1, Xi1, Yi1;\r\n  var p0, p1, p2;\r\n  var isClosed = ol_coordinate_equal(coords[0],coords[N]);\r\n  if (!isClosed) {\r\n    p0 = coords[0];\r\n    p1 = coords[1];\r\n    p2 = [\r\n      p0[0] + (p1[1] - p0[1]) / ol_coordinate_dist2d(p0,p1) *offset,\r\n      p0[1] - (p1[0] - p0[0]) / ol_coordinate_dist2d(p0,p1) *offset\r\n    ];\r\n    path.push(p2);\r\n    coords.push(coords[N])\r\n    N++;\r\n    max--;\r\n  }\r\n  for (var i = 0; i < max; i++) {\r\n    p0 = coords[i];\r\n    p1 = coords[(i+1) % N];\r\n    p2 = coords[(i+2) % N];\r\n\r\n    mi = (p1[1] - p0[1])/(p1[0] - p0[0]);\r\n    mi1 = (p2[1] - p1[1])/(p2[0] - p1[0]);\r\n    // Prevent alignements\r\n    if (Math.abs(mi-mi1) > 1e-10) {\r\n      li = Math.sqrt((p1[0] - p0[0])*(p1[0] - p0[0])+(p1[1] - p0[1])*(p1[1] - p0[1]));\r\n      li1 = Math.sqrt((p2[0] - p1[0])*(p2[0] - p1[0])+(p2[1] - p1[1])*(p2[1] - p1[1]));\r\n      ri = p0[0] + offset*(p1[1] - p0[1])/li;\r\n      ri1 = p1[0] + offset*(p2[1] - p1[1])/li1;\r\n      si = p0[1] - offset*(p1[0] - p0[0])/li;\r\n      si1 = p1[1] - offset*(p2[0] - p1[0])/li1;\r\n      Xi1 = (mi1*ri1-mi*ri+si-si1) / (mi1-mi);\r\n      Yi1 = (mi*mi1*(ri1-ri)+mi1*si-mi*si1) / (mi1-mi);\r\n\r\n      // Correction for vertical lines\r\n      if(p1[0] - p0[0] == 0) {\r\n        Xi1 = p1[0] + offset*(p1[1] - p0[1])/Math.abs(p1[1] - p0[1]);\r\n        Yi1 = mi1*Xi1 - mi1*ri1 + si1;\r\n      }\r\n      if (p2[0] - p1[0] == 0 ) {\r\n        Xi1 = p2[0] + offset*(p2[1] - p1[1])/Math.abs(p2[1] - p1[1]);\r\n        Yi1 = mi*Xi1 - mi*ri + si;\r\n      }\r\n\r\n      path.push([Xi1, Yi1]);\r\n    }\r\n  }\r\n  if (isClosed) {\r\n    path.push(path[0]);\r\n  } else {\r\n    coords.pop();\r\n    p0 = coords[coords.length-1];\r\n    p1 = coords[coords.length-2];\r\n    p2 = [\r\n      p0[0] - (p1[1] - p0[1]) / ol_coordinate_dist2d(p0,p1) *offset,\r\n      p0[1] + (p1[0] - p0[0]) / ol_coordinate_dist2d(p0,p1) *offset\r\n    ];\r\n    path.push(p2);\r\n  }\r\n  return path;\r\n}\r\n\r\n/** Find the segment a point belongs to\r\n * @param {ol.Coordinate} pt\r\n * @param {Array<ol.Coordinate>} coords\r\n * @return {} the index (-1 if not found) and the segment\r\n */\r\nvar ol_coordinate_findSegment = function (pt, coords) {\r\n  for (var i=0; i<coords.length-1; i++) {\r\n    var p0 = coords[i];\r\n    var p1 = coords[i+1];\r\n    if (ol_coordinate_equal(pt, p0) || ol_coordinate_equal(pt, p1)) {\r\n      return { index:1, segment: [p0,p1] };\r\n    } else {\r\n      var d0 = ol_coordinate_dist2d(p0,p1);\r\n      var v0 = [ (p1[0] - p0[0]) / d0, (p1[1] - p0[1]) / d0 ];\r\n      var d1 = ol_coordinate_dist2d(p0,pt);\r\n      var v1 = [ (pt[0] - p0[0]) / d1, (pt[1] - p0[1]) / d1 ];\r\n      if (Math.abs(v0[0]*v1[1] - v0[1]*v1[0]) < 1e-10) {\r\n        return { index:1, segment: [p0,p1] };\r\n      }\r\n    }\r\n  }\r\n  return { index: -1 };\r\n};\r\n\r\n/**\r\n * Split a Polygon geom with horizontal lines\r\n * @param {Array<ol.Coordinate>} geom\r\n * @param {number} y the y to split\r\n * @param {number} n contour index\r\n * @return {Array<Array<ol.Coordinate>>}\r\n */\r\nvar ol_coordinate_splitH = function (geom, y, n) {\r\n  var x, abs;\r\n  var list = [];\r\n  for (var i=0; i<geom.length-1; i++) {\r\n    // Hole separator?\r\n    if (!geom[i].length || !geom[i+1].length) continue;\r\n    // Intersect\r\n    if (geom[i][1]<=y && geom[i+1][1]>y || geom[i][1]>=y && geom[i+1][1]<y) {\r\n      abs = (y-geom[i][1]) / (geom[i+1][1]-geom[i][1]);\r\n      x = abs * (geom[i+1][0]-geom[i][0]) + geom[i][0];\r\n      list.push ({ contour: n, index: i, pt: [x,y], abs: abs });\r\n    }\r\n  }\r\n  // Sort x\r\n  list.sort(function(a,b) { return a.pt[0] - b.pt[0] });\r\n  // Horizontal segment\r\n  var result = [];\r\n  for (var j=0; j<list.length-1; j += 2) {\r\n    result.push([list[j], list[j+1]])\r\n  }\r\n  return result;\r\n};\r\n\r\n/** Create a geometry given a type and coordinates */\r\nvar ol_geom_createFromType = function (type, coordinates) {\r\n  switch (type) {\r\n    case 'LineString': return new ol_geom_LineString(coordinates);\r\n    case 'LinearRing': return new ol_geom_LinearRing(coordinates);\r\n    case 'MultiLineString': return new ol_geom_MultiLineString(coordinates);\r\n    case 'MultiPoint': return new ol_geom_MultiPoint(coordinates);\r\n    case 'MultiPolygon': return new ol_geom_MultiPolygon(coordinates);\r\n    case 'Point': return new ol_geom_Point(coordinates);\r\n    case 'Polygon': return new ol_geom_Polygon(coordinates);\r\n    default:\r\n      console.error('[createFromType] Unsupported type: '+type);\r\n      return null;\r\n  }\r\n};\r\n\r\nexport {ol_geom_createFromType}\r\nexport {ol_coordinate_dist2d, ol_coordinate_equal, ol_coordinate_findSegment, ol_coordinate_getFeatureCenter, ol_coordinate_getGeomCenter, ol_coordinate_offsetCoords, ol_coordinate_splitH}\r\n\r\n/** Intersect 2 lines\r\n * @param {Arrar<ol.coordinate>} d1\r\n * @param {Arrar<ol.coordinate>} d2\r\n */\r\nvar ol_coordinate_getIntersectionPoint = function (d1, d2) {\r\n  var d1x = d1[1][0] - d1[0][0];\r\n  var d1y = d1[1][1] - d1[0][1];\r\n  var d2x = d2[1][0] - d2[0][0];\r\n  var d2y = d2[1][1] - d2[0][1];\r\n  var det = d1x * d2y - d1y * d2x;\r\n  if (det != 0) {\r\n    var k = (d1x * d1[0][1] - d1x * d2[0][1] - d1y * d1[0][0] + d1y * d2[0][0]) / det;\r\n    return [d2[0][0] + k*d2x, d2[0][1] + k*d2y];\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport { ol_coordinate_getIntersectionPoint }\r\n\r\nvar ol_extent_intersection;\r\n\r\n(function() {\r\n// Split at x\r\nfunction splitX(pts, x) {\r\n  var pt;\r\n  for (let i=pts.length-1; i>0; i--) {\r\n    if ((pts[i][0]>x && pts[i-1][0]<x) || (pts[i][0]<x && pts[i-1][0]>x)) {\r\n      pt = [ x, (x - pts[i][0]) / (pts[i-1][0]-pts[i][0]) * (pts[i-1][1]-pts[i][1]) + pts[i][1]];\r\n      pts.splice(i, 0, pt);\r\n    }\r\n  }\r\n}\r\n// Split at y\r\nfunction splitY(pts, y) {\r\n  var pt;\r\n  for (let i=pts.length-1; i>0; i--) {\r\n    if ((pts[i][1]>y && pts[i-1][1]<y) || (pts[i][1]<y && pts[i-1][1]>y)) {\r\n      pt = [ (y - pts[i][1]) / (pts[i-1][1]-pts[i][1]) * (pts[i-1][0]-pts[i][0]) + pts[i][0], y];\r\n      pts.splice(i, 0, pt);\r\n    }\r\n  }\r\n}\r\n\r\n/** Fast polygon intersection with an extent (used for area calculation)\r\n * @param {ol_extent_Extent} extent\r\n * @param {ol_geom_Polygon|ol_geom_MultiPolygon} polygon\r\n * @returns {ol_geom_Polygon|ol_geom_MultiPolygon|null} return null if not a polygon geometry\r\n */\r\nol_extent_intersection = function(extent, polygon) {\r\n  var poly = (polygon.getType() === 'Polygon');\r\n  if (!poly && polygon.getType() !== 'MultiPolygon') return null;\r\n  var geom = polygon.getCoordinates();\r\n  if (poly) geom = [geom];\r\n  geom.forEach(function(g) {\r\n    g.forEach(function(c) {\r\n      splitX(c, extent[0]);\r\n      splitX(c, extent[2]);\r\n      splitY(c, extent[1]);\r\n      splitY(c, extent[3]);\r\n    });\r\n  })\r\n  // Snap geom to the extent \r\n  geom.forEach(function(g) {\r\n    g.forEach(function(c) {\r\n      c.forEach(function(p) {\r\n        if (p[0]<extent[0]) p[0] = extent[0];\r\n        else if (p[0]>extent[2]) p[0] = extent[2];\r\n        if (p[1]<extent[1]) p[1] = extent[1];\r\n        else if (p[1]>extent[3]) p[1] = extent[3];\r\n      })\r\n    })\r\n  })\r\n  if (poly) {\r\n    return new ol_geom_Polygon(geom[0]);\r\n  } else {\r\n    return new ol_geom_MultiPolygon(geom);\r\n  }\r\n};\r\n})();\r\n\r\nexport { ol_extent_intersection }\r\nexport { ol_extent_intersection as extentIntersection }\r\n\r\n/** Add points along a segment\r\n * @param {ol_Coordinate} p1 \r\n * @param {ol_Coordinate} p2 \r\n * @param {number} d \r\n * @param {boolean} start include starting point, default true\r\n * @returns {Array<ol_Coordinate>}\r\n */\r\nvar ol_coordinate_sampleAt = function(p1, p2, d, start) {\r\n  var pts = [];\r\n  if (start!==false) pts.push(p1);\r\n  var dl = ol_coordinate_dist2d(p1,p2);\r\n  if (dl) {\r\n    var nb = Math.round(dl/d);\r\n    if (nb>1) {\r\n      var dx = (p2[0]-p1[0]) / nb;\r\n      var dy = (p2[1]-p1[1]) / nb;\r\n      for (var i=1; i<nb; i++) {\r\n        pts.push([p1[0] + dx*i, p1[1] + dy*i])\r\n      }\r\n    }\r\n  }\r\n  pts.push(p2);\r\n  return pts;\r\n};\r\nexport { ol_coordinate_sampleAt }\r\n\r\n/** Sample a LineString at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_LineString}\r\n */\r\nol_geom_LineString.prototype.sampleAt = function(d) {\r\n  var line = this.getCoordinates();\r\n  var result = [];\r\n  for (var i=1; i<line.length; i++) {\r\n    result = result.concat(ol_coordinate_sampleAt(line[i-1], line[i], d, i===1));\r\n  }\r\n  return new ol_geom_LineString(result);\r\n};\r\n\r\n/** Sample a MultiLineString at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_MultiLineString}\r\n */\r\nol_geom_MultiLineString.prototype.sampleAt = function(d) {\r\n  var lines = this.getCoordinates();\r\n  var result = [];\r\n  lines.forEach(function(p) {\r\n    var l = [];\r\n    for (var i=1; i<p.length; i++) {\r\n      l = l.concat(ol_coordinate_sampleAt(p[i-1], p[i], d, i===1));\r\n    }\r\n    result.push(l);\r\n  })\r\n  return new ol_geom_MultiLineString(result);\r\n};\r\n\r\n/** Sample a Polygon at a distance\r\n * @param {number} d\r\n * @returns {ol_geom_Polygon}\r\n */\r\nol_geom_Polygon.prototype.sampleAt = function(res) {\r\n  var poly = this.getCoordinates();\r\n  var result = [];\r\n  poly.forEach(function(p) {\r\n    var l = [];\r\n    for (var i=1; i<p.length; i++) {\r\n      l = l.concat(ol_coordinate_sampleAt(p[i-1], p[i], res, i===1));\r\n    }\r\n    result.push(l);\r\n  })\r\n  return new ol_geom_Polygon(result);\r\n};\r\n\r\n/** Sample a MultiPolygon at a distance\r\n * @param {number} res\r\n * @returns {ol_geom_MultiPolygon}\r\n */\r\nol_geom_MultiPolygon.prototype.sampleAt = function(res) {\r\n  var mpoly = this.getCoordinates();\r\n  var result = [];\r\n  mpoly.forEach(function(poly) {\r\n    var a = [];\r\n    result.push(a);\r\n    poly.forEach(function(p) {\r\n      var l = [];\r\n      for (var i=1; i<p.length; i++) {\r\n        l = l.concat(ol_coordinate_sampleAt(p[i-1], p[i], res, i===1));\r\n      }\r\n      a.push(l);\r\n    })\r\n  });\r\n  return new ol_geom_MultiPolygon(result);\r\n};\r\n\r\n/** Intersect a geometry using a circle\r\n * @param {ol_geom_Geometry} geom\r\n * @param {number} resolution circle resolution to sample the polygon on the circle, default 1\r\n * @returns {ol_geom_Geometry}\r\n */\r\nol_geom_Circle.prototype.intersection = function(geom, resolution) {\r\n  if (geom.sampleAt) {\r\n    var ext = ol_extent_buffer(this.getCenter().concat(this.getCenter()), this.getRadius());\r\n    geom = ol_extent_intersection(ext, geom);\r\n    geom = geom.simplify(resolution);\r\n    var c = this.getCenter();\r\n    var r = this.getRadius();\r\n    //var res = (resolution||1) * r / 100;\r\n    var g = geom.sampleAt(resolution).getCoordinates();\r\n    switch (geom.getType()) {\r\n      case 'Polygon': g = [g];\r\n        // fallthrough\r\n      case 'MultiPolygon': {\r\n        var hasout = false;\r\n        // var hasin = false;\r\n        var result = [];\r\n        g.forEach(function(poly) {\r\n          var a = [];\r\n          result.push(a);\r\n          poly.forEach(function(ring) {\r\n            var l = [];\r\n            a.push(l);\r\n            ring.forEach(function(p) {\r\n              var d = ol_coordinate_dist2d(c, p);\r\n              if (d > r) {\r\n                hasout = true;\r\n                l.push([\r\n                  c[0] + r / d * (p[0]-c[0]),\r\n                  c[1] + r / d * (p[1]-c[1])\r\n                ]);\r\n              } else {\r\n                // hasin = true;\r\n                l.push(p);\r\n              }\r\n            });\r\n          })\r\n        });\r\n        if (!hasout) return geom;\r\n        if (geom.getType() === 'Polygon') {\r\n          return new ol_geom_Polygon(result[0]);\r\n        } else {\r\n          return new ol_geom_MultiPolygon(result);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.warn('[ol/geom/Circle~intersection] Unsupported geometry type: '+geom.getType());\r\n  }\r\n  return geom;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
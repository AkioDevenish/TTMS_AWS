{"ast":null,"code":"import _typeof from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.is-array.js\";\n/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nvar Style = /*#__PURE__*/function () {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  function Style(options) {\n    _classCallCheck(this, Style);\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default|null}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default|null}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  return _createClass(Style, [{\n    key: \"clone\",\n    value: function clone() {\n      var _geometry, _this$getRenderer;\n      var geometry = this.getGeometry();\n      if (geometry && _typeof(geometry) === 'object') {\n        geometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry.clone();\n      }\n      return new Style({\n        geometry: (_geometry = geometry) !== null && _geometry !== void 0 ? _geometry : undefined,\n        fill: this.getFill() ? this.getFill().clone() : undefined,\n        image: this.getImage() ? this.getImage().clone() : undefined,\n        renderer: (_this$getRenderer = this.getRenderer()) !== null && _this$getRenderer !== void 0 ? _this$getRenderer : undefined,\n        stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n        text: this.getText() ? this.getText().clone() : undefined,\n        zIndex: this.getZIndex()\n      });\n    }\n\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setRenderer} or the `renderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n  }, {\n    key: \"getRenderer\",\n    value: function getRenderer() {\n      return this.renderer_;\n    }\n\n    /**\n     * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n     * and `image` options of the style will be ignored.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n  }, {\n    key: \"setRenderer\",\n    value: function setRenderer(renderer) {\n      this.renderer_ = renderer;\n    }\n\n    /**\n     * Sets a custom renderer function for this style used\n     * in hit detection.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n  }, {\n    key: \"setHitDetectionRenderer\",\n    value: function setHitDetectionRenderer(renderer) {\n      this.hitDetectionRenderer_ = renderer;\n    }\n\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n  }, {\n    key: \"getHitDetectionRenderer\",\n    value: function getHitDetectionRenderer() {\n      return this.hitDetectionRenderer_;\n    }\n\n    /**\n     * Get the geometry to be rendered.\n     * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n     * Feature property or geometry or function that returns the geometry that will\n     * be rendered with this style.\n     * @api\n     */\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry() {\n      return this.geometry_;\n    }\n\n    /**\n     * Get the function used to generate a geometry for rendering.\n     * @return {!GeometryFunction} Function that is called with a feature\n     * and returns the geometry to render instead of the feature's geometry.\n     * @api\n     */\n  }, {\n    key: \"getGeometryFunction\",\n    value: function getGeometryFunction() {\n      return this.geometryFunction_;\n    }\n\n    /**\n     * Get the fill style.\n     * @return {import(\"./Fill.js\").default|null} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      return this.fill_;\n    }\n\n    /**\n     * Set the fill style.\n     * @param {import(\"./Fill.js\").default|null} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setFill\",\n    value: function setFill(fill) {\n      this.fill_ = fill;\n    }\n\n    /**\n     * Get the image style.\n     * @return {import(\"./Image.js\").default|null} Image style.\n     * @api\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage() {\n      return this.image_;\n    }\n\n    /**\n     * Set the image style.\n     * @param {import(\"./Image.js\").default} image Image style.\n     * @api\n     */\n  }, {\n    key: \"setImage\",\n    value: function setImage(image) {\n      this.image_ = image;\n    }\n\n    /**\n     * Get the stroke style.\n     * @return {import(\"./Stroke.js\").default|null} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getStroke\",\n    value: function getStroke() {\n      return this.stroke_;\n    }\n\n    /**\n     * Set the stroke style.\n     * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setStroke\",\n    value: function setStroke(stroke) {\n      this.stroke_ = stroke;\n    }\n\n    /**\n     * Get the text style.\n     * @return {import(\"./Text.js\").default|null} Text style.\n     * @api\n     */\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      return this.text_;\n    }\n\n    /**\n     * Set the text style.\n     * @param {import(\"./Text.js\").default} text Text style.\n     * @api\n     */\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      this.text_ = text;\n    }\n\n    /**\n     * Get the z-index for the style.\n     * @return {number|undefined} ZIndex.\n     * @api\n     */\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      return this.zIndex_;\n    }\n\n    /**\n     * Set a geometry that is rendered instead of the feature's geometry.\n     *\n     * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n     *     Feature property or geometry or function returning a geometry to render\n     *     for this style.\n     * @api\n     */\n  }, {\n    key: \"setGeometry\",\n    value: function setGeometry(geometry) {\n      if (typeof geometry === 'function') {\n        this.geometryFunction_ = geometry;\n      } else if (typeof geometry === 'string') {\n        this.geometryFunction_ = function (feature) {\n          return /** @type {import(\"../geom/Geometry.js\").default} */feature.get(geometry);\n        };\n      } else if (!geometry) {\n        this.geometryFunction_ = defaultGeometryFunction;\n      } else if (geometry !== undefined) {\n        this.geometryFunction_ = function () {\n          return /** @type {import(\"../geom/Geometry.js\").default} */geometry;\n        };\n      }\n      this.geometry_ = geometry;\n    }\n\n    /**\n     * Set the z-index.\n     *\n     * @param {number|undefined} zIndex ZIndex.\n     * @api\n     */\n  }, {\n    key: \"setZIndex\",\n    value: function setZIndex(zIndex) {\n      this.zIndex_ = zIndex;\n    }\n  }]);\n}();\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  var styleFunction;\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof (/** @type {?} */obj.getZIndex) === 'function', 'Expected an `Style` or an array of `Style`');\n      var style = /** @type {Style} */obj;\n      styles = [style];\n    }\n    styleFunction = function styleFunction() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nvar defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles['Polygon'] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles['MultiPolygon'] = styles['Polygon'];\n  styles['LineString'] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles['MultiLineString'] = styles['LineString'];\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n  styles['Point'] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles['MultiPoint'] = styles['Point'];\n  styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\nexport default Style;","map":{"version":3,"names":["CircleStyle","Fill","Stroke","assert","Style","options","_classCallCheck","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","_createClass","key","value","clone","_geometry","_this$getRenderer","getGeometry","_typeof","getFill","getImage","getRenderer","getStroke","getText","getZIndex","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","white","blue","concat","Infinity"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/style/Style.js"],"sourcesContent":["/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default|null}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ =\n      options.hitDetectionRenderer !== undefined\n        ? options.hitDetectionRenderer\n        : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default|null}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry ?? undefined,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer() ?? undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default|null} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default|null} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\n        'Expected an `Style` or an array of `Style`'\n      );\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles['MultiPolygon'] = styles['Polygon'];\n\n  styles['LineString'] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles['MultiLineString'] = styles['LineString'];\n\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n\n  styles['Point'] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles['MultiPoint'] = styles['Point'];\n\n  styles['GeometryCollection'] = styles['Polygon'].concat(\n    styles['LineString'],\n    styles['Point']\n  );\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
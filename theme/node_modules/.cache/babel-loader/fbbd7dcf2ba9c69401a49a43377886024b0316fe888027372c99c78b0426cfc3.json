{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { platformModifierKey, targetNotEditable } from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nvar KeyboardZoom = /*#__PURE__*/function (_Interaction) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function KeyboardZoom(options) {\n    var _this;\n    _classCallCheck(this, KeyboardZoom);\n    _this = _callSuper(this, KeyboardZoom);\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : function (mapBrowserEvent) {\n      return !platformModifierKey(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 100;\n    return _this;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  _inherits(KeyboardZoom, _Interaction);\n  return _createClass(KeyboardZoom, [{\n    key: \"handleEvent\",\n    value: function handleEvent(mapBrowserEvent) {\n      var stopEvent = false;\n      if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n        var keyEvent = /** @type {KeyboardEvent} */\n        mapBrowserEvent.originalEvent;\n        var key = keyEvent.key;\n        if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n          var map = mapBrowserEvent.map;\n          var delta = key === '+' ? this.delta_ : -this.delta_;\n          var view = map.getView();\n          zoomByDelta(view, delta, undefined, this.duration_);\n          keyEvent.preventDefault();\n          stopEvent = true;\n        }\n      }\n      return !stopEvent;\n    }\n  }]);\n}(Interaction);\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","Interaction","zoomByDelta","platformModifierKey","targetNotEditable","KeyboardZoom","_Interaction","options","_this","_classCallCheck","_callSuper","condition_","condition","mapBrowserEvent","delta_","delta","duration_","duration","undefined","_inherits","_createClass","key","value","handleEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","map","view","getView","preventDefault"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/interaction/KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {platformModifierKey, targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition\n      ? options.condition\n      : function (mapBrowserEvent) {\n          return (\n            !platformModifierKey(mapBrowserEvent) &&\n            targetNotEditable(mapBrowserEvent)\n          );\n        };\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const key = keyEvent.key;\n      if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n        const map = mapBrowserEvent.map;\n        const delta = key === '+' ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,IAAGC,WAAW,QAAO,kBAAkB;AACzD,SAAQC,mBAAmB,EAAEC,iBAAiB,QAAO,wBAAwB;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,IAaMC,YAAY,0BAAAC,YAAA;EAChB;AACF;AACA;EACE,SAAAD,aAAYE,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,YAAA;IACnBG,KAAA,GAAAE,UAAA,OAAAL,YAAA;IAEAE,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;;IAEhC;AACJ;AACA;AACA;IACIC,KAAA,CAAKG,UAAU,GAAGJ,OAAO,CAACK,SAAS,GAC/BL,OAAO,CAACK,SAAS,GACjB,UAAUC,eAAe,EAAE;MACzB,OACE,CAACV,mBAAmB,CAACU,eAAe,CAAC,IACrCT,iBAAiB,CAACS,eAAe,CAAC;IAEtC,CAAC;;IAEL;AACJ;AACA;AACA;IACIL,KAAA,CAAKM,MAAM,GAAGP,OAAO,CAACQ,KAAK,GAAGR,OAAO,CAACQ,KAAK,GAAG,CAAC;;IAE/C;AACJ;AACA;AACA;IACIP,KAAA,CAAKQ,SAAS,GAAGT,OAAO,CAACU,QAAQ,KAAKC,SAAS,GAAGX,OAAO,CAACU,QAAQ,GAAG,GAAG;IAAC,OAAAT,KAAA;EAC3E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANEW,SAAA,CAAAd,YAAA,EAAAC,YAAA;EAAA,OAAAc,YAAA,CAAAf,YAAA;IAAAgB,GAAA;IAAAC,KAAA,EAOA,SAAAC,WAAWA,CAACV,eAAe,EAAE;MAC3B,IAAIW,SAAS,GAAG,KAAK;MACrB,IACEX,eAAe,CAACY,IAAI,IAAIzB,SAAS,CAAC0B,OAAO,IACzCb,eAAe,CAACY,IAAI,IAAIzB,SAAS,CAAC2B,QAAQ,EAC1C;QACA,IAAMC,QAAQ,GAAG;QACff,eAAe,CAACgB,aACjB;QACD,IAAMR,GAAG,GAAGO,QAAQ,CAACP,GAAG;QACxB,IAAI,IAAI,CAACV,UAAU,CAACE,eAAe,CAAC,KAAKQ,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,CAAC,EAAE;UACpE,IAAMS,GAAG,GAAGjB,eAAe,CAACiB,GAAG;UAC/B,IAAMf,KAAK,GAAGM,GAAG,KAAK,GAAG,GAAG,IAAI,CAACP,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;UACtD,IAAMiB,IAAI,GAAGD,GAAG,CAACE,OAAO,CAAC,CAAC;UAC1B9B,WAAW,CAAC6B,IAAI,EAAEhB,KAAK,EAAEG,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC;UACnDY,QAAQ,CAACK,cAAc,CAAC,CAAC;UACzBT,SAAS,GAAG,IAAI;QAClB;MACF;MACA,OAAO,CAACA,SAAS;IACnB;EAAC;AAAA,EA9DwBvB,WAAW;AAiEtC,eAAeI,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _toConsumableArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nvar IIIF = /*#__PURE__*/function (_TileImage) {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  function IIIF(options) {\n    var _this;\n    _classCallCheck(this, IIIF);\n    /**\n     * @type {Partial<Options>}\n     */\n    var partialOptions = options || {};\n    var baseUrl = partialOptions.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    var version = partialOptions.version || Versions.VERSION2;\n    var sizes = partialOptions.sizes || [];\n    var size = partialOptions.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 'Missing or invalid `size`');\n    var width = size[0];\n    var height = size[1];\n    var tileSize = partialOptions.tileSize;\n    var tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    var format = partialOptions.format || 'jpg';\n    var quality = partialOptions.quality || (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    var resolutions = partialOptions.resolutions || [];\n    var supports = partialOptions.supports || [];\n    var extent = partialOptions.extent || [0, -height, width, 0];\n    var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    var tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n        for (var i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        var maxScaleFactor = Math.max.apply(Math, _toConsumableArray(resolutions));\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        var ignoredSizesIndex = [];\n        for (var _i = 0; _i < sizes.length; _i++) {\n          var resolution = width / sizes[_i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(_i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (var _i2 = 0; _i2 < ignoredSizesIndex.length; _i2++) {\n            sizes.splice(ignoredSizesIndex[_i2] - _i2, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n    var tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n    var tileUrlFunction = function tileUrlFunction(tileCoord, pixelRatio, projection) {\n      var regionParam, sizeParam;\n      var zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      var tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        var regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        var regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          var pctX = formatPercentage(regionX / width * 100),\n            pctY = formatPercentage(regionY / height * 100),\n            pctW = formatPercentage(regionW / width * 100),\n            pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          var regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n    var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    _this = _callSuper(this, IIIF, [{\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition\n    }]);\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this.zDirection = partialOptions.zDirection;\n    return _this;\n  }\n  _inherits(IIIF, _TileImage);\n  return _createClass(IIIF);\n}(TileImage);\nexport default IIIF;","map":{"version":3,"names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","_TileImage","options","_this","_classCallCheck","partialOptions","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","undefined","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","includes","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","apply","_toConsumableArray","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","_callSuper","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","state","tileClass","transition","zDirection","_inherits","_createClass"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/IIIF.js"],"sourcesContent":["/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n\n    let baseUrl = partialOptions.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      'Missing or invalid `size`'\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality =\n      partialOptions.quality ||\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      })\n    );\n\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\n\nexport default IIIF;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
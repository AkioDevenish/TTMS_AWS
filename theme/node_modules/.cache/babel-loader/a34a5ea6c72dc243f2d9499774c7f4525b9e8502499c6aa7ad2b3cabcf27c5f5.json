{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, { transformGeometryWithOptions } from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport { get } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @param {Options} [options] Options.\n * @api\n */\nvar MVT = /*#__PURE__*/function (_FeatureFormat) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function MVT(options) {\n    var _this;\n    _classCallCheck(this, MVT);\n    _this = _callSuper(this, MVT);\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    _this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels'\n    });\n\n    /**\n     * @private\n     * @type {import(\"../Feature.js\").FeatureClass}\n     */\n    _this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    _this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.idProperty_ = options.idProperty;\n    _this.supportedMediaTypes = ['application/vnd.mapbox-vector-tile', 'application/x-protobuf'];\n    return _this;\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  _inherits(MVT, _FeatureFormat);\n  return _createClass(MVT, [{\n    key: \"readRawGeometry_\",\n    value: function readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n      pbf.pos = feature.geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var coordsLen = 0;\n      var currentEnd = 0;\n      while (pbf.pos < end) {\n        if (!length) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n        length--;\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n          if (cmd === 1) {\n            // moveTo\n            if (coordsLen > currentEnd) {\n              ends.push(coordsLen);\n              currentEnd = coordsLen;\n            }\n          }\n          flatCoordinates.push(x, y);\n          coordsLen += 2;\n        } else if (cmd === 7) {\n          if (coordsLen > currentEnd) {\n            // close polygon\n            flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);\n            coordsLen += 2;\n          }\n        } else {\n          throw new Error('Invalid command found in the PBF');\n        }\n      }\n      if (coordsLen > currentEnd) {\n        ends.push(coordsLen);\n        currentEnd = coordsLen;\n      }\n    }\n\n    /**\n     * @private\n     * @param {PBF} pbf PBF\n     * @param {Object} rawFeature Raw Mapbox feature.\n     * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n     * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n     */\n  }, {\n    key: \"createFeature_\",\n    value: function createFeature_(pbf, rawFeature, options) {\n      var type = rawFeature.type;\n      if (type === 0) {\n        return null;\n      }\n      var feature;\n      var values = rawFeature.properties;\n      var id;\n      if (!this.idProperty_) {\n        id = rawFeature.id;\n      } else {\n        id = values[this.idProperty_];\n        delete values[this.idProperty_];\n      }\n      values[this.layerName_] = rawFeature.layer.name;\n      var flatCoordinates = /** @type {Array<number>} */[];\n      var ends = /** @type {Array<number>} */[];\n      this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n      var geometryType = getGeometryType(type, ends.length);\n      if (this.featureClass_ === RenderFeature) {\n        feature = new this.featureClass_(geometryType, flatCoordinates, ends, 2, values, id);\n        feature.transform(options.dataProjection);\n      } else {\n        var geom;\n        if (geometryType == 'Polygon') {\n          var endss = inflateEnds(flatCoordinates, ends);\n          geom = endss.length > 1 ? new MultiPolygon(flatCoordinates, 'XY', endss) : new Polygon(flatCoordinates, 'XY', ends);\n        } else {\n          geom = geometryType === 'Point' ? new Point(flatCoordinates, 'XY') : geometryType === 'LineString' ? new LineString(flatCoordinates, 'XY') : geometryType === 'MultiPoint' ? new MultiPoint(flatCoordinates, 'XY') : geometryType === 'MultiLineString' ? new MultiLineString(flatCoordinates, 'XY', ends) : null;\n        }\n        var ctor = /** @type {typeof import(\"../Feature.js\").default} */\n        this.featureClass_;\n        feature = new ctor();\n        if (this.geometryName_) {\n          feature.setGeometryName(this.geometryName_);\n        }\n        var geometry = transformGeometryWithOptions(geom, false, options);\n        feature.setGeometry(geometry);\n        if (id !== undefined) {\n          feature.setId(id);\n        }\n        feature.setProperties(values, true);\n      }\n      return feature;\n    }\n\n    /**\n     * @return {import(\"./Feature.js\").Type} Format.\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'arraybuffer';\n    }\n\n    /**\n     * Read all features.\n     *\n     * @param {ArrayBuffer} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n     * @api\n     */\n  }, {\n    key: \"readFeatures\",\n    value: function readFeatures(source, options) {\n      var layers = this.layers_;\n      options = this.adaptOptions(options);\n      var dataProjection = get(options.dataProjection);\n      dataProjection.setWorldExtent(options.extent);\n      options.dataProjection = dataProjection;\n      var pbf = new PBF(/** @type {ArrayBuffer} */source);\n      var pbfLayers = pbf.readFields(layersPBFReader, {});\n      var features = [];\n      for (var name in pbfLayers) {\n        if (layers && !layers.includes(name)) {\n          continue;\n        }\n        var pbfLayer = pbfLayers[name];\n        var extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n        dataProjection.setExtent(extent);\n        for (var i = 0, ii = pbfLayer.length; i < ii; ++i) {\n          var rawFeature = readRawFeature(pbf, pbfLayer, i);\n          var feature = this.createFeature_(pbf, rawFeature, options);\n          if (feature !== null) {\n            features.push(feature);\n          }\n        }\n      }\n      return features;\n    }\n\n    /**\n     * Read the projection from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     * @api\n     */\n  }, {\n    key: \"readProjection\",\n    value: function readProjection(source) {\n      return this.dataProjection;\n    }\n\n    /**\n     * Sets the layers that features will be read from.\n     * @param {Array<string>} layers Layers.\n     * @api\n     */\n  }, {\n    key: \"setLayers\",\n    value: function setLayers(layers) {\n      this.layers_ = layers;\n    }\n  }]);\n}(FeatureFormat);\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    var layer = {\n      keys: [],\n      values: [],\n      features: []\n    };\n    var end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    var value = null;\n    var end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    var end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      var key = feature.layer.keys[pbf.readVarint()];\n      var value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  var end = pbf.readVarint() + pbf.pos;\n  var feature = {\n    layer: layer,\n    type: 0,\n    properties: {}\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../render/Feature.js\").Type} */\n  var geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\nexport default MVT;","map":{"version":3,"names":["FeatureFormat","transformGeometryWithOptions","LineString","MultiLineString","MultiPoint","MultiPolygon","PBF","Point","Polygon","Projection","RenderFeature","get","inflateEnds","MVT","_FeatureFormat","options","_this","_classCallCheck","_callSuper","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layerName_","layerName","layers_","layers","idProperty_","idProperty","supportedMediaTypes","_inherits","_createClass","key","value","readRawGeometry_","pbf","feature","flatCoordinates","ends","pos","geometry","end","readVarint","cmd","length","x","y","coordsLen","currentEnd","cmdLen","readSVarint","push","Error","createFeature_","rawFeature","type","values","properties","id","layer","name","geometryType","getGeometryType","transform","geom","endss","ctor","setGeometryName","setGeometry","undefined","setId","setProperties","getType","readFeatures","source","adaptOptions","setWorldExtent","extent","pbfLayers","readFields","layersPBFReader","features","includes","pbfLayer","setExtent","i","ii","readRawFeature","readProjection","setLayers","tag","keys","layerPBFReader","version","readString","readFloat","readDouble","readVarint64","readBoolean","featurePBFReader","numEnds"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/format/MVT.js"],"sourcesContent":["/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport {get} from '../proj.js';\nimport {inflateEnds} from '../geom/flat/orient.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @param {Options} [options] Options.\n * @api\n */\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels',\n    });\n\n    /**\n     * @private\n     * @type {import(\"../Feature.js\").FeatureClass}\n     */\n    this.featureClass_ = options.featureClass\n      ? options.featureClass\n      : RenderFeature;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.idProperty_ = options.idProperty;\n\n    this.supportedMediaTypes = [\n      'application/vnd.mapbox-vector-tile',\n      'application/x-protobuf',\n    ];\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(\n            flatCoordinates[currentEnd],\n            flatCoordinates[currentEnd + 1]\n          );\n          coordsLen += 2;\n        }\n      } else {\n        throw new Error('Invalid command found in the PBF');\n      }\n    }\n\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n   */\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n    if (type === 0) {\n      return null;\n    }\n\n    let feature;\n    const values = rawFeature.properties;\n\n    let id;\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n\n    values[this.layerName_] = rawFeature.layer.name;\n\n    const flatCoordinates = /** @type {Array<number>} */ ([]);\n    const ends = /** @type {Array<number>} */ ([]);\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n\n    const geometryType = getGeometryType(type, ends.length);\n\n    if (this.featureClass_ === RenderFeature) {\n      feature = new this.featureClass_(\n        geometryType,\n        flatCoordinates,\n        ends,\n        2,\n        values,\n        id\n      );\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom =\n          endss.length > 1\n            ? new MultiPolygon(flatCoordinates, 'XY', endss)\n            : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom =\n          geometryType === 'Point'\n            ? new Point(flatCoordinates, 'XY')\n            : geometryType === 'LineString'\n            ? new LineString(flatCoordinates, 'XY')\n            : geometryType === 'MultiPoint'\n            ? new MultiPoint(flatCoordinates, 'XY')\n            : geometryType === 'MultiLineString'\n            ? new MultiLineString(flatCoordinates, 'XY', ends)\n            : null;\n      }\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */ (\n        this.featureClass_\n      );\n      feature = new ctor();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n      feature.setProperties(values, true);\n    }\n\n    return feature;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'arraybuffer';\n  }\n\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n\n    const pbf = new PBF(/** @type {ArrayBuffer} */ (source));\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n      const pbfLayer = pbfLayers[name];\n\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n\n    return features;\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n}\n\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: [],\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value =\n        tag === 1\n          ? pbf.readString()\n          : tag === 2\n          ? pbf.readFloat()\n          : tag === 3\n          ? pbf.readDouble()\n          : tag === 4\n          ? pbf.readVarint64()\n          : tag === 5\n          ? pbf.readVarint()\n          : tag === 6\n          ? pbf.readSVarint()\n          : tag === 7\n          ? pbf.readBoolean()\n          : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {},\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../render/Feature.js\").Type} */\n  let geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\n\nexport default MVT;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
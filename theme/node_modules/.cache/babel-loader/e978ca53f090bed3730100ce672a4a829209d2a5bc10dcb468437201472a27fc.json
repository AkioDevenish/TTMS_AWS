{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport RenderFeature from '../render/Feature.js';\nimport { createGeometry, createRenderFeature, transformGeometryWithOptions } from './Feature.js';\nimport { deflateCoordinatesArray, deflateMultiCoordinatesArray } from '../geom/flat/deflate.js';\nimport { getLayoutForStride } from '../geom/SimpleGeometry.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Feature class\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\n * the primary concern, and features are not going to be modified or round-tripped through the format,\n * consider using {@link module:ol/render/Feature~RenderFeature}\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /*#__PURE__*/function (_JSONFeature) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function GeoJSON(options) {\n    var _this;\n    _classCallCheck(this, GeoJSON);\n    options = options ? options : {};\n    _this = _callSuper(this, GeoJSON);\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      _this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    if (options.featureClass) {\n      _this.featureClass = options.featureClass;\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    _this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    _this.extractGeometryName_ = options.extractGeometryName;\n    _this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n    return _this;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Feature|RenderFeature|Array<RenderFeature>}.default} Feature.\n   */\n  _inherits(GeoJSON, _JSONFeature);\n  return _createClass(GeoJSON, [{\n    key: \"readFeatureFromObject\",\n    value: function readFeatureFromObject(object, options) {\n      /**\n       * @type {GeoJSONFeature}\n       */\n      var geoJSONFeature = null;\n      if (object['type'] === 'Feature') {\n        geoJSONFeature = /** @type {GeoJSONFeature} */object;\n      } else {\n        geoJSONFeature = {\n          'type': 'Feature',\n          'geometry': (/** @type {GeoJSONGeometry} */object),\n          'properties': null\n        };\n      }\n      var geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\n      if (this.featureClass === RenderFeature) {\n        return createRenderFeature({\n          geometry: geometry,\n          id: geoJSONFeature['id'],\n          properties: geoJSONFeature['properties']\n        }, options);\n      }\n      var feature = new Feature();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n        feature.setGeometryName(geoJSONFeature['geometry_name']);\n      }\n      feature.setGeometry(createGeometry(geometry, options));\n      if ('id' in geoJSONFeature) {\n        feature.setId(geoJSONFeature['id']);\n      }\n      if (geoJSONFeature['properties']) {\n        feature.setProperties(geoJSONFeature['properties'], true);\n      }\n      return feature;\n    }\n\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {Array<Feature|RenderFeature>} Features.\n     */\n  }, {\n    key: \"readFeaturesFromObject\",\n    value: function readFeaturesFromObject(object, options) {\n      var geoJSONObject = /** @type {GeoJSONObject} */object;\n      /** @type {Array<Feature|RenderFeature|Array<RenderFeature>>} */\n      var features = null;\n      if (geoJSONObject['type'] === 'FeatureCollection') {\n        var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n        object;\n        features = [];\n        var geoJSONFeatures = geoJSONFeatureCollection['features'];\n        for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n          var featureObject = this.readFeatureFromObject(geoJSONFeatures[i], options);\n          if (!featureObject) {\n            continue;\n          }\n          features.push(featureObject);\n        }\n      } else {\n        features = [this.readFeatureFromObject(object, options)];\n      }\n      return features.flat();\n    }\n\n    /**\n     * @param {GeoJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n  }, {\n    key: \"readGeometryFromObject\",\n    value: function readGeometryFromObject(object, options) {\n      return readGeometry(object, options);\n    }\n\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n  }, {\n    key: \"readProjectionFromObject\",\n    value: function readProjectionFromObject(object) {\n      var crs = object['crs'];\n      var projection;\n      if (crs) {\n        if (crs['type'] == 'name') {\n          projection = getProjection(crs['properties']['name']);\n        } else if (crs['type'] === 'EPSG') {\n          projection = getProjection('EPSG:' + crs['properties']['code']);\n        } else {\n          throw new Error('Unknown SRS type');\n        }\n      } else {\n        projection = this.dataProjection;\n      }\n      return /** @type {import(\"../proj/Projection.js\").default} */projection;\n    }\n\n    /**\n     * Encode a feature as a GeoJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {GeoJSONFeature} Object.\n     * @api\n     */\n  }, {\n    key: \"writeFeatureObject\",\n    value: function writeFeatureObject(feature, options) {\n      options = this.adaptOptions(options);\n\n      /** @type {GeoJSONFeature} */\n      var object = {\n        'type': 'Feature',\n        geometry: null,\n        properties: null\n      };\n      var id = feature.getId();\n      if (id !== undefined) {\n        object.id = id;\n      }\n      if (!feature.hasProperties()) {\n        return object;\n      }\n      var properties = feature.getProperties();\n      var geometry = feature.getGeometry();\n      if (geometry) {\n        object.geometry = writeGeometry(geometry, options);\n        delete properties[feature.getGeometryName()];\n      }\n      if (!isEmpty(properties)) {\n        object.properties = properties;\n      }\n      return object;\n    }\n\n    /**\n     * Encode an array of features as a GeoJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {GeoJSONFeatureCollection} GeoJSON Object.\n     * @api\n     */\n  }, {\n    key: \"writeFeaturesObject\",\n    value: function writeFeaturesObject(features, options) {\n      options = this.adaptOptions(options);\n      var objects = [];\n      for (var i = 0, ii = features.length; i < ii; ++i) {\n        objects.push(this.writeFeatureObject(features[i], options));\n      }\n      return {\n        type: 'FeatureCollection',\n        features: objects\n      };\n    }\n\n    /**\n     * Encode a geometry as a GeoJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n     * @api\n     */\n  }, {\n    key: \"writeGeometryObject\",\n    value: function writeGeometryObject(geometry, options) {\n      return writeGeometry(geometry, this.adaptOptions(options));\n    }\n  }]);\n}(JSONFeature);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\n */\nfunction readGeometryInternal(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /** @type {import(\"./Feature.js\").GeometryObject} */\n  var geometry;\n  switch (object['type']) {\n    case 'Point':\n      {\n        geometry = readPointGeometry(/** @type {GeoJSONPoint} */object);\n        break;\n      }\n    case 'LineString':\n      {\n        geometry = readLineStringGeometry(/** @type {GeoJSONLineString} */object);\n        break;\n      }\n    case 'Polygon':\n      {\n        geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */object);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */object);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */object);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */object);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */object);\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object['type']);\n      }\n  }\n  return geometry;\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  var geometryObject = readGeometryInternal(object, options);\n  return createGeometry(geometryObject, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometryInternal(geometry, options);\n  });\n  return geometries;\n}\n\n/**\n * @param {GeoJSONPoint} object Input object.\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\n */\nfunction readPointGeometry(object) {\n  var flatCoordinates = object['coordinates'];\n  return {\n    type: 'Point',\n    flatCoordinates: flatCoordinates,\n    layout: getLayoutForStride(flatCoordinates.length)\n  };\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\n */\nfunction readLineStringGeometry(object) {\n  var coordinates = object['coordinates'];\n  var flatCoordinates = coordinates.flat();\n  return {\n    type: 'LineString',\n    flatCoordinates: flatCoordinates,\n    ends: [flatCoordinates.length],\n    layout: getLayoutForStride(coordinates[0].length)\n  };\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\n */\nfunction readMultiLineStringGeometry(object) {\n  var coordinates = object['coordinates'];\n  var stride = coordinates[0][0].length;\n  var flatCoordinates = [];\n  var ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiLineString',\n    flatCoordinates: flatCoordinates,\n    ends: ends,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\n */\nfunction readMultiPointGeometry(object) {\n  var coordinates = object['coordinates'];\n  return {\n    type: 'MultiPoint',\n    flatCoordinates: coordinates.flat(),\n    layout: getLayoutForStride(coordinates[0].length)\n  };\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\n */\nfunction readMultiPolygonGeometry(object) {\n  var coordinates = object['coordinates'];\n  var flatCoordinates = [];\n  var stride = coordinates[0][0][0].length;\n  var endss = deflateMultiCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiPolygon',\n    flatCoordinates: flatCoordinates,\n    ends: endss,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  var coordinates = object['coordinates'];\n  var flatCoordinates = [];\n  var stride = coordinates[0][0].length;\n  var ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'Polygon',\n    flatCoordinates: flatCoordinates,\n    ends: ends,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  var type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  var geoJSON;\n  switch (type) {\n    case 'Point':\n      {\n        geoJSON = writePointGeometry(/** @type {import(\"../geom/Point.js\").default} */geometry, options);\n        break;\n      }\n    case 'LineString':\n      {\n        geoJSON = writeLineStringGeometry(/** @type {import(\"../geom/LineString.js\").default} */geometry, options);\n        break;\n      }\n    case 'Polygon':\n      {\n        geoJSON = writePolygonGeometry(/** @type {import(\"../geom/Polygon.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geoJSON = writeMultiPointGeometry(/** @type {import(\"../geom/MultiPoint.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geoJSON = writeMultiLineStringGeometry(/** @type {import(\"../geom/MultiLineString.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geoJSON = writeMultiPolygonGeometry(/** @type {import(\"../geom/MultiPolygon.js\").default} */geometry, options);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geoJSON = writeGeometryCollectionGeometry(/** @type {import(\"../geom/GeometryCollection.js\").default} */\n        geometry, options);\n        break;\n      }\n    case 'Circle':\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  var right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  var right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\nexport default GeoJSON;","map":{"version":3,"names":["Feature","JSONFeature","RenderFeature","createGeometry","createRenderFeature","transformGeometryWithOptions","deflateCoordinatesArray","deflateMultiCoordinatesArray","getLayoutForStride","get","getProjection","isEmpty","GeoJSON","_JSONFeature","options","_this","_classCallCheck","_callSuper","dataProjection","featureProjection","defaultFeatureProjection","featureClass","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","_inherits","_createClass","key","value","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometryInternal","id","properties","feature","setGeometryName","undefined","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","featureObject","push","flat","readGeometryFromObject","readGeometry","readProjectionFromObject","crs","projection","Error","writeFeatureObject","adaptOptions","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","readGeometryCollectionGeometry","geometryObject","geometries","map","flatCoordinates","layout","coordinates","ends","stride","endss","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","Object","assign","getGeometriesArray","getCoordinates","right","rightHanded"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport RenderFeature from '../render/Feature.js';\nimport {\n  createGeometry,\n  createRenderFeature,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport {\n  deflateCoordinatesArray,\n  deflateMultiCoordinatesArray,\n} from '../geom/flat/deflate.js';\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Feature class\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\n * the primary concern, and features are not going to be modified or round-tripped through the format,\n * consider using {@link module:ol/render/Feature~RenderFeature}\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    if (options.featureClass) {\n      this.featureClass = options.featureClass;\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Feature|RenderFeature|Array<RenderFeature>}.default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\n    if (this.featureClass === RenderFeature) {\n      return createRenderFeature(\n        {\n          geometry,\n          id: geoJSONFeature['id'],\n          properties: geoJSONFeature['properties'],\n        },\n        options\n      );\n    }\n\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(createGeometry(geometry, options));\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature|RenderFeature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<Feature|RenderFeature|Array<RenderFeature>>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        const featureObject = this.readFeatureFromObject(\n          geoJSONFeatures[i],\n          options\n        );\n        if (!featureObject) {\n          continue;\n        }\n        features.push(featureObject);\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features.flat();\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\n */\nfunction readGeometryInternal(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /** @type {import(\"./Feature.js\").GeometryObject} */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return geometry;\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  const geometryObject = readGeometryInternal(object, options);\n  return createGeometry(geometryObject, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometryInternal(geometry, options);\n    }\n  );\n  return geometries;\n}\n\n/**\n * @param {GeoJSONPoint} object Input object.\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\n */\nfunction readPointGeometry(object) {\n  const flatCoordinates = object['coordinates'];\n  return {\n    type: 'Point',\n    flatCoordinates,\n    layout: getLayoutForStride(flatCoordinates.length),\n  };\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\n */\nfunction readLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = coordinates.flat();\n  return {\n    type: 'LineString',\n    flatCoordinates,\n    ends: [flatCoordinates.length],\n    layout: getLayoutForStride(coordinates[0].length),\n  };\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\n */\nfunction readMultiLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const stride = coordinates[0][0].length;\n  const flatCoordinates = [];\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiLineString',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\n */\nfunction readMultiPointGeometry(object) {\n  const coordinates = object['coordinates'];\n  return {\n    type: 'MultiPoint',\n    flatCoordinates: coordinates.flat(),\n    layout: getLayoutForStride(coordinates[0].length),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\n */\nfunction readMultiPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0][0][0].length;\n  const endss = deflateMultiCoordinatesArray(\n    flatCoordinates,\n    0,\n    coordinates,\n    stride\n  );\n  return {\n    type: 'MultiPolygon',\n    flatCoordinates,\n    ends: endss,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0][0].length;\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'Polygon',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n          geometry\n        ),\n        options\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.keys.js\";\n/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nvar TileJSON = /*#__PURE__*/function (_TileImage) {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  function TileJSON(options) {\n    var _this;\n    _classCallCheck(this, TileJSON);\n    _this = _callSuper(this, TileJSON, [{\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }]);\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    _this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    _this.tileSize_ = options.tileSize;\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n    return _this;\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  _inherits(TileJSON, _TileImage);\n  return _createClass(TileJSON, [{\n    key: \"onXHRLoad_\",\n    value: function onXHRLoad_(event) {\n      var client = /** @type {XMLHttpRequest} */event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        var response;\n        try {\n          response = /** @type {Config} */JSON.parse(client.responseText);\n        } catch (err) {\n          this.handleTileJSONError();\n          return;\n        }\n        this.handleTileJSONResponse(response);\n      } else {\n        this.handleTileJSONError();\n      }\n    }\n\n    /**\n     * @private\n     * @param {Event} event The error event.\n     */\n  }, {\n    key: \"onXHRError_\",\n    value: function onXHRError_(event) {\n      this.handleTileJSONError();\n    }\n\n    /**\n     * @return {Config} The tilejson object.\n     * @api\n     */\n  }, {\n    key: \"getTileJSON\",\n    value: function getTileJSON() {\n      return this.tileJSON_;\n    }\n\n    /**\n     * @protected\n     * @param {Config} tileJSON Tile JSON.\n     */\n  }, {\n    key: \"handleTileJSONResponse\",\n    value: function handleTileJSONResponse(tileJSON) {\n      var epsg4326Projection = getProjection('EPSG:4326');\n      var sourceProjection = this.getProjection();\n      var extent;\n      if (tileJSON['bounds'] !== undefined) {\n        var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n        extent = applyTransform(tileJSON['bounds'], transform);\n      }\n      var gridExtent = extentFromProjection(sourceProjection);\n      var minZoom = tileJSON['minzoom'] || 0;\n      var maxZoom = tileJSON['maxzoom'] || 22;\n      var tileGrid = createXYZ({\n        extent: gridExtent,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        tileSize: this.tileSize_\n      });\n      this.tileGrid = tileGrid;\n      this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n      if (tileJSON['attribution'] && !this.getAttributions()) {\n        var attributionExtent = extent !== undefined ? extent : gridExtent;\n        this.setAttributions(function (frameState) {\n          if (intersects(attributionExtent, frameState.extent)) {\n            return [tileJSON['attribution']];\n          }\n          return null;\n        });\n      }\n      this.tileJSON_ = tileJSON;\n      this.setState('ready');\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handleTileJSONError\",\n    value: function handleTileJSONError() {\n      this.setState('error');\n    }\n  }]);\n}(TileImage);\nexport default TileJSON;","map":{"version":3,"names":["TileImage","applyTransform","intersects","createFromTemplates","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","TileJSON","_TileImage","options","_this","_classCallCheck","_callSuper","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","wrapX","undefined","transition","zDirection","tileJSON_","tileSize_","tileSize","url","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","Error","_inherits","_createClass","key","value","event","target","status","response","JSON","parse","responseText","err","getTileJSON","epsg4326Projection","sourceProjection","extent","transform","gridExtent","minZoom","maxZoom","tileGrid","tileUrlFunction","getAttributions","attributionExtent","setAttributions","frameState","setState"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/TileJSON.js"],"sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_,\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n}\n\nexport default TileJSON;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
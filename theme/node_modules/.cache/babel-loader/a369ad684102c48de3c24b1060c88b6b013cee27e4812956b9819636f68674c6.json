{"ast":null,"code":"import _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.typed-array.uint8-clamped-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport { getUid } from '../util.js';\nvar hasImageData = true;\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n\n/** @type {CanvasRenderingContext2D} */\nvar context;\n\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n  var imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    }\n    return {\n      data: data,\n      width: width,\n      height: height\n    };\n  }\n  return function (data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    if (imageOps) {\n      var images = new Array(numBuffers);\n      for (var b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n      var _output = operation(images, meta).data;\n      return _output.buffer;\n    }\n    var output = new Uint8ClampedArray(numBytes);\n    var arrays = new Array(numBuffers);\n    var pixels = new Array(numBuffers);\n    for (var _b = 0; _b < numBuffers; ++_b) {\n      arrays[_b] = new Uint8ClampedArray(buffers[_b]);\n      pixels[_b] = [0, 0, 0, 0];\n    }\n    for (var i = 0; i < numBytes; i += 4) {\n      for (var j = 0; j < numBuffers; ++j) {\n        var array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      var pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  var lines = lib.concat(['const __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  const buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  var worker = new Worker(typeof Blob === 'undefined' ? 'data:text/javascript;base64,' + Buffer.from(lines.join('\\n'), 'binary').toString('base64') : URL.createObjectURL(new Blob(lines, {\n    type: 'text/javascript'\n  })));\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  var terminated = false;\n  return {\n    postMessage: function postMessage(data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({\n          data: {\n            buffer: minion(data),\n            meta: data['meta']\n          }\n        });\n      }, 0);\n    },\n    terminate: function terminate() {\n      terminated = true;\n    }\n  };\n}\n\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nexport var Processor = /*#__PURE__*/function (_Disposable) {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  function Processor(config) {\n    var _this;\n    _classCallCheck(this, Processor);\n    _this = _callSuper(this, Processor);\n    _this._imageOps = !!config.imageOps;\n    var threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (_this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    /**\n     * @type {Array<Worker>}\n     */\n    var workers = new Array(threads);\n    if (threads) {\n      for (var i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, _this._onWorkerMessage.bind(_this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(config, _this._onWorkerMessage.bind(_this, 0));\n    }\n    _this._workers = workers;\n\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    _this._queue = [];\n    _this._maxQueueLength = config.queue || Infinity;\n    _this._running = 0;\n\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    _this._dataLookup = {};\n\n    /**\n     * @type {Job}\n     * @private\n     */\n    _this._job = null;\n    return _this;\n  }\n\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  _inherits(Processor, _Disposable);\n  return _createClass(Processor, [{\n    key: \"process\",\n    value: function process(inputs, meta, callback) {\n      this._enqueue({\n        inputs: inputs,\n        meta: meta,\n        callback: callback\n      });\n      this._dispatch();\n    }\n\n    /**\n     * Add a job to the queue.\n     * @param {Job} job The job.\n     */\n  }, {\n    key: \"_enqueue\",\n    value: function _enqueue(job) {\n      this._queue.push(job);\n      while (this._queue.length > this._maxQueueLength) {\n        this._queue.shift().callback(null, null);\n      }\n    }\n\n    /**\n     * Dispatch a job.\n     */\n  }, {\n    key: \"_dispatch\",\n    value: function _dispatch() {\n      if (this._running || this._queue.length === 0) {\n        return;\n      }\n      var job = this._queue.shift();\n      this._job = job;\n      var width = job.inputs[0].width;\n      var height = job.inputs[0].height;\n      var buffers = job.inputs.map(function (input) {\n        return input.data.buffer;\n      });\n      var threads = this._workers.length;\n      this._running = threads;\n      if (threads === 1) {\n        this._workers[0].postMessage({\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height\n        }, buffers);\n        return;\n      }\n      var length = job.inputs[0].data.length;\n      var segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (var i = 0; i < threads; ++i) {\n        var offset = i * segmentLength;\n        var slices = [];\n        for (var j = 0, jj = buffers.length; j < jj; ++j) {\n          slices.push(buffers[j].slice(offset, offset + segmentLength));\n        }\n        this._workers[i].postMessage({\n          buffers: slices,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height\n        }, slices);\n      }\n    }\n\n    /**\n     * Handle messages from the worker.\n     * @param {number} index The worker index.\n     * @param {MessageEvent} event The message event.\n     */\n  }, {\n    key: \"_onWorkerMessage\",\n    value: function _onWorkerMessage(index, event) {\n      if (this.disposed) {\n        return;\n      }\n      this._dataLookup[index] = event.data;\n      --this._running;\n      if (this._running === 0) {\n        this._resolveJob();\n      }\n    }\n\n    /**\n     * Resolve a job.  If there are no more worker threads, the processor callback\n     * will be called.\n     */\n  }, {\n    key: \"_resolveJob\",\n    value: function _resolveJob() {\n      var job = this._job;\n      var threads = this._workers.length;\n      var data, meta;\n      if (threads === 1) {\n        data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n        meta = this._dataLookup[0]['meta'];\n      } else {\n        var length = job.inputs[0].data.length;\n        data = new Uint8ClampedArray(length);\n        meta = new Array(threads);\n        var segmentLength = 4 * Math.ceil(length / 4 / threads);\n        for (var i = 0; i < threads; ++i) {\n          var buffer = this._dataLookup[i]['buffer'];\n          var offset = i * segmentLength;\n          data.set(new Uint8ClampedArray(buffer), offset);\n          meta[i] = this._dataLookup[i]['meta'];\n        }\n      }\n      this._job = null;\n      this._dataLookup = {};\n      job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n      this._dispatch();\n    }\n\n    /**\n     * Terminate all workers associated with the processor.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      for (var i = 0; i < this._workers.length; ++i) {\n        this._workers[i].terminate();\n      }\n      this._workers.length = 0;\n    }\n  }]);\n}(Disposable);\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nexport var RasterSourceEvent = /*#__PURE__*/function (_Event) {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  function RasterSourceEvent(type, frameState, data) {\n    var _this2;\n    _classCallCheck(this, RasterSourceEvent);\n    _this2 = _callSuper(this, RasterSourceEvent, [type]);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    _this2.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    _this2.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    _this2.data = data;\n    return _this2;\n  }\n  _inherits(RasterSourceEvent, _Event);\n  return _createClass(RasterSourceEvent);\n}(Event);\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only\n * be run at the given resolutions.  By default, the resolutions of the first source with resolutions\n * specified will be used, if any. Set to `null` to use any view resolution instead.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nvar RasterSource = /*#__PURE__*/function (_ImageSource) {\n  /**\n   * @param {Options} options Options.\n   */\n  function RasterSource(options) {\n    var _this3;\n    _classCallCheck(this, RasterSource);\n    _this3 = _callSuper(this, RasterSource, [{\n      projection: null\n    }]);\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this3.on;\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this3.once;\n\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    _this3.un;\n\n    /**\n     * @private\n     * @type {Processor}\n     */\n    _this3.processor_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    _this3.operationType_ = options.operationType !== undefined ? options.operationType : 'pixel';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this3.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    _this3.layers_ = createLayers(options.sources);\n    var changed = _this3.changed.bind(_this3);\n    for (var i = 0, ii = _this3.layers_.length; i < ii; ++i) {\n      _this3.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n\n    /** @type {boolean} */\n    _this3.useResolutions_ = options.resolutions !== null;\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    _this3.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, _this3.processSources_.bind(_this3));\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n    _this3.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    _this3.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    _this3.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n    _this3.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this3.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this3.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: (/** @type {import(\"../View.js\").State} */{\n        rotation: 0\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(_this3),\n      renderTargets: {}\n    };\n    _this3.setAttributions(function (frameState) {\n      var attributions = [];\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        if (!source) {\n          continue;\n        }\n        var attributionGetter = source.getAttributions();\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n      return attributions.length !== 0 ? attributions : null;\n    });\n    if (options.operation !== undefined) {\n      _this3.setOperation(options.operation, options.lib);\n    }\n    return _this3;\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  _inherits(RasterSource, _ImageSource);\n  return _createClass(RasterSource, [{\n    key: \"setOperation\",\n    value: function setOperation(operation, lib) {\n      if (this.processor_) {\n        this.processor_.dispose();\n      }\n      this.processor_ = new Processor({\n        operation: operation,\n        imageOps: this.operationType_ === 'image',\n        queue: 1,\n        lib: lib,\n        threads: this.threads_\n      });\n      this.changed();\n    }\n\n    /**\n     * Update the stored frame state.\n     * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n     * @param {number} resolution The view resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n     * @return {import(\"../Map.js\").FrameState} The updated frame state.\n     * @private\n     */\n  }, {\n    key: \"updateFrameState_\",\n    value: function updateFrameState_(extent, resolution, projection) {\n      var frameState = /** @type {import(\"../Map.js\").FrameState} */\n      Object.assign({}, this.frameState_);\n      frameState.viewState = /** @type {import(\"../View.js\").State} */\n      Object.assign({}, frameState.viewState);\n      var center = getCenter(extent);\n      frameState.size[0] = Math.ceil(getWidth(extent) / resolution);\n      frameState.size[1] = Math.ceil(getHeight(extent) / resolution);\n      frameState.extent = [center[0] - frameState.size[0] * resolution / 2, center[1] - frameState.size[1] * resolution / 2, center[0] + frameState.size[0] * resolution / 2, center[1] + frameState.size[1] * resolution / 2];\n      frameState.time = Date.now();\n      var viewState = frameState.viewState;\n      viewState.center = center;\n      viewState.projection = projection;\n      viewState.resolution = resolution;\n      return frameState;\n    }\n\n    /**\n     * Determine if all sources are ready.\n     * @return {boolean} All sources are ready.\n     * @private\n     */\n  }, {\n    key: \"allSourcesReady_\",\n    value: function allSourcesReady_() {\n      var ready = true;\n      var source;\n      for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n        source = this.layers_[i].getSource();\n        if (!source || source.getState() !== 'ready') {\n          ready = false;\n          break;\n        }\n      }\n      return ready;\n    }\n\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../ImageCanvas.js\").default} Single image.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(extent, resolution, pixelRatio, projection) {\n      if (!this.allSourcesReady_()) {\n        return null;\n      }\n      this.tileQueue_.loadMoreTiles(16, 16);\n      resolution = this.findNearestResolution(resolution);\n      var frameState = this.updateFrameState_(extent, resolution, projection);\n      this.requestedFrameState_ = frameState;\n\n      // check if we can't reuse the existing ol/ImageCanvas\n      if (this.renderedImageCanvas_) {\n        var renderedResolution = this.renderedImageCanvas_.getResolution();\n        var renderedExtent = this.renderedImageCanvas_.getExtent();\n        if (resolution !== renderedResolution || !equals(frameState.extent, renderedExtent)) {\n          this.renderedImageCanvas_ = null;\n        }\n      }\n      if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n        this.processSources_();\n      }\n      if (frameState.animate) {\n        requestAnimationFrame(this.changed.bind(this));\n      }\n      return this.renderedImageCanvas_;\n    }\n\n    /**\n     * Start processing source data.\n     * @private\n     */\n  }, {\n    key: \"processSources_\",\n    value: function processSources_() {\n      var frameState = this.requestedFrameState_;\n      var len = this.layers_.length;\n      var imageDatas = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        frameState.layerIndex = i;\n        frameState.renderTargets = {};\n        var imageData = getImageData(this.layers_[i], frameState);\n        if (imageData) {\n          imageDatas[i] = imageData;\n        } else {\n          return;\n        }\n      }\n      var data = {};\n      this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n      this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n    }\n\n    /**\n     * Called when pixel processing is complete.\n     * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n     * @param {Error} err Any error during processing.\n     * @param {ImageData} output The output image data.\n     * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n     * @private\n     */\n  }, {\n    key: \"onWorkerComplete_\",\n    value: function onWorkerComplete_(frameState, err, output, data) {\n      if (err || !output) {\n        return;\n      }\n\n      // do nothing if extent or resolution changed\n      var extent = frameState.extent;\n      var resolution = frameState.viewState.resolution;\n      if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n        return;\n      }\n      var context;\n      if (this.renderedImageCanvas_) {\n        context = this.renderedImageCanvas_.getImage().getContext('2d');\n      } else {\n        var width = Math.round(getWidth(extent) / resolution);\n        var height = Math.round(getHeight(extent) / resolution);\n        context = createCanvasContext2D(width, height);\n        this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n      }\n      context.putImageData(output, 0, 0);\n      if (frameState.animate) {\n        requestAnimationFrame(this.changed.bind(this));\n      } else {\n        this.changed();\n      }\n      this.renderedRevision_ = this.getRevision();\n      this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n    }\n\n    /**\n     * @param {import(\"../proj/Projection\").default} [projection] Projection.\n     * @return {Array<number>|null} Resolutions.\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions(projection) {\n      if (!this.useResolutions_) {\n        return null;\n      }\n      var resolutions = _superPropGet(RasterSource, \"getResolutions\", this, 3)([]);\n      if (!resolutions) {\n        for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n          var source = this.layers_[i].getSource();\n          resolutions = source.getResolutions(projection);\n          if (resolutions) {\n            break;\n          }\n        }\n      }\n      return resolutions;\n    }\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.processor_) {\n        this.processor_.dispose();\n      }\n      _superPropGet(RasterSource, \"disposeInternal\", this, 3)([]);\n    }\n  }]);\n}(ImageSource);\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nvar sharedContext = null;\n\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      var _context = element.getContext('2d');\n      return _context.getImageData(0, 0, width, height);\n    }\n  }\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height, undefined, {\n      willReadFrequently: true\n    });\n  } else {\n    var canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height, undefined, {\n        willReadFrequently: true\n      });\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\nexport default RasterSource;","map":{"version":3,"names":["Disposable","Event","EventType","ImageCanvas","ImageLayer","ImageSource","Source","TileLayer","TileQueue","TileSource","createCanvasContext2D","create","createTransform","equals","getCenter","getHeight","getWidth","getUid","hasImageData","ImageData","_","context","newImageData","data","width","height","document","createElement","getContext","imageData","createImageData","set","createMinion","operation","workerHasImageData","newWorkerImageData","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","images","Array","b","Uint8ClampedArray","output","buffer","arrays","pixels","i","j","array","pixel","createWorker","config","onMessage","lib","Object","keys","map","name","toString","lines","concat","worker","Worker","Blob","Buffer","from","join","URL","createObjectURL","type","addEventListener","createFauxWorker","minion","terminated","postMessage","setTimeout","terminate","Processor","_Disposable","_this","_classCallCheck","_callSuper","_imageOps","threads","workers","_onWorkerMessage","bind","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","_inherits","_createClass","key","value","process","inputs","callback","_enqueue","_dispatch","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","disposed","_resolveJob","disposeInternal","RasterEventType","BEFOREOPERATIONS","AFTEROPERATIONS","RasterSourceEvent","_Event","frameState","_this2","extent","resolution","viewState","pixelRatio","RasterSource","_ImageSource","options","_this3","projection","on","once","un","processor_","operationType_","operationType","undefined","threads_","layers_","createLayers","sources","changed","ii","CHANGE","useResolutions_","resolutions","tileQueue_","processSources_","requestedFrameState_","renderedImageCanvas_","renderedRevision_","frameState_","animate","coordinateToPixelTransform","declutterTree","layerIndex","layerStatesArray","getLayerStatesArray","pixelToCoordinateTransform","postRenderFunctions","size","tileQueue","time","Date","now","usedTiles","rotation","viewHints","wantedTiles","mapId","renderTargets","setAttributions","attributions","iMax","sourceOrLayer","source","getSource","attributionGetter","getAttributions","sourceAttribution","apply","setOperation","dispose","updateFrameState_","assign","center","allSourcesReady_","ready","getState","getImage","loadMoreTiles","findNearestResolution","renderedResolution","getResolution","renderedExtent","getExtent","getRevision","requestAnimationFrame","len","imageDatas","getImageData","dispatchEvent","onWorkerComplete_","err","round","canvas","putImageData","getResolutions","_superPropGet","prototype","sharedContext","layer","renderer","getRenderer","Error","prepareFrame","container","renderFrame","element","HTMLCanvasElement","firstElementChild","willReadFrequently","clearRect","drawImage","layers","getLayerState","createLayer","layerOrSource"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/Raster.js"],"sourcesContent":["/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {create as createTransform} from '../transform.js';\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\nimport {getUid} from '../util.js';\n\nlet hasImageData = true;\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n\n/** @type {CanvasRenderingContext2D} */\nlet context;\n\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  let workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    }\n    return {data: data, width: width, height: height};\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    const buffers = data['buffers'];\n    const meta = data['meta'];\n    const imageOps = data['imageOps'];\n    const width = data['width'];\n    const height = data['height'];\n\n    const numBuffers = buffers.length;\n    const numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      const images = new Array(numBuffers);\n      for (let b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(\n          new Uint8ClampedArray(buffers[b]),\n          width,\n          height\n        );\n      }\n      const output = operation(images, meta).data;\n      return output.buffer;\n    }\n\n    const output = new Uint8ClampedArray(numBytes);\n    const arrays = new Array(numBuffers);\n    const pixels = new Array(numBuffers);\n    for (let b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n    for (let i = 0; i < numBytes; i += 4) {\n      for (let j = 0; j < numBuffers; ++j) {\n        const array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      const pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  const lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  const lines = lib.concat([\n    'const __minion__ = (' + createMinion.toString() + ')(',\n    config.operation.toString(),\n    ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  const buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});',\n  ]);\n\n  const worker = new Worker(\n    typeof Blob === 'undefined'\n      ? 'data:text/javascript;base64,' +\n        Buffer.from(lines.join('\\n'), 'binary').toString('base64')\n      : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'}))\n  );\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  const minion = createMinion(config.operation);\n  let terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({data: {buffer: minion(data), meta: data['meta']}});\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    },\n  };\n}\n\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nexport class Processor extends Disposable {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  constructor(config) {\n    super();\n\n    this._imageOps = !!config.imageOps;\n    let threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    /**\n     * @type {Array<Worker>}\n     */\n    const workers = new Array(threads);\n    if (threads) {\n      for (let i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(\n        config,\n        this._onWorkerMessage.bind(this, 0)\n      );\n    }\n    this._workers = workers;\n\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    this._queue = [];\n\n    this._maxQueueLength = config.queue || Infinity;\n    this._running = 0;\n\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    this._dataLookup = {};\n\n    /**\n     * @type {Job}\n     * @private\n     */\n    this._job = null;\n  }\n\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  process(inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback,\n    });\n    this._dispatch();\n  }\n\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n  _enqueue(job) {\n    this._queue.push(job);\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  }\n\n  /**\n   * Dispatch a job.\n   */\n  _dispatch() {\n    if (this._running || this._queue.length === 0) {\n      return;\n    }\n\n    const job = this._queue.shift();\n    this._job = job;\n    const width = job.inputs[0].width;\n    const height = job.inputs[0].height;\n    const buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    const threads = this._workers.length;\n    this._running = threads;\n    if (threads === 1) {\n      this._workers[0].postMessage(\n        {\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height,\n        },\n        buffers\n      );\n      return;\n    }\n\n    const length = job.inputs[0].data.length;\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (let i = 0; i < threads; ++i) {\n      const offset = i * segmentLength;\n      const slices = [];\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n      this._workers[i].postMessage(\n        {\n          buffers: slices,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height,\n        },\n        slices\n      );\n    }\n  }\n\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n  _onWorkerMessage(index, event) {\n    if (this.disposed) {\n      return;\n    }\n    this._dataLookup[index] = event.data;\n    --this._running;\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  }\n\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n  _resolveJob() {\n    const job = this._job;\n    const threads = this._workers.length;\n    let data, meta;\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      const length = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length);\n      meta = new Array(threads);\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (let i = 0; i < threads; ++i) {\n        const buffer = this._dataLookup[i]['buffer'];\n        const offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(\n      null,\n      newImageData(data, job.inputs[0].width, job.inputs[0].height),\n      meta\n    );\n    this._dispatch();\n  }\n\n  /**\n   * Terminate all workers associated with the processor.\n   */\n  disposeInternal() {\n    for (let i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n    this._workers.length = 0;\n  }\n}\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations',\n};\n\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nexport class RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    this.data = data;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only\n * be run at the given resolutions.  By default, the resolutions of the first source with resolutions\n * specified will be used, if any. Set to `null` to use any view resolution instead.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null,\n    });\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Processor}\n     */\n    this.processor_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    this.operationType_ =\n      options.operationType !== undefined ? options.operationType : 'pixel';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    this.layers_ = createLayers(options.sources);\n\n    const changed = this.changed.bind(this);\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n\n    /** @type {boolean} */\n    this.useResolutions_ = options.resolutions !== null;\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, this.processSources_.bind(this));\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n    this.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    this.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    this.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */ ({\n        rotation: 0,\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(this),\n      renderTargets: {},\n    };\n\n    this.setAttributions(function (frameState) {\n      const attributions = [];\n      for (\n        let index = 0, iMax = options.sources.length;\n        index < iMax;\n        ++index\n      ) {\n        const sourceOrLayer = options.sources[index];\n        const source =\n          sourceOrLayer instanceof Source\n            ? sourceOrLayer\n            : sourceOrLayer.getSource();\n        if (!source) {\n          continue;\n        }\n        const attributionGetter = source.getAttributions();\n        if (typeof attributionGetter === 'function') {\n          const sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  setOperation(operation, lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === 'image',\n      queue: 1,\n      lib: lib,\n      threads: this.threads_,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\n   * @private\n   */\n  updateFrameState_(extent, resolution, projection) {\n    const frameState = /** @type {import(\"../Map.js\").FrameState} */ (\n      Object.assign({}, this.frameState_)\n    );\n\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (\n      Object.assign({}, frameState.viewState)\n    );\n\n    const center = getCenter(extent);\n\n    frameState.size[0] = Math.ceil(getWidth(extent) / resolution);\n    frameState.size[1] = Math.ceil(getHeight(extent) / resolution);\n    frameState.extent = [\n      center[0] - (frameState.size[0] * resolution) / 2,\n      center[1] - (frameState.size[1] * resolution) / 2,\n      center[0] + (frameState.size[0] * resolution) / 2,\n      center[1] + (frameState.size[1] * resolution) / 2,\n    ];\n    frameState.time = Date.now();\n\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (!source || source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    this.tileQueue_.loadMoreTiles(16, 16);\n\n    resolution = this.findNearestResolution(resolution);\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (\n        resolution !== renderedResolution ||\n        !equals(frameState.extent, renderedExtent)\n      ) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (\n      !this.renderedImageCanvas_ ||\n      this.getRevision() !== this.renderedRevision_\n    ) {\n      this.processSources_();\n    }\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n\n  /**\n   * Start processing source data.\n   * @private\n   */\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.layers_.length;\n    const imageDatas = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      frameState.renderTargets = {};\n      const imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data)\n    );\n    this.processor_.process(\n      imageDatas,\n      data,\n      this.onWorkerComplete_.bind(this, frameState)\n    );\n  }\n\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n\n    // do nothing if extent or resolution changed\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    if (\n      resolution !== this.requestedFrameState_.viewState.resolution ||\n      !equals(extent, this.requestedFrameState_.extent)\n    ) {\n      return;\n    }\n\n    let context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(\n        extent,\n        resolution,\n        1,\n        context.canvas\n      );\n    }\n    context.putImageData(output, 0, 0);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    } else {\n      this.changed();\n    }\n    this.renderedRevision_ = this.getRevision();\n\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data)\n    );\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    if (!this.useResolutions_) {\n      return null;\n    }\n    let resolutions = super.getResolutions();\n    if (!resolutions) {\n      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n        const source = this.layers_[i].getSource();\n        resolutions = source.getResolutions(projection);\n        if (resolutions) {\n          break;\n        }\n      }\n    }\n    return resolutions;\n  }\n\n  disposeInternal() {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    super.disposeInternal();\n  }\n}\n\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nlet sharedContext = null;\n\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  const renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  const container = renderer.renderFrame(frameState, null);\n  let element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      const context = element.getContext('2d');\n      return context.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height, undefined, {\n      willReadFrequently: true,\n    });\n  } else {\n    const canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height, undefined, {\n        willReadFrequently: true,\n      });\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  const len = sources.length;\n  const layers = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  let layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({source: layerOrSource});\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({source: layerOrSource});\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\n\nexport default RasterSource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
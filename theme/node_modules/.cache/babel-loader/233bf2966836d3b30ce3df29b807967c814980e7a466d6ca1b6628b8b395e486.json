{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /*#__PURE__*/function (_BaseObject) {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  function Overlay(options) {\n    var _this;\n    _classCallCheck(this, Overlay);\n    _this = _callSuper(this, Overlay);\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    _this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    _this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    _this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.mapPostrenderListenerKey = null;\n    _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n    _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n    _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n    _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n    _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    _this.setPositioning(options.positioning || 'top-left');\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n    return _this;\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  _inherits(Overlay, _BaseObject);\n  return _createClass(Overlay, [{\n    key: \"getElement\",\n    value: function getElement() {\n      return /** @type {HTMLElement|undefined} */this.get(Property.ELEMENT);\n    }\n\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id;\n    }\n\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./Map.js\").default|null} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return /** @type {import(\"./Map.js\").default|null} */this.get(Property.MAP) || null;\n    }\n\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getOffset\",\n    value: function getOffset() {\n      return /** @type {Array<number>} */this.get(Property.OFFSET);\n    }\n\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n    }\n\n    /**\n     * Get the current positioning of this overlay.\n     * @return {Positioning} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getPositioning\",\n    value: function getPositioning() {\n      return /** @type {Positioning} */this.get(Property.POSITIONING);\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handleElementChanged\",\n    value: function handleElementChanged() {\n      removeChildren(this.element);\n      var element = this.getElement();\n      if (element) {\n        this.element.appendChild(element);\n      }\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handleMapChanged\",\n    value: function handleMapChanged() {\n      if (this.mapPostrenderListenerKey) {\n        removeNode(this.element);\n        unlistenByKey(this.mapPostrenderListenerKey);\n        this.mapPostrenderListenerKey = null;\n      }\n      var map = this.getMap();\n      if (map) {\n        this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n        this.updatePixelPosition();\n        var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n        if (this.insertFirst) {\n          container.insertBefore(this.element, container.childNodes[0] || null);\n        } else {\n          container.appendChild(this.element);\n        }\n        this.performAutoPan();\n      }\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.updatePixelPosition();\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handleOffsetChanged\",\n    value: function handleOffsetChanged() {\n      this.updatePixelPosition();\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handlePositionChanged\",\n    value: function handlePositionChanged() {\n      this.updatePixelPosition();\n      this.performAutoPan();\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handlePositioningChanged\",\n    value: function handlePositioningChanged() {\n      this.updatePixelPosition();\n    }\n\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setElement\",\n    value: function setElement(element) {\n      this.set(Property.ELEMENT, element);\n    }\n\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./Map.js\").default|null} map The map that the\n     * overlay is part of. Pass `null` to just remove the overlay from the current map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      this.set(Property.MAP, map);\n    }\n\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.set(Property.OFFSET, offset);\n    }\n\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      this.set(Property.POSITION, position);\n    }\n\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n  }, {\n    key: \"performAutoPan\",\n    value: function performAutoPan() {\n      if (this.autoPan) {\n        this.panIntoView(this.autoPan);\n      }\n    }\n\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n     * @api\n     */\n  }, {\n    key: \"panIntoView\",\n    value: function panIntoView(panIntoViewOptions) {\n      var map = this.getMap();\n      if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n        return;\n      }\n      var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n      var element = this.getElement();\n      var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n      panIntoViewOptions = panIntoViewOptions || {};\n      var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n      if (!containsExtent(mapRect, overlayRect)) {\n        // the overlay is not completely inside the viewport, so pan the map\n        var offsetLeft = overlayRect[0] - mapRect[0];\n        var offsetRight = mapRect[2] - overlayRect[2];\n        var offsetTop = overlayRect[1] - mapRect[1];\n        var offsetBottom = mapRect[3] - overlayRect[3];\n        var delta = [0, 0];\n        if (offsetLeft < 0) {\n          // move map to the left\n          delta[0] = offsetLeft - myMargin;\n        } else if (offsetRight < 0) {\n          // move map to the right\n          delta[0] = Math.abs(offsetRight) + myMargin;\n        }\n        if (offsetTop < 0) {\n          // move map up\n          delta[1] = offsetTop - myMargin;\n        } else if (offsetBottom < 0) {\n          // move map down\n          delta[1] = Math.abs(offsetBottom) + myMargin;\n        }\n        if (delta[0] !== 0 || delta[1] !== 0) {\n          var center = /** @type {import(\"./coordinate.js\").Coordinate} */\n          map.getView().getCenterInternal();\n          var centerPx = map.getPixelFromCoordinateInternal(center);\n          if (!centerPx) {\n            return;\n          }\n          var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n          var panOptions = panIntoViewOptions.animation || {};\n          map.getView().animateInternal({\n            center: map.getCoordinateFromPixelInternal(newCenterPx),\n            duration: panOptions.duration,\n            easing: panOptions.easing\n          });\n        }\n      }\n    }\n\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n  }, {\n    key: \"getRect\",\n    value: function getRect(element, size) {\n      var box = element.getBoundingClientRect();\n      var offsetX = box.left + window.pageXOffset;\n      var offsetY = box.top + window.pageYOffset;\n      return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    }\n\n    /**\n     * Set the positioning for this overlay.\n     * @param {Positioning} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setPositioning\",\n    value: function setPositioning(positioning) {\n      this.set(Property.POSITIONING, positioning);\n    }\n\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      if (this.rendered.visible !== visible) {\n        this.element.style.display = visible ? '' : 'none';\n        this.rendered.visible = visible;\n      }\n    }\n\n    /**\n     * Update pixel position.\n     * @protected\n     */\n  }, {\n    key: \"updatePixelPosition\",\n    value: function updatePixelPosition() {\n      var map = this.getMap();\n      var position = this.getPosition();\n      if (!map || !map.isRendered() || !position) {\n        this.setVisible(false);\n        return;\n      }\n      var pixel = map.getPixelFromCoordinate(position);\n      var mapSize = map.getSize();\n      this.updateRenderedPosition(pixel, mapSize);\n    }\n\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n  }, {\n    key: \"updateRenderedPosition\",\n    value: function updateRenderedPosition(pixel, mapSize) {\n      var style = this.element.style;\n      var offset = this.getOffset();\n      var positioning = this.getPositioning();\n      this.setVisible(true);\n      var x = Math.round(pixel[0] + offset[0]) + 'px';\n      var y = Math.round(pixel[1] + offset[1]) + 'px';\n      var posX = '0%';\n      var posY = '0%';\n      if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n        posX = '-100%';\n      } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n        posX = '-50%';\n      }\n      if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n        posY = '-100%';\n      } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n        posY = '-50%';\n      }\n      var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n      if (this.rendered.transform_ != transform) {\n        this.rendered.transform_ = transform;\n        style.transform = transform;\n      }\n    }\n\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this.options;\n    }\n  }]);\n}(BaseObject);\nexport default Overlay;","map":{"version":3,"names":["BaseObject","MapEventType","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","_BaseObject","options","_this","_classCallCheck","_callSuper","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","_inherits","_createClass","key","value","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","myMargin","margin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animation","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","transform","concat","getOptions"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/Overlay.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {containsExtent} from './extent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as _getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /*#__PURE__*/function (_UrlTile) {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  function TileImage(options) {\n    var _this;\n    _classCallCheck(this, TileImage);\n    _this = _callSuper(this, TileImage, [{\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }]);\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    _this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    _this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  _inherits(TileImage, _UrlTile);\n  return _createClass(TileImage, [{\n    key: \"canExpireCache\",\n    value: function canExpireCache() {\n      if (this.tileCache.canExpireCache()) {\n        return true;\n      }\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n  }, {\n    key: \"expireCache\",\n    value: function expireCache(projection, usedTiles) {\n      var usedTileCache = this.getTileCacheForProjection(projection);\n      this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n      for (var id in this.tileCacheForProjection) {\n        var tileCache = this.tileCacheForProjection[id];\n        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n      }\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutterForProjection\",\n    value: function getGutterForProjection(projection) {\n      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n        return 0;\n      }\n      return this.getGutter();\n    }\n\n    /**\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutter\",\n    value: function getGutter() {\n      return 0;\n    }\n\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      var key = _superPropGet(TileImage, \"getKey\", this, 3)([]);\n      if (!this.getInterpolate()) {\n        key += ':disable-interpolation';\n      }\n      return key;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n  }, {\n    key: \"getOpaque\",\n    value: function getOpaque(projection) {\n      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n        return false;\n      }\n      return _superPropGet(TileImage, \"getOpaque\", this, 3)([projection]);\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n  }, {\n    key: \"getTileGridForProjection\",\n    value: function getTileGridForProjection(projection) {\n      var thisProj = this.getProjection();\n      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n        return this.tileGrid;\n      }\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = _getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     */\n  }, {\n    key: \"getTileCacheForProjection\",\n    value: function getTileCacheForProjection(projection) {\n      var thisProj = this.getProjection();\n      if (!thisProj || equivalent(thisProj, projection)) {\n        return this.tileCache;\n      }\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {string} key The key set on the tile.\n     * @return {!ImageTile} Tile.\n     * @private\n     */\n  }, {\n    key: \"createTile_\",\n    value: function createTile_(z, x, y, pixelRatio, projection, key) {\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n      var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n      tile.key = key;\n      tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n      return tile;\n    }\n\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!(ImageTile|ReprojTile)} Tile.\n     */\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y, pixelRatio, projection) {\n      var _this2 = this;\n      var sourceProjection = this.getProjection();\n      if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n      }\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      var key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      }\n      var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      var targetTileGrid = this.getTileGridForProjection(projection);\n      var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n        return _this2.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n      }, this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.tileOptions);\n      newTile.key = key;\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n      return newTile;\n    }\n\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!ImageTile} Tile.\n     * @protected\n     */\n  }, {\n    key: \"getTileInternal\",\n    value: function getTileInternal(z, x, y, pixelRatio, projection) {\n      var tile = null;\n      var tileCoordKey = getKeyZXY(z, x, y);\n      var key = this.getKey();\n      if (!this.tileCache.containsKey(tileCoordKey)) {\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n        this.tileCache.set(tileCoordKey, tile);\n      } else {\n        tile = this.tileCache.get(tileCoordKey);\n        if (tile.key != key) {\n          // The source's params changed. If the tile has an interim tile and if we\n          // can use it then we use it. Otherwise we create a new tile.  In both\n          // cases we attempt to assign an interim tile to the new tile.\n          var interimTile = tile;\n          tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n          //make the new tile the head of the list,\n          if (interimTile.getState() == TileState.IDLE) {\n            //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n            tile.interimTile = interimTile.interimTile;\n          } else {\n            tile.interimTile = interimTile;\n          }\n          tile.refreshInterimChain();\n          this.tileCache.replace(tileCoordKey, tile);\n        }\n      }\n      return tile;\n    }\n\n    /**\n     * Sets whether to render reprojection edges or not (usually for debugging).\n     * @param {boolean} render Render the edges.\n     * @api\n     */\n  }, {\n    key: \"setRenderReprojectionEdges\",\n    value: function setRenderReprojectionEdges(render) {\n      if (this.renderReprojectionEdges_ == render) {\n        return;\n      }\n      this.renderReprojectionEdges_ = render;\n      for (var id in this.tileCacheForProjection) {\n        this.tileCacheForProjection[id].clear();\n      }\n      this.changed();\n    }\n\n    /**\n     * Sets the tile grid to use when reprojecting the tiles to the given\n     * projection instead of the default tile grid for the projection.\n     *\n     * This can be useful when the default tile grid cannot be created\n     * (e.g. projection has no extent defined) or\n     * for optimization reasons (custom tile size, resolutions, ...).\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n     * @api\n     */\n  }, {\n    key: \"setTileGridForProjection\",\n    value: function setTileGridForProjection(projection, tilegrid) {\n      var proj = getProjection(projection);\n      if (proj) {\n        var projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _superPropGet(TileImage, \"clear\", this, 3)([]);\n      for (var id in this.tileCacheForProjection) {\n        this.tileCacheForProjection[id].clear();\n      }\n    }\n  }]);\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;","map":{"version":3,"names":["EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","_UrlTile","options","_this","_classCallCheck","_callSuper","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","interpolate","undefined","key","attributionsCollapsible","zDirection","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","_inherits","_createClass","value","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","_superPropGet","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","_this2","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    }\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    }\n    return super.getOpaque(projection);\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(\n        this.tileCache.highWaterMark\n      );\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    }\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = cache.get(tileCoordKey);\n    }\n    const key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    }\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const newTile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions\n    );\n    newTile.key = key;\n\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      cache.replace(tileCoordKey, newTile);\n    } else {\n      cache.set(tileCoordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
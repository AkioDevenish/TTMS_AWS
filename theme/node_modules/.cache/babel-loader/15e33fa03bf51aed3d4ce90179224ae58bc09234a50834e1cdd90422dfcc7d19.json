{"ast":null,"code":"import _slicedToArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.string.anchor.js\";\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /*#__PURE__*/function (_ImageStyle) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Icon(options) {\n    var _this;\n    _classCallCheck(this, Icon);\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _callSuper(this, Icon, [{\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    }]);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    var image = options.img !== undefined ? options.img : null;\n    var cacheKey = options.src;\n    assert(!(cacheKey !== undefined && image), '`image` and `src` cannot be provided at the same time');\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(cacheKey !== undefined && cacheKey.length > 0, 'A defined and non-empty `src` or `image` must be provided');\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), '`width` or `height` cannot be provided together with `scale`');\n    var imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if (image instanceof HTMLImageElement) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    _this.iconImage_ = getIconImage(image, /** @type {string} */cacheKey, _this.crossOrigin_, imageState, _this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      var width, height;\n      if (options.size) {\n        var _options$size = _slicedToArray(options.size, 2);\n        width = _options$size[0];\n        height = _options$size[1];\n      } else {\n        var _image = _this.getImage(1);\n        if (_image.width && _image.height) {\n          width = _image.width;\n          height = _image.height;\n        } else if (_image instanceof HTMLImageElement) {\n          _this.initialOptions_ = options;\n          var _onload = function onload() {\n            _this.unlistenImageChange(_onload);\n            if (!_this.initialOptions_) {\n              return;\n            }\n            var imageSize = _this.iconImage_.getSize();\n            _this.setScale(calculateScale(imageSize[0], imageSize[1], options.width, options.height));\n          };\n          _this.listenImageChange(_onload);\n          return _possibleConstructorReturn(_this);\n        }\n      }\n      if (width !== undefined) {\n        _this.setScale(calculateScale(width, height, options.width, options.height));\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  _inherits(Icon, _ImageStyle);\n  return _createClass(Icon, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale, width, height;\n      if (this.initialOptions_) {\n        width = this.initialOptions_.width;\n        height = this.initialOptions_.height;\n      } else {\n        scale = this.getScale();\n        scale = Array.isArray(scale) ? scale.slice() : scale;\n      }\n      return new Icon({\n        anchor: this.anchor_.slice(),\n        anchorOrigin: this.anchorOrigin_,\n        anchorXUnits: this.anchorXUnits_,\n        anchorYUnits: this.anchorYUnits_,\n        color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n        crossOrigin: this.crossOrigin_,\n        offset: this.offset_.slice(),\n        offsetOrigin: this.offsetOrigin_,\n        opacity: this.getOpacity(),\n        rotateWithView: this.getRotateWithView(),\n        rotation: this.getRotation(),\n        scale: scale,\n        width: width,\n        height: height,\n        size: this.size_ !== null ? this.size_.slice() : undefined,\n        src: this.getSrc(),\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode()\n      });\n    }\n\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      var anchor = this.normalizedAnchor_;\n      if (!anchor) {\n        anchor = this.anchor_;\n        var size = this.getSize();\n        if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n          if (!size) {\n            return null;\n          }\n          anchor = this.anchor_.slice();\n          if (this.anchorXUnits_ == 'fraction') {\n            anchor[0] *= size[0];\n          }\n          if (this.anchorYUnits_ == 'fraction') {\n            anchor[1] *= size[1];\n          }\n        }\n        if (this.anchorOrigin_ != 'top-left') {\n          if (!size) {\n            return null;\n          }\n          if (anchor === this.anchor_) {\n            anchor = this.anchor_.slice();\n          }\n          if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[0] = -anchor[0] + size[0];\n          }\n          if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[1] = -anchor[1] + size[1];\n          }\n        }\n        this.normalizedAnchor_ = anchor;\n      }\n      var displacement = this.getDisplacement();\n      var scale = this.getScaleArray();\n      // anchor is scaled by renderer but displacement should not be scaled\n      // so divide by scale here\n      return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n    }\n\n    /**\n     * Set the anchor point. The anchor determines the center point for the\n     * symbolizer.\n     *\n     * @param {Array<number>} anchor Anchor.\n     * @api\n     */\n  }, {\n    key: \"setAnchor\",\n    value: function setAnchor(anchor) {\n      this.anchor_ = anchor;\n      this.normalizedAnchor_ = null;\n    }\n\n    /**\n     * Get the icon color.\n     * @return {import(\"../color.js\").Color} Color.\n     * @api\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color_;\n    }\n\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n     * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n     * @api\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      return this.iconImage_.getImage(pixelRatio);\n    }\n\n    /**\n     * Get the pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} The pixel ratio of the image.\n     * @api\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      return this.iconImage_.getPixelRatio(pixelRatio);\n    }\n\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      return this.iconImage_.getSize();\n    }\n\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return this.iconImage_.getImageState();\n    }\n\n    /**\n     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      return this.iconImage_.getHitDetectionImage();\n    }\n\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin() {\n      if (this.origin_) {\n        return this.origin_;\n      }\n      var offset = this.offset_;\n      if (this.offsetOrigin_ != 'top-left') {\n        var size = this.getSize();\n        var iconImageSize = this.iconImage_.getSize();\n        if (!size || !iconImageSize) {\n          return null;\n        }\n        offset = offset.slice();\n        if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n          offset[0] = iconImageSize[0] - size[0] - offset[0];\n        }\n        if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n          offset[1] = iconImageSize[1] - size[1] - offset[1];\n        }\n      }\n      this.origin_ = offset;\n      return this.origin_;\n    }\n\n    /**\n     * Get the image URL.\n     * @return {string|undefined} Image src.\n     * @api\n     */\n  }, {\n    key: \"getSrc\",\n    value: function getSrc() {\n      return this.iconImage_.getSrc();\n    }\n\n    /**\n     * Get the size of the icon (in pixels).\n     * @return {import(\"../size.js\").Size} Image size.\n     * @api\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    }\n\n    /**\n     * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n     * @return {number} Icon width (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      var scale = this.getScaleArray();\n      if (this.size_) {\n        return this.size_[0] * scale[0];\n      }\n      if (this.iconImage_.getImageState() == ImageState.LOADED) {\n        return this.iconImage_.getSize()[0] * scale[0];\n      }\n      return undefined;\n    }\n\n    /**\n     * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n     * @return {number} Icon height (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      var scale = this.getScaleArray();\n      if (this.size_) {\n        return this.size_[1] * scale[1];\n      }\n      if (this.iconImage_.getImageState() == ImageState.LOADED) {\n        return this.iconImage_.getSize()[1] * scale[1];\n      }\n      return undefined;\n    }\n\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      delete this.initialOptions_;\n      _superPropGet(Icon, \"setScale\", this, 3)([scale]);\n    }\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"listenImageChange\",\n    value: function listenImageChange(listener) {\n      this.iconImage_.addEventListener(EventType.CHANGE, listener);\n    }\n\n    /**\n     * Load not yet loaded URI.\n     * When rendering a feature with an icon style, the vector renderer will\n     * automatically call this method. However, you might want to call this\n     * method yourself for preloading or other purposes.\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.iconImage_.load();\n    }\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"unlistenImageChange\",\n    value: function unlistenImageChange(listener) {\n      this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n    }\n  }]);\n}(ImageStyle);\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","calculateScale","width","height","wantedWidth","wantedHeight","undefined","Icon","_ImageStyle","options","_this","_classCallCheck","opacity","rotation","scale","rotateWithView","_callSuper","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","cacheKey","src","length","imageState","IDLE","HTMLImageElement","complete","LOADED","LOADING","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","_options$size","_slicedToArray","getImage","initialOptions_","onload","unlistenImageChange","imageSize","getSize","setScale","listenImageChange","_possibleConstructorReturn","_inherits","_createClass","key","value","clone","getScale","Array","isArray","slice","getOpacity","getRotateWithView","getRotation","getSrc","getDisplacement","getDeclutterMode","getAnchor","getScaleArray","setAnchor","getColor","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","getWidth","getHeight","_superPropGet","listener","addEventListener","CHANGE","load","removeEventListener"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const image = options.img !== undefined ? options.img : null;\n\n    let cacheKey = options.src;\n\n    assert(\n      !(cacheKey !== undefined && image),\n      '`image` and `src` cannot be provided at the same time'\n    );\n\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(\n      cacheKey !== undefined && cacheKey.length > 0,\n      'A defined and non-empty `src` or `image` must be provided'\n    );\n\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      '`width` or `height` cannot be provided together with `scale`'\n    );\n\n    let imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if (image instanceof HTMLImageElement) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (cacheKey),\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n          const onload = () => {\n            this.unlistenImageChange(onload);\n            if (!this.initialOptions_) {\n              return;\n            }\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(\n              calculateScale(\n                imageSize[0],\n                imageSize[1],\n                options.width,\n                options.height\n              )\n            );\n          };\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n      if (width !== undefined) {\n        this.setScale(\n          calculateScale(width, height, options.width, options.height)\n        );\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale, width, height;\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,UAAU,MAAM,YAAY;AACnC,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,GAAG,IAAIC,YAAY,QAAO,gBAAgB;AAClD,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAE;EAChE,IAAID,WAAW,KAAKE,SAAS,IAAID,YAAY,KAAKC,SAAS,EAAE;IAC3D,OAAO,CAACF,WAAW,GAAGF,KAAK,EAAEG,YAAY,GAAGF,MAAM,CAAC;EACrD;EACA,IAAIC,WAAW,KAAKE,SAAS,EAAE;IAC7B,OAAOF,WAAW,GAAGF,KAAK;EAC5B;EACA,IAAIG,YAAY,KAAKC,SAAS,EAAE;IAC9B,OAAOD,YAAY,GAAGF,MAAM;EAC9B;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AAJA,IAKMI,IAAI,0BAAAC,WAAA;EACR;AACF;AACA;EACE,SAAAD,KAAYE,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,IAAA;IACnBE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;AACJ;AACA;IACI,IAAMG,OAAO,GAAGH,OAAO,CAACG,OAAO,KAAKN,SAAS,GAAGG,OAAO,CAACG,OAAO,GAAG,CAAC;;IAEnE;AACJ;AACA;IACI,IAAMC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ,KAAKP,SAAS,GAAGG,OAAO,CAACI,QAAQ,GAAG,CAAC;;IAEtE;AACJ;AACA;IACI,IAAMC,KAAK,GAAGL,OAAO,CAACK,KAAK,KAAKR,SAAS,GAAGG,OAAO,CAACK,KAAK,GAAG,CAAC;;IAE7D;AACJ;AACA;IACI,IAAMC,cAAc,GAClBN,OAAO,CAACM,cAAc,KAAKT,SAAS,GAAGG,OAAO,CAACM,cAAc,GAAG,KAAK;IAEvEL,KAAA,GAAAM,UAAA,OAAAT,IAAA,GAAM;MACJK,OAAO,EAAEA,OAAO;MAChBC,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZG,YAAY,EACVR,OAAO,CAACQ,YAAY,KAAKX,SAAS,GAAGG,OAAO,CAACQ,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACpEF,cAAc,EAAEA,cAAc;MAC9BG,aAAa,EAAET,OAAO,CAACS;IACzB,CAAC;;IAED;AACJ;AACA;AACA;IACIR,KAAA,CAAKS,OAAO,GAAGV,OAAO,CAACW,MAAM,KAAKd,SAAS,GAAGG,OAAO,CAACW,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;;IAEzE;AACJ;AACA;AACA;IACIV,KAAA,CAAKW,iBAAiB,GAAG,IAAI;;IAE7B;AACJ;AACA;AACA;IACIX,KAAA,CAAKY,aAAa,GAChBb,OAAO,CAACc,YAAY,KAAKjB,SAAS,GAAGG,OAAO,CAACc,YAAY,GAAG,UAAU;;IAExE;AACJ;AACA;AACA;IACIb,KAAA,CAAKc,aAAa,GAChBf,OAAO,CAACgB,YAAY,KAAKnB,SAAS,GAAGG,OAAO,CAACgB,YAAY,GAAG,UAAU;;IAExE;AACJ;AACA;AACA;IACIf,KAAA,CAAKgB,aAAa,GAChBjB,OAAO,CAACkB,YAAY,KAAKrB,SAAS,GAAGG,OAAO,CAACkB,YAAY,GAAG,UAAU;;IAExE;AACJ;AACA;AACA;IACIjB,KAAA,CAAKkB,YAAY,GACfnB,OAAO,CAACoB,WAAW,KAAKvB,SAAS,GAAGG,OAAO,CAACoB,WAAW,GAAG,IAAI;IAEhE,IAAMC,KAAK,GAAGrB,OAAO,CAACsB,GAAG,KAAKzB,SAAS,GAAGG,OAAO,CAACsB,GAAG,GAAG,IAAI;IAE5D,IAAIC,QAAQ,GAAGvB,OAAO,CAACwB,GAAG;IAE1BpC,MAAM,CACJ,EAAEmC,QAAQ,KAAK1B,SAAS,IAAIwB,KAAK,CAAC,EAClC,uDACF,CAAC;IAED,IAAI,CAACE,QAAQ,KAAK1B,SAAS,IAAI0B,QAAQ,CAACE,MAAM,KAAK,CAAC,KAAKJ,KAAK,EAAE;MAC9DE,QAAQ,GAAG,+BAAiCF,KAAK,CAAEG,GAAG,IAAIjC,MAAM,CAAC8B,KAAK,CAAC;IACzE;IACAjC,MAAM,CACJmC,QAAQ,KAAK1B,SAAS,IAAI0B,QAAQ,CAACE,MAAM,GAAG,CAAC,EAC7C,2DACF,CAAC;IAEDrC,MAAM,CACJ,EACE,CAACY,OAAO,CAACP,KAAK,KAAKI,SAAS,IAAIG,OAAO,CAACN,MAAM,KAAKG,SAAS,KAC5DG,OAAO,CAACK,KAAK,KAAKR,SAAS,CAC5B,EACD,8DACF,CAAC;IAED,IAAI6B,UAAU;IACd,IAAI1B,OAAO,CAACwB,GAAG,KAAK3B,SAAS,EAAE;MAC7B6B,UAAU,GAAGzC,UAAU,CAAC0C,IAAI;IAC9B,CAAC,MAAM,IAAIN,KAAK,KAAKxB,SAAS,EAAE;MAC9B,IAAIwB,KAAK,YAAYO,gBAAgB,EAAE;QACrC,IAAIP,KAAK,CAACQ,QAAQ,EAAE;UAClBH,UAAU,GAAGL,KAAK,CAACG,GAAG,GAAGvC,UAAU,CAAC6C,MAAM,GAAG7C,UAAU,CAAC0C,IAAI;QAC9D,CAAC,MAAM;UACLD,UAAU,GAAGzC,UAAU,CAAC8C,OAAO;QACjC;MACF,CAAC,MAAM;QACLL,UAAU,GAAGzC,UAAU,CAAC6C,MAAM;MAChC;IACF;;IAEA;AACJ;AACA;AACA;IACI7B,KAAA,CAAK+B,MAAM,GAAGhC,OAAO,CAACiC,KAAK,KAAKpC,SAAS,GAAGV,OAAO,CAACa,OAAO,CAACiC,KAAK,CAAC,GAAG,IAAI;;IAEzE;AACJ;AACA;AACA;IACIhC,KAAA,CAAKiC,UAAU,GAAG5C,YAAY,CAC5B+B,KAAK,EACL,qBAAuBE,QAAQ,EAC/BtB,KAAA,CAAKkB,YAAY,EACjBO,UAAU,EACVzB,KAAA,CAAK+B,MACP,CAAC;;IAED;AACJ;AACA;AACA;IACI/B,KAAA,CAAKkC,OAAO,GAAGnC,OAAO,CAACoC,MAAM,KAAKvC,SAAS,GAAGG,OAAO,CAACoC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACrE;AACJ;AACA;AACA;IACInC,KAAA,CAAKoC,aAAa,GAChBrC,OAAO,CAACsC,YAAY,KAAKzC,SAAS,GAAGG,OAAO,CAACsC,YAAY,GAAG,UAAU;;IAExE;AACJ;AACA;AACA;IACIrC,KAAA,CAAKsC,OAAO,GAAG,IAAI;;IAEnB;AACJ;AACA;AACA;IACItC,KAAA,CAAKuC,KAAK,GAAGxC,OAAO,CAACyC,IAAI,KAAK5C,SAAS,GAAGG,OAAO,CAACyC,IAAI,GAAG,IAAI;;IAE7D;AACJ;AACA;IACI,IAAIzC,OAAO,CAACP,KAAK,KAAKI,SAAS,IAAIG,OAAO,CAACN,MAAM,KAAKG,SAAS,EAAE;MAC/D,IAAIJ,KAAK,EAAEC,MAAM;MACjB,IAAIM,OAAO,CAACyC,IAAI,EAAE;QAAA,IAAAC,aAAA,GAAAC,cAAA,CACE3C,OAAO,CAACyC,IAAI;QAA7BhD,KAAK,GAAAiD,aAAA;QAAEhD,MAAM,GAAAgD,aAAA;MAChB,CAAC,MAAM;QACL,IAAMrB,MAAK,GAAGpB,KAAA,CAAK2C,QAAQ,CAAC,CAAC,CAAC;QAC9B,IAAIvB,MAAK,CAAC5B,KAAK,IAAI4B,MAAK,CAAC3B,MAAM,EAAE;UAC/BD,KAAK,GAAG4B,MAAK,CAAC5B,KAAK;UACnBC,MAAM,GAAG2B,MAAK,CAAC3B,MAAM;QACvB,CAAC,MAAM,IAAI2B,MAAK,YAAYO,gBAAgB,EAAE;UAC5C3B,KAAA,CAAK4C,eAAe,GAAG7C,OAAO;UAC9B,IAAM8C,OAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;YACnB7C,KAAA,CAAK8C,mBAAmB,CAACD,OAAM,CAAC;YAChC,IAAI,CAAC7C,KAAA,CAAK4C,eAAe,EAAE;cACzB;YACF;YACA,IAAMG,SAAS,GAAG/C,KAAA,CAAKiC,UAAU,CAACe,OAAO,CAAC,CAAC;YAC3ChD,KAAA,CAAKiD,QAAQ,CACX1D,cAAc,CACZwD,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZhD,OAAO,CAACP,KAAK,EACbO,OAAO,CAACN,MACV,CACF,CAAC;UACH,CAAC;UACDO,KAAA,CAAKkD,iBAAiB,CAACL,OAAM,CAAC;UAC9B,OAAAM,0BAAA,CAAAnD,KAAA;QACF;MACF;MACA,IAAIR,KAAK,KAAKI,SAAS,EAAE;QACvBI,KAAA,CAAKiD,QAAQ,CACX1D,cAAc,CAACC,KAAK,EAAEC,MAAM,EAAEM,OAAO,CAACP,KAAK,EAAEO,OAAO,CAACN,MAAM,CAC7D,CAAC;MACH;IACF;IAAC,OAAAO,KAAA;EACH;;EAEA;AACF;AACA;AACA;AACA;EAJEoD,SAAA,CAAAvD,IAAA,EAAAC,WAAA;EAAA,OAAAuD,YAAA,CAAAxD,IAAA;IAAAyD,GAAA;IAAAC,KAAA,EAKA,SAAAC,KAAKA,CAAA,EAAG;MACN,IAAIpD,KAAK,EAAEZ,KAAK,EAAEC,MAAM;MACxB,IAAI,IAAI,CAACmD,eAAe,EAAE;QACxBpD,KAAK,GAAG,IAAI,CAACoD,eAAe,CAACpD,KAAK;QAClCC,MAAM,GAAG,IAAI,CAACmD,eAAe,CAACnD,MAAM;MACtC,CAAC,MAAM;QACLW,KAAK,GAAG,IAAI,CAACqD,QAAQ,CAAC,CAAC;QACvBrD,KAAK,GAAGsD,KAAK,CAACC,OAAO,CAACvD,KAAK,CAAC,GAAGA,KAAK,CAACwD,KAAK,CAAC,CAAC,GAAGxD,KAAK;MACtD;MACA,OAAO,IAAIP,IAAI,CAAC;QACda,MAAM,EAAE,IAAI,CAACD,OAAO,CAACmD,KAAK,CAAC,CAAC;QAC5B/C,YAAY,EAAE,IAAI,CAACD,aAAa;QAChCG,YAAY,EAAE,IAAI,CAACD,aAAa;QAChCG,YAAY,EAAE,IAAI,CAACD,aAAa;QAChCgB,KAAK,EACH,IAAI,CAACD,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC6B,KAAK,GAC5B,IAAI,CAAC7B,MAAM,CAAC6B,KAAK,CAAC,CAAC,GACnB,IAAI,CAAC7B,MAAM,IAAInC,SAAS;QAC9BuB,WAAW,EAAE,IAAI,CAACD,YAAY;QAC9BiB,MAAM,EAAE,IAAI,CAACD,OAAO,CAAC0B,KAAK,CAAC,CAAC;QAC5BvB,YAAY,EAAE,IAAI,CAACD,aAAa;QAChClC,OAAO,EAAE,IAAI,CAAC2D,UAAU,CAAC,CAAC;QAC1BxD,cAAc,EAAE,IAAI,CAACyD,iBAAiB,CAAC,CAAC;QACxC3D,QAAQ,EAAE,IAAI,CAAC4D,WAAW,CAAC,CAAC;QAC5B3D,KAAK,EAALA,KAAK;QACLZ,KAAK,EAALA,KAAK;QACLC,MAAM,EAANA,MAAM;QACN+C,IAAI,EAAE,IAAI,CAACD,KAAK,KAAK,IAAI,GAAG,IAAI,CAACA,KAAK,CAACqB,KAAK,CAAC,CAAC,GAAGhE,SAAS;QAC1D2B,GAAG,EAAE,IAAI,CAACyC,MAAM,CAAC,CAAC;QAClBzD,YAAY,EAAE,IAAI,CAAC0D,eAAe,CAAC,CAAC,CAACL,KAAK,CAAC,CAAC;QAC5CpD,aAAa,EAAE,IAAI,CAAC0D,gBAAgB,CAAC;MACvC,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAZ,GAAA;IAAAC,KAAA,EAMA,SAAAY,SAASA,CAAA,EAAG;MACV,IAAIzD,MAAM,GAAG,IAAI,CAACC,iBAAiB;MACnC,IAAI,CAACD,MAAM,EAAE;QACXA,MAAM,GAAG,IAAI,CAACD,OAAO;QACrB,IAAM+B,IAAI,GAAG,IAAI,CAACQ,OAAO,CAAC,CAAC;QAC3B,IACE,IAAI,CAAClC,aAAa,IAAI,UAAU,IAChC,IAAI,CAACE,aAAa,IAAI,UAAU,EAChC;UACA,IAAI,CAACwB,IAAI,EAAE;YACT,OAAO,IAAI;UACb;UACA9B,MAAM,GAAG,IAAI,CAACD,OAAO,CAACmD,KAAK,CAAC,CAAC;UAC7B,IAAI,IAAI,CAAC9C,aAAa,IAAI,UAAU,EAAE;YACpCJ,MAAM,CAAC,CAAC,CAAC,IAAI8B,IAAI,CAAC,CAAC,CAAC;UACtB;UACA,IAAI,IAAI,CAACxB,aAAa,IAAI,UAAU,EAAE;YACpCN,MAAM,CAAC,CAAC,CAAC,IAAI8B,IAAI,CAAC,CAAC,CAAC;UACtB;QACF;QAEA,IAAI,IAAI,CAAC5B,aAAa,IAAI,UAAU,EAAE;UACpC,IAAI,CAAC4B,IAAI,EAAE;YACT,OAAO,IAAI;UACb;UACA,IAAI9B,MAAM,KAAK,IAAI,CAACD,OAAO,EAAE;YAC3BC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACmD,KAAK,CAAC,CAAC;UAC/B;UACA,IACE,IAAI,CAAChD,aAAa,IAAI,WAAW,IACjC,IAAI,CAACA,aAAa,IAAI,cAAc,EACpC;YACAF,MAAM,CAAC,CAAC,CAAC,GAAG,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG8B,IAAI,CAAC,CAAC,CAAC;UAClC;UACA,IACE,IAAI,CAAC5B,aAAa,IAAI,aAAa,IACnC,IAAI,CAACA,aAAa,IAAI,cAAc,EACpC;YACAF,MAAM,CAAC,CAAC,CAAC,GAAG,CAACA,MAAM,CAAC,CAAC,CAAC,GAAG8B,IAAI,CAAC,CAAC,CAAC;UAClC;QACF;QACA,IAAI,CAAC7B,iBAAiB,GAAGD,MAAM;MACjC;MACA,IAAMH,YAAY,GAAG,IAAI,CAAC0D,eAAe,CAAC,CAAC;MAC3C,IAAM7D,KAAK,GAAG,IAAI,CAACgE,aAAa,CAAC,CAAC;MAClC;MACA;MACA,OAAO,CACL1D,MAAM,CAAC,CAAC,CAAC,GAAGH,YAAY,CAAC,CAAC,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,EACtCM,MAAM,CAAC,CAAC,CAAC,GAAGH,YAAY,CAAC,CAAC,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,CACvC;IACH;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAkD,GAAA;IAAAC,KAAA,EAOA,SAAAc,SAASA,CAAC3D,MAAM,EAAE;MAChB,IAAI,CAACD,OAAO,GAAGC,MAAM;MACrB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC/B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA2C,GAAA;IAAAC,KAAA,EAKA,SAAAe,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACvC,MAAM;IACpB;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAuB,GAAA;IAAAC,KAAA,EAOA,SAAAZ,QAAQA,CAAC4B,UAAU,EAAE;MACnB,OAAO,IAAI,CAACtC,UAAU,CAACU,QAAQ,CAAC4B,UAAU,CAAC;IAC7C;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAjB,GAAA;IAAAC,KAAA,EAMA,SAAAiB,aAAaA,CAACD,UAAU,EAAE;MACxB,OAAO,IAAI,CAACtC,UAAU,CAACuC,aAAa,CAACD,UAAU,CAAC;IAClD;;IAEA;AACF;AACA;EAFE;IAAAjB,GAAA;IAAAC,KAAA,EAGA,SAAAkB,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACxC,UAAU,CAACe,OAAO,CAAC,CAAC;IAClC;;IAEA;AACF;AACA;EAFE;IAAAM,GAAA;IAAAC,KAAA,EAGA,SAAAmB,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACzC,UAAU,CAACyC,aAAa,CAAC,CAAC;IACxC;;IAEA;AACF;AACA;EAFE;IAAApB,GAAA;IAAAC,KAAA,EAGA,SAAAoB,oBAAoBA,CAAA,EAAG;MACrB,OAAO,IAAI,CAAC1C,UAAU,CAAC0C,oBAAoB,CAAC,CAAC;IAC/C;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAArB,GAAA;IAAAC,KAAA,EAKA,SAAAqB,SAASA,CAAA,EAAG;MACV,IAAI,IAAI,CAACtC,OAAO,EAAE;QAChB,OAAO,IAAI,CAACA,OAAO;MACrB;MACA,IAAIH,MAAM,GAAG,IAAI,CAACD,OAAO;MAEzB,IAAI,IAAI,CAACE,aAAa,IAAI,UAAU,EAAE;QACpC,IAAMI,IAAI,GAAG,IAAI,CAACQ,OAAO,CAAC,CAAC;QAC3B,IAAM6B,aAAa,GAAG,IAAI,CAAC5C,UAAU,CAACe,OAAO,CAAC,CAAC;QAC/C,IAAI,CAACR,IAAI,IAAI,CAACqC,aAAa,EAAE;UAC3B,OAAO,IAAI;QACb;QACA1C,MAAM,GAAGA,MAAM,CAACyB,KAAK,CAAC,CAAC;QACvB,IACE,IAAI,CAACxB,aAAa,IAAI,WAAW,IACjC,IAAI,CAACA,aAAa,IAAI,cAAc,EACpC;UACAD,MAAM,CAAC,CAAC,CAAC,GAAG0C,aAAa,CAAC,CAAC,CAAC,GAAGrC,IAAI,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC;QACpD;QACA,IACE,IAAI,CAACC,aAAa,IAAI,aAAa,IACnC,IAAI,CAACA,aAAa,IAAI,cAAc,EACpC;UACAD,MAAM,CAAC,CAAC,CAAC,GAAG0C,aAAa,CAAC,CAAC,CAAC,GAAGrC,IAAI,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC;QACpD;MACF;MACA,IAAI,CAACG,OAAO,GAAGH,MAAM;MACrB,OAAO,IAAI,CAACG,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAgB,GAAA;IAAAC,KAAA,EAKA,SAAAS,MAAMA,CAAA,EAAG;MACP,OAAO,IAAI,CAAC/B,UAAU,CAAC+B,MAAM,CAAC,CAAC;IACjC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAV,GAAA;IAAAC,KAAA,EAKA,SAAAP,OAAOA,CAAA,EAAG;MACR,OAAO,CAAC,IAAI,CAACT,KAAK,GAAG,IAAI,CAACN,UAAU,CAACe,OAAO,CAAC,CAAC,GAAG,IAAI,CAACT,KAAK;IAC7D;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAe,GAAA;IAAAC,KAAA,EAKA,SAAAuB,QAAQA,CAAA,EAAG;MACT,IAAM1E,KAAK,GAAG,IAAI,CAACgE,aAAa,CAAC,CAAC;MAClC,IAAI,IAAI,CAAC7B,KAAK,EAAE;QACd,OAAO,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAGnC,KAAK,CAAC,CAAC,CAAC;MACjC;MACA,IAAI,IAAI,CAAC6B,UAAU,CAACyC,aAAa,CAAC,CAAC,IAAI1F,UAAU,CAAC6C,MAAM,EAAE;QACxD,OAAO,IAAI,CAACI,UAAU,CAACe,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC;MAChD;MACA,OAAOR,SAAS;IAClB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA0D,GAAA;IAAAC,KAAA,EAKA,SAAAwB,SAASA,CAAA,EAAG;MACV,IAAM3E,KAAK,GAAG,IAAI,CAACgE,aAAa,CAAC,CAAC;MAClC,IAAI,IAAI,CAAC7B,KAAK,EAAE;QACd,OAAO,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAGnC,KAAK,CAAC,CAAC,CAAC;MACjC;MACA,IAAI,IAAI,CAAC6B,UAAU,CAACyC,aAAa,CAAC,CAAC,IAAI1F,UAAU,CAAC6C,MAAM,EAAE;QACxD,OAAO,IAAI,CAACI,UAAU,CAACe,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC;MAChD;MACA,OAAOR,SAAS;IAClB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA0D,GAAA;IAAAC,KAAA,EAMA,SAAAN,QAAQA,CAAC7C,KAAK,EAAE;MACd,OAAO,IAAI,CAACwC,eAAe;MAC3BoC,aAAA,CAAAnF,IAAA,wBAAeO,KAAK;IACtB;;IAEA;AACF;AACA;EAFE;IAAAkD,GAAA;IAAAC,KAAA,EAGA,SAAAL,iBAAiBA,CAAC+B,QAAQ,EAAE;MAC1B,IAAI,CAAChD,UAAU,CAACiD,gBAAgB,CAACnG,SAAS,CAACoG,MAAM,EAAEF,QAAQ,CAAC;IAC9D;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA3B,GAAA;IAAAC,KAAA,EAOA,SAAA6B,IAAIA,CAAA,EAAG;MACL,IAAI,CAACnD,UAAU,CAACmD,IAAI,CAAC,CAAC;IACxB;;IAEA;AACF;AACA;EAFE;IAAA9B,GAAA;IAAAC,KAAA,EAGA,SAAAT,mBAAmBA,CAACmC,QAAQ,EAAE;MAC5B,IAAI,CAAChD,UAAU,CAACoD,mBAAmB,CAACtG,SAAS,CAACoG,MAAM,EAAEF,QAAQ,CAAC;IACjE;EAAC;AAAA,EAjegBhG,UAAU;AAoe7B,eAAeY,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
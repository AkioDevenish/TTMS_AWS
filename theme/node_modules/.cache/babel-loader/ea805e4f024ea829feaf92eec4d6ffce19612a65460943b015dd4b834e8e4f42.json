{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.function.bind.js\";\n/**\n * @module ol/source/OGCVectorTile\n */\n\nimport VectorTileSource from './VectorTile.js';\nimport { getTileSetInfo } from './ogcTileUtil.js';\nimport { error as logError } from '../console.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Vector Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {import(\"../format/Feature.js\").default} format Feature parser for tiles.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"application/vnd.mapbox-vector-tile\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a vector type supported by the configured format.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"vector\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes.\n *\n * Vector tile sets may come in a variety of formats (e.g. GeoJSON, MVT).  The `format` option is used to determine\n * which of the advertised media types is used.  If you need to force the use of a particular media type, you can\n * provide the `mediaType` option.\n * @api\n */\nvar OGCVectorTile = /*#__PURE__*/function (_VectorTileSource) {\n  /**\n   * @param {Options} options OGC vector tile options.\n   */\n  function OGCVectorTile(options) {\n    var _this;\n    _classCallCheck(this, OGCVectorTile);\n    _this = _callSuper(this, OGCVectorTile, [{\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      format: options.format,\n      overlaps: options.overlaps,\n      projection: options.projection,\n      tileClass: options.tileClass,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n      state: 'loading'\n    }]);\n    var sourceInfo = {\n      url: options.url,\n      projection: _this.getProjection(),\n      mediaType: options.mediaType,\n      supportedMediaTypes: options.format.supportedMediaTypes,\n      context: options.context || null\n    };\n    getTileSetInfo(sourceInfo).then(_this.handleTileSetInfo_.bind(_this))[\"catch\"](_this.handleError_.bind(_this));\n    return _this;\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  _inherits(OGCVectorTile, _VectorTileSource);\n  return _createClass(OGCVectorTile, [{\n    key: \"handleTileSetInfo_\",\n    value: function handleTileSetInfo_(tileSetInfo) {\n      this.tileGrid = tileSetInfo.grid;\n      this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n      this.setState('ready');\n    }\n\n    /**\n     * @private\n     * @param {Error} error The error.\n     */\n  }, {\n    key: \"handleError_\",\n    value: function handleError_(error) {\n      logError(error);\n      this.setState('error');\n    }\n  }]);\n}(VectorTileSource);\nexport default OGCVectorTile;","map":{"version":3,"names":["VectorTileSource","getTileSetInfo","error","logError","OGCVectorTile","_VectorTileSource","options","_this","_classCallCheck","_callSuper","attributions","attributionsCollapsible","cacheSize","format","overlaps","projection","tileClass","transition","wrapX","zDirection","state","sourceInfo","url","getProjection","mediaType","supportedMediaTypes","context","then","handleTileSetInfo_","bind","handleError_","_inherits","_createClass","key","value","tileSetInfo","tileGrid","grid","setTileUrlFunction","urlFunction","urlTemplate","setState"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/OGCVectorTile.js"],"sourcesContent":["/**\n * @module ol/source/OGCVectorTile\n */\n\nimport VectorTileSource from './VectorTile.js';\nimport {getTileSetInfo} from './ogcTileUtil.js';\nimport {error as logError} from '../console.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Vector Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {import(\"../format/Feature.js\").default} format Feature parser for tiles.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"application/vnd.mapbox-vector-tile\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a vector type supported by the configured format.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"vector\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes.\n *\n * Vector tile sets may come in a variety of formats (e.g. GeoJSON, MVT).  The `format` option is used to determine\n * which of the advertised media types is used.  If you need to force the use of a particular media type, you can\n * provide the `mediaType` option.\n * @api\n */\nclass OGCVectorTile extends VectorTileSource {\n  /**\n   * @param {Options} options OGC vector tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      format: options.format,\n      overlaps: options.overlaps,\n      projection: options.projection,\n      tileClass: options.tileClass,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n      state: 'loading',\n    });\n\n    const sourceInfo = {\n      url: options.url,\n      projection: this.getProjection(),\n      mediaType: options.mediaType,\n      supportedMediaTypes: options.format.supportedMediaTypes,\n      context: options.context || null,\n    };\n\n    getTileSetInfo(sourceInfo)\n      .then(this.handleTileSetInfo_.bind(this))\n      .catch(this.handleError_.bind(this));\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  handleTileSetInfo_(tileSetInfo) {\n    this.tileGrid = tileSetInfo.grid;\n    this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n    this.setState('ready');\n  }\n\n  /**\n   * @private\n   * @param {Error} error The error.\n   */\n  handleError_(error) {\n    logError(error);\n    this.setState('error');\n  }\n}\n\nexport default OGCVectorTile;\n"],"mappings":";;;;;AAAA;AACA;AACA;;AAEA,OAAOA,gBAAgB,MAAM,iBAAiB;AAC9C,SAAQC,cAAc,QAAO,kBAAkB;AAC/C,SAAQC,KAAK,IAAIC,QAAQ,QAAO,eAAe;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,IAWMC,aAAa,0BAAAC,iBAAA;EACjB;AACF;AACA;EACE,SAAAD,cAAYE,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,aAAA;IACnBG,KAAA,GAAAE,UAAA,OAAAL,aAAA,GAAM;MACJM,YAAY,EAAEJ,OAAO,CAACI,YAAY;MAClCC,uBAAuB,EAAEL,OAAO,CAACK,uBAAuB;MACxDC,SAAS,EAAEN,OAAO,CAACM,SAAS;MAC5BC,MAAM,EAAEP,OAAO,CAACO,MAAM;MACtBC,QAAQ,EAAER,OAAO,CAACQ,QAAQ;MAC1BC,UAAU,EAAET,OAAO,CAACS,UAAU;MAC9BC,SAAS,EAAEV,OAAO,CAACU,SAAS;MAC5BC,UAAU,EAAEX,OAAO,CAACW,UAAU;MAC9BC,KAAK,EAAEZ,OAAO,CAACY,KAAK;MACpBC,UAAU,EAAEb,OAAO,CAACa,UAAU;MAC9BC,KAAK,EAAE;IACT,CAAC;IAED,IAAMC,UAAU,GAAG;MACjBC,GAAG,EAAEhB,OAAO,CAACgB,GAAG;MAChBP,UAAU,EAAER,KAAA,CAAKgB,aAAa,CAAC,CAAC;MAChCC,SAAS,EAAElB,OAAO,CAACkB,SAAS;MAC5BC,mBAAmB,EAAEnB,OAAO,CAACO,MAAM,CAACY,mBAAmB;MACvDC,OAAO,EAAEpB,OAAO,CAACoB,OAAO,IAAI;IAC9B,CAAC;IAEDzB,cAAc,CAACoB,UAAU,CAAC,CACvBM,IAAI,CAACpB,KAAA,CAAKqB,kBAAkB,CAACC,IAAI,CAAAtB,KAAK,CAAC,CAAC,SACnC,CAACA,KAAA,CAAKuB,YAAY,CAACD,IAAI,CAAAtB,KAAK,CAAC,CAAC;IAAC,OAAAA,KAAA;EACzC;;EAEA;AACF;AACA;AACA;EAHEwB,SAAA,CAAA3B,aAAA,EAAAC,iBAAA;EAAA,OAAA2B,YAAA,CAAA5B,aAAA;IAAA6B,GAAA;IAAAC,KAAA,EAIA,SAAAN,kBAAkBA,CAACO,WAAW,EAAE;MAC9B,IAAI,CAACC,QAAQ,GAAGD,WAAW,CAACE,IAAI;MAChC,IAAI,CAACC,kBAAkB,CAACH,WAAW,CAACI,WAAW,EAAEJ,WAAW,CAACK,WAAW,CAAC;MACzE,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC;IACxB;;IAEA;AACF;AACA;AACA;EAHE;IAAAR,GAAA;IAAAC,KAAA,EAIA,SAAAJ,YAAYA,CAAC5B,KAAK,EAAE;MAClBC,QAAQ,CAACD,KAAK,CAAC;MACf,IAAI,CAACuC,QAAQ,CAAC,OAAO,CAAC;IACxB;EAAC;AAAA,EAjDyBzC,gBAAgB;AAoD5C,eAAeI,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
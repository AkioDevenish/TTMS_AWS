{"ast":null,"code":"import _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.bind.js\";\n/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n\n/**\n * @enum {string}\n */\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n\n/**\n * @enum string\n */\nvar GeolocationErrorType = {\n  /**\n   * Triggered when a `GeolocationPositionError` occurs.\n   * @event module:ol/Geolocation.GeolocationError#error\n   * @api\n   */\n  ERROR: 'error'\n};\n\n/**\n * @classdesc\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\n */\nexport var GeolocationError = /*#__PURE__*/function (_BaseEvent) {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  function GeolocationError(error) {\n    var _this;\n    _classCallCheck(this, GeolocationError);\n    _this = _callSuper(this, GeolocationError, [GeolocationErrorType.ERROR]);\n\n    /**\n     * Code of the underlying `GeolocationPositionError`.\n     * @type {number}\n     * @api\n     */\n    _this.code = error.code;\n\n    /**\n     * Message of the underlying `GeolocationPositionError`.\n     * @type {string}\n     * @api\n     */\n    _this.message = error.message;\n    return _this;\n  }\n  _inherits(GeolocationError, _BaseEvent);\n  return _createClass(GeolocationError);\n}(BaseEvent);\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes and errors, register listeners for the generic\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       console.log(geolocation.getPosition());\n *     });\n *     // listen to error\n *     geolocation.on('error', function(evt) {\n *       window.console.log(evt.message);\n *     });\n *\n * @fires GeolocationError\n * @api\n */\nvar Geolocation = /*#__PURE__*/function (_BaseObject) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Geolocation(options) {\n    var _this2;\n    _classCallCheck(this, Geolocation);\n    _this2 = _callSuper(this, Geolocation);\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    _this2.un;\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this2.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    _this2.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this2.watchId_ = undefined;\n    _this2.addChangeListener(Property.PROJECTION, _this2.handleProjectionChanged_);\n    _this2.addChangeListener(Property.TRACKING, _this2.handleTrackingChanged_);\n    if (options.projection !== undefined) {\n      _this2.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      _this2.setTrackingOptions(options.trackingOptions);\n    }\n    _this2.setTracking(options.tracking !== undefined ? options.tracking : false);\n    return _this2;\n  }\n\n  /**\n   * Clean up.\n   */\n  _inherits(Geolocation, _BaseObject);\n  return _createClass(Geolocation, [{\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      this.setTracking(false);\n      _superPropGet(Geolocation, \"disposeInternal\", this, 3)([]);\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleProjectionChanged_\",\n    value: function handleProjectionChanged_() {\n      var projection = this.getProjection();\n      if (projection) {\n        this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n        if (this.position_) {\n          this.set(Property.POSITION, this.transform_(this.position_));\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleTrackingChanged_\",\n    value: function handleTrackingChanged_() {\n      if ('geolocation' in navigator) {\n        var tracking = this.getTracking();\n        if (tracking && this.watchId_ === undefined) {\n          this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n        } else if (!tracking && this.watchId_ !== undefined) {\n          navigator.geolocation.clearWatch(this.watchId_);\n          this.watchId_ = undefined;\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @param {GeolocationPosition} position position event.\n     */\n  }, {\n    key: \"positionChange_\",\n    value: function positionChange_(position) {\n      var coords = position.coords;\n      this.set(Property.ACCURACY, coords.accuracy);\n      this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n      this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n      this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n      if (!this.position_) {\n        this.position_ = [coords.longitude, coords.latitude];\n      } else {\n        this.position_[0] = coords.longitude;\n        this.position_[1] = coords.latitude;\n      }\n      var projectedPosition = this.transform_(this.position_);\n      this.set(Property.POSITION, projectedPosition.slice());\n      this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n      var geometry = circularPolygon(this.position_, coords.accuracy);\n      geometry.applyTransform(this.transform_);\n      this.set(Property.ACCURACY_GEOMETRY, geometry);\n      this.changed();\n    }\n\n    /**\n     * @private\n     * @param {GeolocationPositionError} error error object.\n     */\n  }, {\n    key: \"positionError_\",\n    value: function positionError_(error) {\n      this.dispatchEvent(new GeolocationError(error));\n    }\n\n    /**\n     * Get the accuracy of the position in meters.\n     * @return {number|undefined} The accuracy of the position measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAccuracy\",\n    value: function getAccuracy() {\n      return /** @type {number|undefined} */this.get(Property.ACCURACY);\n    }\n\n    /**\n     * Get a geometry of the position accuracy.\n     * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAccuracyGeometry\",\n    value: function getAccuracyGeometry() {\n      return /** @type {?import(\"./geom/Polygon.js\").default} */this.get(Property.ACCURACY_GEOMETRY) || null;\n    }\n\n    /**\n     * Get the altitude associated with the position.\n     * @return {number|undefined} The altitude of the position in meters above mean\n     *     sea level.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAltitude\",\n    value: function getAltitude() {\n      return /** @type {number|undefined} */this.get(Property.ALTITUDE);\n    }\n\n    /**\n     * Get the altitude accuracy of the position.\n     * @return {number|undefined} The accuracy of the altitude measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAltitudeAccuracy\",\n    value: function getAltitudeAccuracy() {\n      return /** @type {number|undefined} */this.get(Property.ALTITUDE_ACCURACY);\n    }\n\n    /**\n     * Get the heading as radians clockwise from North.\n     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n     * is set to `true` in the tracking options.\n     * @return {number|undefined} The heading of the device in radians from north.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getHeading\",\n    value: function getHeading() {\n      return /** @type {number|undefined} */this.get(Property.HEADING);\n    }\n\n    /**\n     * Get the position of the device.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n     *     in the current projection.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n    }\n\n    /**\n     * Get the projection associated with the position.\n     * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return /** @type {import(\"./proj/Projection.js\").default|undefined} */this.get(Property.PROJECTION);\n    }\n\n    /**\n     * Get the speed in meters per second.\n     * @return {number|undefined} The instantaneous speed of the device in meters\n     *     per second.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getSpeed\",\n    value: function getSpeed() {\n      return /** @type {number|undefined} */this.get(Property.SPEED);\n    }\n\n    /**\n     * Determine if the device location is being tracked.\n     * @return {boolean} The device location is being tracked.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getTracking\",\n    value: function getTracking() {\n      return /** @type {boolean} */this.get(Property.TRACKING);\n    }\n\n    /**\n     * Get the tracking options.\n     * See https://www.w3.org/TR/geolocation-API/#position-options.\n     * @return {PositionOptions|undefined} PositionOptions as defined by\n     *     the [HTML5 Geolocation spec\n     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getTrackingOptions\",\n    value: function getTrackingOptions() {\n      return /** @type {PositionOptions|undefined} */this.get(Property.TRACKING_OPTIONS);\n    }\n\n    /**\n     * Set the projection to use for transforming the coordinates.\n     * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setProjection\",\n    value: function setProjection(projection) {\n      this.set(Property.PROJECTION, getProjection(projection));\n    }\n\n    /**\n     * Enable or disable tracking.\n     * @param {boolean} tracking Enable tracking.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setTracking\",\n    value: function setTracking(tracking) {\n      this.set(Property.TRACKING, tracking);\n    }\n\n    /**\n     * Set the tracking options.\n     * See http://www.w3.org/TR/geolocation-API/#position-options.\n     * @param {PositionOptions} options PositionOptions as defined by the\n     *     [HTML5 Geolocation spec\n     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setTrackingOptions\",\n    value: function setTrackingOptions(options) {\n      this.set(Property.TRACKING_OPTIONS, options);\n    }\n  }]);\n}(BaseObject);\nexport default Geolocation;","map":{"version":3,"names":["BaseEvent","BaseObject","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","GeolocationErrorType","ERROR","GeolocationError","_BaseEvent","error","_this","_classCallCheck","_callSuper","code","message","_inherits","_createClass","Geolocation","_BaseObject","options","_this2","on","once","un","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","key","value","disposeInternal","_superPropGet","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","slice","speed","geometry","applyTransform","changed","dispatchEvent","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/Geolocation.js"],"sourcesContent":["/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport {circular as circularPolygon} from './geom/Polygon.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  identityTransform,\n} from './proj.js';\nimport {toRadians} from './math.js';\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions',\n};\n\n/**\n * @enum string\n */\nconst GeolocationErrorType = {\n  /**\n   * Triggered when a `GeolocationPositionError` occurs.\n   * @event module:ol/Geolocation.GeolocationError#error\n   * @api\n   */\n  ERROR: 'error',\n};\n\n/**\n * @classdesc\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\n */\nexport class GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(GeolocationErrorType.ERROR);\n\n    /**\n     * Code of the underlying `GeolocationPositionError`.\n     * @type {number}\n     * @api\n     */\n    this.code = error.code;\n\n    /**\n     * Message of the underlying `GeolocationPositionError`.\n     * @type {string}\n     * @api\n     */\n    this.message = error.message;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes and errors, register listeners for the generic\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       console.log(geolocation.getPosition());\n *     });\n *     // listen to error\n *     geolocation.on('error', function(evt) {\n *       window.console.log(evt.message);\n *     });\n *\n * @fires GeolocationError\n * @api\n */\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        projection\n      );\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(\n          this.positionChange_.bind(this),\n          this.positionError_.bind(this),\n          this.getTrackingOptions()\n        );\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(\n      Property.ALTITUDE,\n      coords.altitude === null ? undefined : coords.altitude\n    );\n    this.set(\n      Property.ALTITUDE_ACCURACY,\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy\n    );\n    this.set(\n      Property.HEADING,\n      coords.heading === null ? undefined : toRadians(coords.heading)\n    );\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition.slice());\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return /** @type {number|undefined} */ (\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\n      this.get(Property.PROJECTION)\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\n  }\n\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return /** @type {PositionOptions|undefined} */ (\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\n\nexport default Geolocation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
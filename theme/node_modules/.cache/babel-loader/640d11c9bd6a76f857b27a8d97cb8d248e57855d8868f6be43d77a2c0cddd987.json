{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.function.bind.js\";\n/**\n * @module ol/ImageCanvas\n */\nimport ImageState from './ImageState.js';\nimport ImageWrapper from './Image.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\nvar ImageCanvas = /*#__PURE__*/function (_ImageWrapper) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, loader) {\n    var _this;\n    _classCallCheck(this, ImageCanvas);\n    var state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    _this = _callSuper(this, ImageCanvas, [extent, resolution, pixelRatio, state]);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    _this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    _this.error_ = null;\n    return _this;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  _inherits(ImageCanvas, _ImageWrapper);\n  return _createClass(ImageCanvas, [{\n    key: \"getError\",\n    value: function getError() {\n      return this.error_;\n    }\n\n    /**\n     * Handle async drawing complete.\n     * @param {Error} [err] Any error during drawing.\n     * @private\n     */\n  }, {\n    key: \"handleLoad_\",\n    value: function handleLoad_(err) {\n      if (err) {\n        this.error_ = err;\n        this.state = ImageState.ERROR;\n      } else {\n        this.state = ImageState.LOADED;\n      }\n      this.changed();\n    }\n\n    /**\n     * Load not yet loaded URI.\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.state == ImageState.IDLE) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        this.loader_(this.handleLoad_.bind(this));\n      }\n    }\n\n    /**\n     * @return {HTMLCanvasElement} Canvas element.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage() {\n      return this.canvas_;\n    }\n  }]);\n}(ImageWrapper);\nexport default ImageCanvas;","map":{"version":3,"names":["ImageState","ImageWrapper","ImageCanvas","_ImageWrapper","extent","resolution","pixelRatio","canvas","loader","_this","_classCallCheck","state","undefined","IDLE","LOADED","_callSuper","loader_","canvas_","error_","_inherits","_createClass","key","value","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageState from './ImageState.js';\nimport ImageWrapper from './Image.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageWrapper {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,YAAY,MAAM,YAAY;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IASMC,WAAW,0BAAAC,aAAA;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAAD,YAAYE,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,WAAA;IAC1D,IAAMS,KAAK,GAAGH,MAAM,KAAKI,SAAS,GAAGZ,UAAU,CAACa,IAAI,GAAGb,UAAU,CAACc,MAAM;IAExEL,KAAA,GAAAM,UAAA,OAAAb,WAAA,GAAME,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEK,KAAK;;IAE3C;AACJ;AACA;AACA;AACA;IACIF,KAAA,CAAKO,OAAO,GAAGR,MAAM,KAAKI,SAAS,GAAGJ,MAAM,GAAG,IAAI;;IAEnD;AACJ;AACA;AACA;IACIC,KAAA,CAAKQ,OAAO,GAAGV,MAAM;;IAErB;AACJ;AACA;AACA;IACIE,KAAA,CAAKS,MAAM,GAAG,IAAI;IAAC,OAAAT,KAAA;EACrB;;EAEA;AACF;AACA;AACA;EAHEU,SAAA,CAAAjB,WAAA,EAAAC,aAAA;EAAA,OAAAiB,YAAA,CAAAlB,WAAA;IAAAmB,GAAA;IAAAC,KAAA,EAIA,SAAAC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACL,MAAM;IACpB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAG,GAAA;IAAAC,KAAA,EAKA,SAAAE,WAAWA,CAACC,GAAG,EAAE;MACf,IAAIA,GAAG,EAAE;QACP,IAAI,CAACP,MAAM,GAAGO,GAAG;QACjB,IAAI,CAACd,KAAK,GAAGX,UAAU,CAAC0B,KAAK;MAC/B,CAAC,MAAM;QACL,IAAI,CAACf,KAAK,GAAGX,UAAU,CAACc,MAAM;MAChC;MACA,IAAI,CAACa,OAAO,CAAC,CAAC;IAChB;;IAEA;AACF;AACA;EAFE;IAAAN,GAAA;IAAAC,KAAA,EAGA,SAAAM,IAAIA,CAAA,EAAG;MACL,IAAI,IAAI,CAACjB,KAAK,IAAIX,UAAU,CAACa,IAAI,EAAE;QACjC,IAAI,CAACF,KAAK,GAAGX,UAAU,CAAC6B,OAAO;QAC/B,IAAI,CAACF,OAAO,CAAC,CAAC;QACd,IAAI,CAACX,OAAO,CAAC,IAAI,CAACQ,WAAW,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;MAC3C;IACF;;IAEA;AACF;AACA;EAFE;IAAAT,GAAA;IAAAC,KAAA,EAGA,SAAAS,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACd,OAAO;IACrB;EAAC;AAAA,EAzEuBhB,YAAY;AA4EtC,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
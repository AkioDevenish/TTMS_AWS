{"ast":null,"code":"import _regeneratorRuntime from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.all-settled.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\nvar Block = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  function Block(offset, length) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, Block);\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  return _createClass(Block, [{\n    key: \"top\",\n    get: function get() {\n      return this.offset + this.length;\n    }\n  }]);\n}();\nvar BlockGroup = /*#__PURE__*/_createClass(\n/**\n *\n * @param {number} offset\n * @param {number} length\n * @param {number[]} blockIds\n */\nfunction BlockGroup(offset, length, blockIds) {\n  _classCallCheck(this, BlockGroup);\n  this.offset = offset;\n  this.length = length;\n  this.blockIds = blockIds;\n});\nexport var BlockedSource = /*#__PURE__*/function (_BaseSource) {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  function BlockedSource(source) {\n    var _this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$blockSize = _ref.blockSize,\n      blockSize = _ref$blockSize === void 0 ? 65536 : _ref$blockSize,\n      _ref$cacheSize = _ref.cacheSize,\n      cacheSize = _ref$cacheSize === void 0 ? 100 : _ref$cacheSize;\n    _classCallCheck(this, BlockedSource);\n    _this = _callSuper(this, BlockedSource);\n    _this.source = source;\n    _this.blockSize = blockSize;\n    _this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: function onEviction(blockId, block) {\n        _this.evictedBlocks.set(blockId, block);\n      }\n    });\n\n    /** @type {Map<number, Block>} */\n    _this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    _this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    _this.blockIdsToFetch = new Set();\n    _this.abortedBlockIds = new Set();\n    return _this;\n  }\n  _inherits(BlockedSource, _BaseSource);\n  return _createClass(BlockedSource, [{\n    key: \"fileSize\",\n    get: function get() {\n      return this.source.fileSize;\n    }\n\n    /**\n     *\n     * @param {import(\"./basesource\").Slice[]} slices\n     */\n  }, {\n    key: \"fetch\",\n    value: (function () {\n      var _fetch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(slices, signal) {\n        var _this2 = this;\n        var blockRequests, missingBlockIds, allBlockIds, _iterator, _step, _step$value, offset, length, top, fileSize, firstBlockOffset, current, _blockId2, missingRequests, _i, _missingBlockIds, blockId, abortedBlockRequests, abortedBlockIds, _iterator2, _step2, _blockId, block, blocks, failedBlocks, requiredBlocks;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              blockRequests = [];\n              missingBlockIds = [];\n              allBlockIds = [];\n              this.evictedBlocks.clear();\n              _iterator = _createForOfIteratorHelper(slices);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  _step$value = _step.value, offset = _step$value.offset, length = _step$value.length;\n                  top = offset + length;\n                  fileSize = this.fileSize;\n                  if (fileSize !== null) {\n                    top = Math.min(top, fileSize);\n                  }\n                  firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n                  for (current = firstBlockOffset; current < top; current += this.blockSize) {\n                    _blockId2 = Math.floor(current / this.blockSize);\n                    if (!this.blockCache.has(_blockId2) && !this.blockRequests.has(_blockId2)) {\n                      this.blockIdsToFetch.add(_blockId2);\n                      missingBlockIds.push(_blockId2);\n                    }\n                    if (this.blockRequests.has(_blockId2)) {\n                      blockRequests.push(this.blockRequests.get(_blockId2));\n                    }\n                    allBlockIds.push(_blockId2);\n                  }\n                }\n\n                // allow additional block requests to accumulate\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              _context.next = 8;\n              return wait();\n            case 8:\n              this.fetchBlocks(signal);\n\n              // Gather all of the new requests that this fetch call is contributing to `fetch`.\n              missingRequests = [];\n              for (_i = 0, _missingBlockIds = missingBlockIds; _i < _missingBlockIds.length; _i++) {\n                blockId = _missingBlockIds[_i];\n                // The requested missing block could already be in the cache\n                // instead of having its request still be outstanding.\n                if (this.blockRequests.has(blockId)) {\n                  missingRequests.push(this.blockRequests.get(blockId));\n                }\n              }\n\n              // Actually await all pending requests that are needed for this `fetch`.\n              _context.next = 13;\n              return Promise.allSettled(blockRequests);\n            case 13:\n              _context.next = 15;\n              return Promise.allSettled(missingRequests);\n            case 15:\n              // Perform retries if a block was interrupted by a previous signal\n              abortedBlockRequests = [];\n              abortedBlockIds = allBlockIds.filter(function (id) {\n                return _this2.abortedBlockIds.has(id) || !_this2.blockCache.has(id);\n              });\n              abortedBlockIds.forEach(function (id) {\n                return _this2.blockIdsToFetch.add(id);\n              });\n              // start the retry of some blocks if required\n              if (!(abortedBlockIds.length > 0 && signal && !signal.aborted)) {\n                _context.next = 41;\n                break;\n              }\n              this.fetchBlocks(null);\n              _iterator2 = _createForOfIteratorHelper(abortedBlockIds);\n              _context.prev = 21;\n              _iterator2.s();\n            case 23:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 31;\n                break;\n              }\n              _blockId = _step2.value;\n              block = this.blockRequests.get(_blockId);\n              if (block) {\n                _context.next = 28;\n                break;\n              }\n              throw new Error(\"Block \".concat(_blockId, \" is not in the block requests\"));\n            case 28:\n              abortedBlockRequests.push(block);\n            case 29:\n              _context.next = 23;\n              break;\n            case 31:\n              _context.next = 36;\n              break;\n            case 33:\n              _context.prev = 33;\n              _context.t0 = _context[\"catch\"](21);\n              _iterator2.e(_context.t0);\n            case 36:\n              _context.prev = 36;\n              _iterator2.f();\n              return _context.finish(36);\n            case 39:\n              _context.next = 41;\n              return Promise.allSettled(abortedBlockRequests);\n            case 41:\n              if (!(signal && signal.aborted)) {\n                _context.next = 43;\n                break;\n              }\n              throw new AbortError('Request was aborted');\n            case 43:\n              blocks = allBlockIds.map(function (id) {\n                return _this2.blockCache.get(id) || _this2.evictedBlocks.get(id);\n              });\n              failedBlocks = blocks.filter(function (i) {\n                return !i;\n              });\n              if (!failedBlocks.length) {\n                _context.next = 47;\n                break;\n              }\n              throw new AggregateError(failedBlocks, 'Request failed');\n            case 47:\n              // create a final Map, with all required blocks for this request to satisfy\n              requiredBlocks = new Map(zip(allBlockIds, blocks)); // TODO: satisfy each slice\n              return _context.abrupt(\"return\", this.readSliceData(slices, requiredBlocks));\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[21, 33, 36, 39]]);\n      }));\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     *\n     * @param {AbortSignal} signal\n     */\n    )\n  }, {\n    key: \"fetchBlocks\",\n    value: function fetchBlocks(signal) {\n      var _this3 = this;\n      // check if we still need to\n      if (this.blockIdsToFetch.size > 0) {\n        var groups = this.groupBlocks(this.blockIdsToFetch);\n\n        // start requesting slices of data\n        var groupRequests = this.source.fetch(groups, signal);\n        var _loop = function _loop(groupIndex) {\n          var group = groups[groupIndex];\n          var _iterator3 = _createForOfIteratorHelper(group.blockIds),\n            _step3;\n          try {\n            var _loop2 = function _loop2() {\n              var blockId = _step3.value;\n              // make an async IIFE for each block\n              _this3.blockRequests.set(blockId, _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                var response, blockOffset, o, t, data, block;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      _context2.next = 3;\n                      return groupRequests;\n                    case 3:\n                      _context2.t0 = groupIndex;\n                      response = _context2.sent[_context2.t0];\n                      blockOffset = blockId * _this3.blockSize;\n                      o = blockOffset - response.offset;\n                      t = Math.min(o + _this3.blockSize, response.data.byteLength);\n                      data = response.data.slice(o, t);\n                      block = new Block(blockOffset, data.byteLength, data, blockId);\n                      _this3.blockCache.set(blockId, block);\n                      _this3.abortedBlockIds[\"delete\"](blockId);\n                      _context2.next = 23;\n                      break;\n                    case 14:\n                      _context2.prev = 14;\n                      _context2.t1 = _context2[\"catch\"](0);\n                      if (!(_context2.t1.name === 'AbortError')) {\n                        _context2.next = 22;\n                        break;\n                      }\n                      // store the signal here, we need it to determine later if an\n                      // error was caused by this signal\n                      _context2.t1.signal = signal;\n                      _this3.blockCache[\"delete\"](blockId);\n                      _this3.abortedBlockIds.add(blockId);\n                      _context2.next = 23;\n                      break;\n                    case 22:\n                      throw _context2.t1;\n                    case 23:\n                      _context2.prev = 23;\n                      _this3.blockRequests[\"delete\"](blockId);\n                      return _context2.finish(23);\n                    case 26:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2, null, [[0, 14, 23, 26]]);\n              }))());\n            };\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              _loop2();\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        };\n        for (var groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n          _loop(groupIndex);\n        }\n        this.blockIdsToFetch.clear();\n      }\n    }\n\n    /**\n     *\n     * @param {Set} blockIds\n     * @returns {BlockGroup[]}\n     */\n  }, {\n    key: \"groupBlocks\",\n    value: function groupBlocks(blockIds) {\n      var sortedBlockIds = Array.from(blockIds).sort(function (a, b) {\n        return a - b;\n      });\n      if (sortedBlockIds.length === 0) {\n        return [];\n      }\n      var current = [];\n      var lastBlockId = null;\n      var groups = [];\n      var _iterator4 = _createForOfIteratorHelper(sortedBlockIds),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var blockId = _step4.value;\n          if (lastBlockId === null || lastBlockId + 1 === blockId) {\n            current.push(blockId);\n            lastBlockId = blockId;\n          } else {\n            groups.push(new BlockGroup(current[0] * this.blockSize, current.length * this.blockSize, current));\n            current = [blockId];\n            lastBlockId = blockId;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      groups.push(new BlockGroup(current[0] * this.blockSize, current.length * this.blockSize, current));\n      return groups;\n    }\n\n    /**\n     *\n     * @param {import(\"./basesource\").Slice[]} slices\n     * @param {Map} blocks\n     */\n  }, {\n    key: \"readSliceData\",\n    value: function readSliceData(slices, blocks) {\n      var _this4 = this;\n      return slices.map(function (slice) {\n        var top = slice.offset + slice.length;\n        if (_this4.fileSize !== null) {\n          top = Math.min(_this4.fileSize, top);\n        }\n        var blockIdLow = Math.floor(slice.offset / _this4.blockSize);\n        var blockIdHigh = Math.floor(top / _this4.blockSize);\n        var sliceData = new ArrayBuffer(slice.length);\n        var sliceView = new Uint8Array(sliceData);\n        for (var blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n          var block = blocks.get(blockId);\n          var delta = block.offset - slice.offset;\n          var topDelta = block.top - top;\n          var blockInnerOffset = 0;\n          var rangeInnerOffset = 0;\n          var usedBlockLength = void 0;\n          if (delta < 0) {\n            blockInnerOffset = -delta;\n          } else if (delta > 0) {\n            rangeInnerOffset = delta;\n          }\n          if (topDelta < 0) {\n            usedBlockLength = block.length - blockInnerOffset;\n          } else {\n            usedBlockLength = top - block.offset - blockInnerOffset;\n          }\n          var blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n          sliceView.set(blockView, rangeInnerOffset);\n        }\n        return sliceData;\n      });\n    }\n  }]);\n}(BaseSource);","map":{"version":3,"names":["QuickLRU","BaseSource","AbortError","AggregateError","wait","zip","Block","offset","length","data","arguments","undefined","_classCallCheck","_createClass","key","get","BlockGroup","blockIds","BlockedSource","_BaseSource","source","_this","_ref","_ref$blockSize","blockSize","_ref$cacheSize","cacheSize","_callSuper","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","set","Map","blockRequests","blockIdsToFetch","Set","abortedBlockIds","_inherits","fileSize","value","_fetch","_asyncToGenerator","_regeneratorRuntime","mark","_callee","slices","signal","_this2","missingBlockIds","allBlockIds","_iterator","_step","_step$value","top","firstBlockOffset","current","_blockId2","missingRequests","_i","_missingBlockIds","abortedBlockRequests","_iterator2","_step2","_blockId","blocks","failedBlocks","requiredBlocks","wrap","_callee$","_context","prev","next","clear","_createForOfIteratorHelper","s","n","done","Math","min","floor","has","add","push","err","e","f","fetchBlocks","Promise","allSettled","filter","id","forEach","aborted","Error","concat","t0","finish","map","i","abrupt","readSliceData","stop","fetch","_x","_x2","apply","_this3","size","groups","groupBlocks","groupRequests","_loop","groupIndex","group","_iterator3","_step3","_loop2","_callee2","response","blockOffset","o","t","_callee2$","_context2","sent","byteLength","slice","t1","name","sortedBlockIds","Array","from","sort","a","b","lastBlockId","_iterator4","_step4","_this4","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","Uint8Array","delta","topDelta","blockInnerOffset","rangeInnerOffset","usedBlockLength","blockView"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/geotiff/dist-module/source/blockedsource.js"],"sourcesContent":["import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
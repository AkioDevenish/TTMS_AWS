{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { createLoader } from './arcgisRest.js';\nimport { decode } from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageArcGISRest = /*#__PURE__*/function (_ImageSource) {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  function ImageArcGISRest(options) {\n    var _this;\n    _classCallCheck(this, ImageArcGISRest);\n    options = options ? options : {};\n    _this = _callSuper(this, ImageArcGISRest, [{\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }]);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    _this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.loaderProjection_ = null;\n    return _this;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  _inherits(ImageArcGISRest, _ImageSource);\n  return _createClass(ImageArcGISRest, [{\n    key: \"getParams\",\n    value: function getParams() {\n      return this.params_;\n    }\n\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../Image.js\").default} Single image.\n     */\n  }, {\n    key: \"getImageInternal\",\n    value: function getImageInternal(extent, resolution, pixelRatio, projection) {\n      var _this2 = this;\n      if (this.url_ === undefined) {\n        return null;\n      }\n      if (!this.loader || this.loaderProjection_ !== projection) {\n        // Lazily create loader to pick up the view projection and to allow `params` updates\n        this.loaderProjection_ = projection;\n        this.loader = createLoader({\n          crossOrigin: this.crossOrigin_,\n          params: this.params_,\n          projection: projection,\n          hidpi: this.hidpi_,\n          url: this.url_,\n          ratio: this.ratio_,\n          load: function load(image, src) {\n            _this2.image.setImage(image);\n            _this2.imageLoadFunction_(_this2.image, src);\n            return decode(image);\n          }\n        });\n      }\n      return _superPropGet(ImageArcGISRest, \"getImageInternal\", this, 3)([extent, resolution, pixelRatio, projection]);\n    }\n\n    /**\n     * Return the image load function of the source.\n     * @return {import(\"../Image.js\").LoadFunction} The image load function.\n     * @api\n     */\n  }, {\n    key: \"getImageLoadFunction\",\n    value: function getImageLoadFunction() {\n      return this.imageLoadFunction_;\n    }\n\n    /**\n     * Return the URL used for this ArcGIS source.\n     * @return {string|undefined} URL.\n     * @api\n     */\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      return this.url_;\n    }\n\n    /**\n     * Set the image load function of the source.\n     * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n     * @api\n     */\n  }, {\n    key: \"setImageLoadFunction\",\n    value: function setImageLoadFunction(imageLoadFunction) {\n      this.image_ = null;\n      this.imageLoadFunction_ = imageLoadFunction;\n      this.changed();\n    }\n\n    /**\n     * Set the URL to use for requests.\n     * @param {string|undefined} url URL.\n     * @api\n     */\n  }, {\n    key: \"setUrl\",\n    value: function setUrl(url) {\n      if (url != this.url_) {\n        this.url_ = url;\n        this.image_ = null;\n        this.changed();\n      }\n    }\n\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n  }, {\n    key: \"updateParams\",\n    value: function updateParams(params) {\n      Object.assign(this.params_, params);\n      this.image_ = null;\n      this.changed();\n    }\n  }]);\n}(ImageSource);\nexport default ImageArcGISRest;","map":{"version":3,"names":["ImageSource","defaultImageLoadFunction","createLoader","decode","ImageArcGISRest","_ImageSource","options","_this","_classCallCheck","_callSuper","attributions","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","loaderProjection_","_inherits","_createClass","key","value","getParams","getImageInternal","extent","resolution","pixelRatio","_this2","loader","load","image","src","setImage","_superPropGet","getImageLoadFunction","getUrl","setImageLoadFunction","changed","setUrl","updateParams","Object","assign"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/ImageArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './arcgisRest.js';\nimport {decode} from '../Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/**\n * @module ol/format/TextFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport { abstract as _abstract } from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @abstract\n */\nvar TextFeature = /*#__PURE__*/function (_FeatureFormat) {\n  function TextFeature() {\n    _classCallCheck(this, TextFeature);\n    return _callSuper(this, TextFeature);\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  _inherits(TextFeature, _FeatureFormat);\n  return _createClass(TextFeature, [{\n    key: \"getType\",\n    value: function getType() {\n      return 'text';\n    }\n\n    /**\n     * Read the feature from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     * @api\n     */\n  }, {\n    key: \"readFeature\",\n    value: function readFeature(source, options) {\n      return this.readFeatureFromText(getText(source), this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n  }, {\n    key: \"readFeatureFromText\",\n    value: function readFeatureFromText(text, options) {\n      return _abstract();\n    }\n\n    /**\n     * Read the features from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     * @api\n     */\n  }, {\n    key: \"readFeatures\",\n    value: function readFeatures(source, options) {\n      return this.readFeaturesFromText(getText(source), this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n  }, {\n    key: \"readFeaturesFromText\",\n    value: function readFeaturesFromText(text, options) {\n      return _abstract();\n    }\n\n    /**\n     * Read the geometry from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     * @api\n     */\n  }, {\n    key: \"readGeometry\",\n    value: function readGeometry(source, options) {\n      return this.readGeometryFromText(getText(source), this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n  }, {\n    key: \"readGeometryFromText\",\n    value: function readGeometryFromText(text, options) {\n      return _abstract();\n    }\n\n    /**\n     * Read the projection from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     * @api\n     */\n  }, {\n    key: \"readProjection\",\n    value: function readProjection(source) {\n      return this.readProjectionFromText(getText(source));\n    }\n\n    /**\n     * @param {string} text Text.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     */\n  }, {\n    key: \"readProjectionFromText\",\n    value: function readProjectionFromText(text) {\n      return this.dataProjection;\n    }\n\n    /**\n     * Encode a feature as a string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Encoded feature.\n     * @api\n     */\n  }, {\n    key: \"writeFeature\",\n    value: function writeFeature(feature, options) {\n      return this.writeFeatureText(feature, this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n  }, {\n    key: \"writeFeatureText\",\n    value: function writeFeatureText(feature, options) {\n      return _abstract();\n    }\n\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Encoded features.\n     * @api\n     */\n  }, {\n    key: \"writeFeatures\",\n    value: function writeFeatures(features, options) {\n      return this.writeFeaturesText(features, this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n  }, {\n    key: \"writeFeaturesText\",\n    value: function writeFeaturesText(features, options) {\n      return _abstract();\n    }\n\n    /**\n     * Write a single geometry.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Geometry.\n     * @api\n     */\n  }, {\n    key: \"writeGeometry\",\n    value: function writeGeometry(geometry, options) {\n      return this.writeGeometryText(geometry, this.adaptOptions(options));\n    }\n\n    /**\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n  }, {\n    key: \"writeGeometryText\",\n    value: function writeGeometryText(geometry, options) {\n      return _abstract();\n    }\n  }]);\n}(FeatureFormat);\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {string} Text.\n */\nfunction getText(source) {\n  if (typeof source === 'string') {\n    return source;\n  }\n  return '';\n}\nexport default TextFeature;","map":{"version":3,"names":["FeatureFormat","abstract","TextFeature","_FeatureFormat","_classCallCheck","_callSuper","_inherits","_createClass","key","value","getType","readFeature","source","options","readFeatureFromText","getText","adaptOptions","text","readFeatures","readFeaturesFromText","readGeometry","readGeometryFromText","readProjection","readProjectionFromText","dataProjection","writeFeature","feature","writeFeatureText","writeFeatures","features","writeFeaturesText","writeGeometry","geometry","writeGeometryText"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/format/TextFeature.js"],"sourcesContent":["/**\n * @module ol/format/TextFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @abstract\n */\nclass TextFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'text';\n  }\n\n  /**\n   * Read the feature from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the features from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the geometry from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromText(\n      getText(source),\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromText(text, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromText(getText(source));\n  }\n\n  /**\n   * @param {string} text Text.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n  readProjectionFromText(text) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Encode a feature as a string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return this.writeFeatureText(feature, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeatureText(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return this.writeFeaturesText(features, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeaturesText(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return this.writeGeometryText(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeGeometryText(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {string} Text.\n */\nfunction getText(source) {\n  if (typeof source === 'string') {\n    return source;\n  }\n  return '';\n}\n\nexport default TextFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
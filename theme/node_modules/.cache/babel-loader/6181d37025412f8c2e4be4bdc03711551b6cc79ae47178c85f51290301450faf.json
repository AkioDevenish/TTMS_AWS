{"ast":null,"code":"import _slicedToArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString } from '../../transform.js';\nimport { containsCoordinate, containsExtent, getHeight, getIntersection, getWidth, intersects as intersectsExtent, isEmpty } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nvar CanvasImageLayerRenderer = /*#__PURE__*/function (_CanvasLayerRenderer) {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  function CanvasImageLayerRenderer(imageLayer) {\n    var _this;\n    _classCallCheck(this, CanvasImageLayerRenderer);\n    _this = _callSuper(this, CanvasImageLayerRenderer, [imageLayer]);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    _this.image_ = null;\n    return _this;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  _inherits(CanvasImageLayerRenderer, _CanvasLayerRenderer);\n  return _createClass(CanvasImageLayerRenderer, [{\n    key: \"getImage\",\n    value: function getImage() {\n      return !this.image_ ? null : this.image_.getImage();\n    }\n\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n  }, {\n    key: \"prepareFrame\",\n    value: function prepareFrame(frameState) {\n      var layerState = frameState.layerStatesArray[frameState.layerIndex];\n      var pixelRatio = frameState.pixelRatio;\n      var viewState = frameState.viewState;\n      var viewResolution = viewState.resolution;\n      var imageSource = this.getLayer().getSource();\n      var hints = frameState.viewHints;\n      var renderedExtent = frameState.extent;\n      if (layerState.extent !== undefined) {\n        renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));\n      }\n      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n        if (imageSource) {\n          var projection = viewState.projection;\n          var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n          if (image) {\n            if (this.loadImage(image)) {\n              this.image_ = image;\n            } else if (image.getState() === ImageState.EMPTY) {\n              this.image_ = null;\n            }\n          }\n        } else {\n          this.image_ = null;\n        }\n      }\n      return !!this.image_;\n    }\n\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray} Data at the pixel location.\n     */\n  }, {\n    key: \"getData\",\n    value: function getData(pixel) {\n      var frameState = this.frameState;\n      if (!frameState) {\n        return null;\n      }\n      var layer = this.getLayer();\n      var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      var layerExtent = layer.getExtent();\n      if (layerExtent) {\n        if (!containsCoordinate(layerExtent, coordinate)) {\n          return null;\n        }\n      }\n      var imageExtent = this.image_.getExtent();\n      var img = this.image_.getImage();\n      var imageMapWidth = getWidth(imageExtent);\n      var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));\n      if (col < 0 || col >= img.width) {\n        return null;\n      }\n      var imageMapHeight = getHeight(imageExtent);\n      var row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));\n      if (row < 0 || row >= img.height) {\n        return null;\n      }\n      return this.getImageData(img, col, row);\n    }\n\n    /**\n     * Render the layer.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frameState, target) {\n      var image = this.image_;\n      var imageExtent = image.getExtent();\n      var imageResolution = image.getResolution();\n      var _ref = Array.isArray(imageResolution) ? imageResolution : [imageResolution, imageResolution],\n        _ref2 = _slicedToArray(_ref, 2),\n        imageResolutionX = _ref2[0],\n        imageResolutionY = _ref2[1];\n      var imagePixelRatio = image.getPixelRatio();\n      var layerState = frameState.layerStatesArray[frameState.layerIndex];\n      var pixelRatio = frameState.pixelRatio;\n      var viewState = frameState.viewState;\n      var viewCenter = viewState.center;\n      var viewResolution = viewState.resolution;\n      var scaleX = pixelRatio * imageResolutionX / (viewResolution * imagePixelRatio);\n      var scaleY = pixelRatio * imageResolutionY / (viewResolution * imagePixelRatio);\n      var extent = frameState.extent;\n      var resolution = viewState.resolution;\n      var rotation = viewState.rotation;\n      // desired dimensions of the canvas in pixels\n      var width = Math.round(getWidth(extent) / resolution * pixelRatio);\n      var height = Math.round(getHeight(extent) / resolution * pixelRatio);\n\n      // set forward and inverse pixel transforms\n      composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n      makeInverse(this.inversePixelTransform, this.pixelTransform);\n      var canvasTransform = toTransformString(this.pixelTransform);\n      this.useContainer(target, canvasTransform, this.getBackground(frameState));\n      var context = this.context;\n      var canvas = context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else if (!this.containerReused) {\n        context.clearRect(0, 0, width, height);\n      }\n\n      // clipped rendering if layer extent is set\n      var clipped = false;\n      var render = true;\n      if (layerState.extent) {\n        var layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n        render = intersectsExtent(layerExtent, frameState.extent);\n        clipped = render && !containsExtent(layerExtent, frameState.extent);\n        if (clipped) {\n          this.clipUnrotated(context, frameState, layerExtent);\n        }\n      }\n      var img = image.getImage();\n      var transform = composeTransform(this.tempTransform, width / 2, height / 2, scaleX, scaleY, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolutionX, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolutionY);\n      this.renderedResolution = imageResolutionY * pixelRatio / imagePixelRatio;\n      var dw = img.width * transform[0];\n      var dh = img.height * transform[3];\n      if (!this.getLayer().getSource().getInterpolate()) {\n        context.imageSmoothingEnabled = false;\n      }\n      this.preRender(context, frameState);\n      if (render && dw >= 0.5 && dh >= 0.5) {\n        var dx = transform[4];\n        var dy = transform[5];\n        var opacity = layerState.opacity;\n        var previousAlpha;\n        if (opacity !== 1) {\n          previousAlpha = context.globalAlpha;\n          context.globalAlpha = opacity;\n        }\n        context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n        if (opacity !== 1) {\n          context.globalAlpha = previousAlpha;\n        }\n      }\n      this.postRender(context, frameState);\n      if (clipped) {\n        context.restore();\n      }\n      context.imageSmoothingEnabled = true;\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n      return this.container;\n    }\n  }]);\n}(CanvasLayerRenderer);\nexport default CanvasImageLayerRenderer;","map":{"version":3,"names":["CanvasLayerRenderer","ImageState","ViewHint","apply","applyTransform","compose","composeTransform","makeInverse","toString","toTransformString","containsCoordinate","containsExtent","getHeight","getIntersection","getWidth","intersects","intersectsExtent","isEmpty","fromUserExtent","CanvasImageLayerRenderer","_CanvasLayerRenderer","imageLayer","_this","_classCallCheck","_callSuper","image_","_inherits","_createClass","key","value","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","pixelRatio","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","extent","undefined","projection","ANIMATING","INTERACTING","image","loadImage","getState","EMPTY","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","Math","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","_ref","Array","isArray","_ref2","_slicedToArray","imageResolutionX","imageResolutionY","imagePixelRatio","getPixelRatio","viewCenter","center","scaleX","scaleY","rotation","round","pixelTransform","size","inversePixelTransform","canvasTransform","useContainer","getBackground","context","canvas","containerReused","clearRect","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","imageSmoothingEnabled","preRender","dx","dy","opacity","previousAlpha","globalAlpha","drawImage","postRender","restore","style","container"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/renderer/canvas/ImageLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection)\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image_.getExtent();\n    const img = this.image_.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    const context = this.context;\n    const canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
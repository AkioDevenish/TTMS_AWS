{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport ol_control_Control from 'ol/control/Control.js';\nimport { unByKey as ol_Observable_unByKey } from 'ol/Observable.js';\nimport ol_style_Style from 'ol/style/Style.js';\nimport ol_style_Fill from 'ol/style/Fill.js';\nimport ol_style_Stroke from 'ol/style/Stroke.js';\nimport ol_style_Text from 'ol/style/Text.js';\nimport ol_ext_getMapCanvas from '../util/getMapCanvas.js';\n\n/**\r\n * @classdesc \r\n *   Attribution Control integrated in the canvas (for jpeg/png export purposes).\r\n * @see http://www.kreidefossilien.de/webgis/dokumentation/beispiele/export-map-to-png-with-scale\r\n *\r\n * @constructor\r\n * @extends {ol_control_Control}\r\n * @param {Object=} options extend the ol.control options. \r\n *  @param {ol_style_Style} options.style style used to draw the title.\r\n */\nvar ol_control_CanvasBase = /*#__PURE__*/function (_ol_control_Control) {\n  function olcontrolCanvasBase(options) {\n    var _this;\n    _classCallCheck(this, olcontrolCanvasBase);\n    options = options || {};\n    _this = _callSuper(this, olcontrolCanvasBase, [options]);\n\n    // Define a style to draw on the canvas\n    _this.setStyle(options.style);\n    return _this;\n  }\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {ol_Map} map Map.\r\n   * @api stable\r\n   */\n  _inherits(olcontrolCanvasBase, _ol_control_Control);\n  return _createClass(olcontrolCanvasBase, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      this.getCanvas(map);\n      var oldmap = this.getMap();\n      if (this._listener) {\n        ol_Observable_unByKey(this._listener);\n        this._listener = null;\n      }\n      _superPropGet(olcontrolCanvasBase, \"setMap\", this, 3)([map]);\n      if (oldmap) {\n        try {\n          oldmap.renderSync();\n        } catch (e) {/* ok */}\n      }\n      if (map) {\n        this._listener = map.on('postcompose', this._draw.bind(this));\n        // Get a canvas layer on top of the map\n      }\n    }\n    /** Get canvas overlay\r\n     */\n  }, {\n    key: \"getCanvas\",\n    value: function getCanvas(map) {\n      return ol_ext_getMapCanvas(map);\n    }\n    /** Get map Canvas\r\n     * @private\r\n     */\n  }, {\n    key: \"getContext\",\n    value: function getContext(e) {\n      var ctx = e.context;\n      if (!ctx && this.getMap()) {\n        var c = this.getMap().getViewport().getElementsByClassName('ol-fixedoverlay')[0];\n        ctx = c ? c.getContext('2d') : null;\n      }\n      return ctx;\n    }\n    /** Set Style\r\n     * @api\r\n     */\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {\n      this._style = style || new ol_style_Style({});\n    }\n    /** Get style\r\n     * @api\r\n     */\n  }, {\n    key: \"getStyle\",\n    value: function getStyle() {\n      return this._style;\n    }\n    /** Get stroke\r\n     * @api\r\n     */\n  }, {\n    key: \"getStroke\",\n    value: function getStroke() {\n      var t = this._style.getStroke();\n      if (!t) this._style.setStroke(new ol_style_Stroke({\n        color: '#000',\n        width: 1.25\n      }));\n      return this._style.getStroke();\n    }\n    /** Get fill\r\n     * @api\r\n     */\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      var t = this._style.getFill();\n      if (!t) this._style.setFill(new ol_style_Fill({\n        color: '#fff'\n      }));\n      return this._style.getFill();\n    }\n    /** Get stroke\r\n     * @api\r\n     */\n  }, {\n    key: \"getTextStroke\",\n    value: function getTextStroke() {\n      var t = this._style.getText();\n      if (!t) t = new ol_style_Text({});\n      if (!t.getStroke()) t.setStroke(new ol_style_Stroke({\n        color: '#fff',\n        width: 3\n      }));\n      return t.getStroke();\n    }\n    /** Get text fill\r\n     * @api\r\n     */\n  }, {\n    key: \"getTextFill\",\n    value: function getTextFill() {\n      var t = this._style.getText();\n      if (!t) t = new ol_style_Text({});\n      if (!t.getFill()) t.setFill(new ol_style_Fill({\n        color: '#fff'\n      }));\n      return t.getFill();\n    }\n    /** Get text font\r\n     * @api\r\n     */\n  }, {\n    key: \"getTextFont\",\n    value: function getTextFont() {\n      var t = this._style.getText();\n      if (!t) t = new ol_style_Text({});\n      if (!t.getFont()) t.setFont('12px sans-serif');\n      return t.getFont();\n    }\n    /** Draw the control on canvas\r\n     * @protected\r\n     */\n  }, {\n    key: \"_draw\",\n    value: function _draw(/* e */\n    ) {\n      console.warn('[CanvasBase] draw function not implemented.');\n    }\n  }]);\n}(ol_control_Control);\nexport default ol_control_CanvasBase;","map":{"version":3,"names":["ol_control_Control","unByKey","ol_Observable_unByKey","ol_style_Style","ol_style_Fill","ol_style_Stroke","ol_style_Text","ol_ext_getMapCanvas","ol_control_CanvasBase","_ol_control_Control","olcontrolCanvasBase","options","_this","_classCallCheck","_callSuper","setStyle","style","_inherits","_createClass","key","value","setMap","map","getCanvas","oldmap","getMap","_listener","_superPropGet","renderSync","e","on","_draw","bind","getContext","ctx","context","c","getViewport","getElementsByClassName","_style","getStyle","getStroke","t","setStroke","color","width","getFill","setFill","getTextStroke","getText","getTextFill","getTextFont","getFont","setFont","console","warn"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol-ext/control/CanvasBase.js"],"sourcesContent":["import ol_control_Control from 'ol/control/Control.js'\r\nimport {unByKey as ol_Observable_unByKey} from 'ol/Observable.js'\r\nimport ol_style_Style from 'ol/style/Style.js'\r\nimport ol_style_Fill from 'ol/style/Fill.js'\r\nimport ol_style_Stroke from 'ol/style/Stroke.js'\r\nimport ol_style_Text from 'ol/style/Text.js'\r\nimport ol_ext_getMapCanvas from '../util/getMapCanvas.js'\r\n\r\n/**\r\n * @classdesc \r\n *   Attribution Control integrated in the canvas (for jpeg/png export purposes).\r\n * @see http://www.kreidefossilien.de/webgis/dokumentation/beispiele/export-map-to-png-with-scale\r\n *\r\n * @constructor\r\n * @extends {ol_control_Control}\r\n * @param {Object=} options extend the ol.control options. \r\n *  @param {ol_style_Style} options.style style used to draw the title.\r\n */\r\nvar ol_control_CanvasBase = class olcontrolCanvasBase extends ol_control_Control {\r\n  constructor(options) {\r\n    options = options || {}\r\n    super(options)\r\n\r\n    // Define a style to draw on the canvas\r\n    this.setStyle(options.style)\r\n\r\n  }\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {ol_Map} map Map.\r\n   * @api stable\r\n   */\r\n  setMap(map) {\r\n    this.getCanvas(map)\r\n\r\n    var oldmap = this.getMap()\r\n    if (this._listener) {\r\n      ol_Observable_unByKey(this._listener)\r\n      this._listener = null\r\n    }\r\n\r\n    super.setMap(map)\r\n    if (oldmap) {\r\n      try { oldmap.renderSync()}  catch (e) { /* ok */ }\r\n    }\r\n\r\n    if (map) {\r\n      this._listener = map.on('postcompose', this._draw.bind(this))\r\n      // Get a canvas layer on top of the map\r\n    }\r\n  }\r\n  /** Get canvas overlay\r\n   */\r\n  getCanvas(map) {\r\n    return ol_ext_getMapCanvas(map)\r\n  }\r\n  /** Get map Canvas\r\n   * @private\r\n   */\r\n  getContext(e) {\r\n    var ctx = e.context\r\n    if (!ctx && this.getMap()) {\r\n      var c = this.getMap().getViewport().getElementsByClassName('ol-fixedoverlay')[0]\r\n      ctx = c ? c.getContext('2d') : null\r\n    }\r\n    return ctx\r\n  }\r\n  /** Set Style\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this._style = style || new ol_style_Style({})\r\n  }\r\n  /** Get style\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this._style\r\n  }\r\n  /** Get stroke\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    var t = this._style.getStroke()\r\n    if (!t)\r\n      this._style.setStroke(new ol_style_Stroke({ color: '#000', width: 1.25 }))\r\n    return this._style.getStroke()\r\n  }\r\n  /** Get fill\r\n   * @api\r\n   */\r\n  getFill() {\r\n    var t = this._style.getFill()\r\n    if (!t)\r\n      this._style.setFill(new ol_style_Fill({ color: '#fff' }))\r\n    return this._style.getFill()\r\n  }\r\n  /** Get stroke\r\n   * @api\r\n   */\r\n  getTextStroke() {\r\n    var t = this._style.getText()\r\n    if (!t)\r\n      t = new ol_style_Text({})\r\n    if (!t.getStroke())\r\n      t.setStroke(new ol_style_Stroke({ color: '#fff', width: 3 }))\r\n    return t.getStroke()\r\n  }\r\n  /** Get text fill\r\n   * @api\r\n   */\r\n  getTextFill() {\r\n    var t = this._style.getText()\r\n    if (!t)\r\n      t = new ol_style_Text({})\r\n    if (!t.getFill())\r\n      t.setFill(new ol_style_Fill({ color: '#fff' }))\r\n    return t.getFill()\r\n  }\r\n  /** Get text font\r\n   * @api\r\n   */\r\n  getTextFont() {\r\n    var t = this._style.getText()\r\n    if (!t)\r\n      t = new ol_style_Text({})\r\n    if (!t.getFont())\r\n      t.setFont('12px sans-serif')\r\n    return t.getFont()\r\n  }\r\n  /** Draw the control on canvas\r\n   * @protected\r\n   */\r\n  _draw( /* e */) {\r\n    console.warn('[CanvasBase] draw function not implemented.')\r\n  }\r\n}\r\n\r\nexport default ol_control_CanvasBase\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _objectSpread from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @module ol/renderer/webgl/VectorLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport MixedGeometryBatch from '../../render/webgl/MixedGeometryBatch.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, setFromArray as setFromTransform, translate as translateTransform } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport { colorDecodeId } from '../../render/webgl/utils.js';\nimport { create as createMat4, fromTransform as mat4FromTransform } from '../../vec/mat4.js';\nimport { getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getWorldParameters } from './worldUtil.js';\nimport { listen, unlistenByKey } from '../../events.js';\nexport var Uniforms = _objectSpread(_objectSpread({}, DefaultUniform), {}, {\n  RENDER_EXTENT: 'u_renderExtent',\n  // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  GLOBAL_ALPHA: 'u_globalAlpha'\n});\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').VectorStyle} VectorStyle\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {VectorStyle|Array<VectorStyle>} style Vector style as literal style or shaders; can also accept an array of styles\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Experimental WebGL vector renderer. Supports polygons, lines and points:\n *  * Polygons are broken down into triangles\n *  * Lines are rendered as strips of quads\n *  * Points are rendered as quads\n *\n * You need to provide vertex and fragment shaders as well as custom attributes for each type of geometry. All shaders\n * can access the uniforms in the {@link module:ol/webgl/Helper~DefaultUniform} enum.\n * The vertex shaders can access the following attributes depending on the geometry type:\n *  * For polygons: {@link module:ol/render/webgl/PolygonBatchRenderer~Attributes}\n *  * For line strings: {@link module:ol/render/webgl/LineStringBatchRenderer~Attributes}\n *  * For points: {@link module:ol/render/webgl/PointBatchRenderer~Attributes}\n *\n * Please note that the fragment shaders output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Note: this uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n */\nvar WebGLVectorLayerRenderer = /*#__PURE__*/function (_WebGLLayerRenderer) {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  function WebGLVectorLayerRenderer(layer, options) {\n    var _this;\n    _classCallCheck(this, WebGLVectorLayerRenderer);\n    var uniforms = _defineProperty(_defineProperty(_defineProperty({}, Uniforms.RENDER_EXTENT, [0, 0, 0, 0]), Uniforms.PATTERN_ORIGIN, [0, 0]), Uniforms.GLOBAL_ALPHA, 1);\n    _this = _callSuper(this, WebGLVectorLayerRenderer, [layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    }]);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    _this.hitRenderTarget_;\n    _this.sourceRevision_ = -1;\n    _this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    _this.currentTransform_ = createTransform();\n    _this.tmpCoords_ = [0, 0];\n    _this.tmpTransform_ = createTransform();\n    _this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    _this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @type {Array<VectorStyle>}\n     * @private\n     */\n    _this.styles_ = [];\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    _this.styleRenderers_ = [];\n\n    /**\n     * @type {Array<import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers>}\n     * @private\n     */\n    _this.buffers_ = [];\n    _this.applyOptions_(options);\n\n    /**\n     * @private\n     */\n    _this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.initialFeaturesAdded_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../events.js\").EventsKey|null>}\n     */\n    _this.sourceListenKeys_ = null;\n    return _this;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  _inherits(WebGLVectorLayerRenderer, _WebGLLayerRenderer);\n  return _createClass(WebGLVectorLayerRenderer, [{\n    key: \"addInitialFeatures_\",\n    value: function addInitialFeatures_(frameState) {\n      var source = this.getLayer().getSource();\n      var userProjection = getUserProjection();\n      var projectionTransform;\n      if (userProjection) {\n        projectionTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n      }\n      this.batch_.addFeatures(source.getFeatures(), projectionTransform);\n      this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, this.handleSourceFeatureAdded_.bind(this, projectionTransform), this), listen(source, VectorEventType.CHANGEFEATURE, this.handleSourceFeatureChanged_, this), listen(source, VectorEventType.REMOVEFEATURE, this.handleSourceFeatureDelete_, this), listen(source, VectorEventType.CLEAR, this.handleSourceFeatureClear_, this)];\n    }\n\n    /**\n     * @param {Options} options Options.\n     * @private\n     */\n  }, {\n    key: \"applyOptions_\",\n    value: function applyOptions_(options) {\n      this.styles_ = Array.isArray(options.style) ? options.style : [options.style];\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"createRenderers_\",\n    value: function createRenderers_() {\n      var _this2 = this;\n      this.buffers_ = [];\n      this.styleRenderers_ = this.styles_.map(function (style) {\n        return new VectorStyleRenderer(style, _this2.helper, _this2.hitDetectionEnabled_);\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(options) {\n      this.applyOptions_(options);\n      if (this.helper) {\n        this.createRenderers_();\n      }\n      _superPropGet(WebGLVectorLayerRenderer, \"reset\", this, 3)([options]);\n    }\n  }, {\n    key: \"afterHelperCreated\",\n    value: function afterHelperCreated() {\n      this.createRenderers_();\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n      }\n    }\n\n    /**\n     * @param {import(\"../../proj.js\").TransformFunction} projectionTransform Transform function.\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleSourceFeatureAdded_\",\n    value: function handleSourceFeatureAdded_(projectionTransform, event) {\n      var feature = event.feature;\n      this.batch_.addFeature(feature, projectionTransform);\n    }\n\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleSourceFeatureChanged_\",\n    value: function handleSourceFeatureChanged_(event) {\n      var feature = event.feature;\n      this.batch_.changeFeature(feature);\n    }\n\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleSourceFeatureDelete_\",\n    value: function handleSourceFeatureDelete_(event) {\n      var feature = event.feature;\n      this.batch_.removeFeature(feature);\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourceFeatureClear_\",\n    value: function handleSourceFeatureClear_() {\n      this.batch_.clear();\n    }\n\n    /**\n     * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which geometries are expressed\n     * @private\n     */\n  }, {\n    key: \"applyUniforms_\",\n    value: function applyUniforms_(batchInvertTransform) {\n      // world to screen matrix\n      setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n      multiplyTransform(this.tmpTransform_, batchInvertTransform);\n      this.helper.setUniformMatrixValue(Uniforms.PROJECTION_MATRIX, mat4FromTransform(this.tmpMat4_, this.tmpTransform_));\n\n      // screen to world matrix\n      makeInverseTransform(this.tmpTransform_, this.tmpTransform_);\n      this.helper.setUniformMatrixValue(Uniforms.SCREEN_TO_WORLD_MATRIX, mat4FromTransform(this.tmpMat4_, this.tmpTransform_));\n\n      // pattern origin should always be [0, 0] in world coordinates\n      this.tmpCoords_[0] = 0;\n      this.tmpCoords_[1] = 0;\n      makeInverseTransform(this.tmpTransform_, batchInvertTransform);\n      applyTransform(this.tmpTransform_, this.tmpCoords_);\n      this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN, this.tmpCoords_);\n    }\n\n    /**\n     * Render the layer.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frameState) {\n      var gl = this.helper.getGL();\n      this.preRender(gl, frameState);\n      var _getWorldParameters = getWorldParameters(frameState, this.getLayer()),\n        _getWorldParameters2 = _slicedToArray(_getWorldParameters, 3),\n        startWorld = _getWorldParameters2[0],\n        endWorld = _getWorldParameters2[1],\n        worldWidth = _getWorldParameters2[2];\n\n      // draw the normal canvas\n      this.helper.prepareDraw(frameState);\n      this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n      this.helper.finalizeDraw(frameState);\n      var canvas = this.helper.getCanvas();\n      var layerState = frameState.layerStatesArray[frameState.layerIndex];\n      var opacity = layerState.opacity;\n      if (opacity !== parseFloat(canvas.style.opacity)) {\n        canvas.style.opacity = String(opacity);\n      }\n      if (this.hitDetectionEnabled_) {\n        this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n        this.hitRenderTarget_.clearCachedData();\n      }\n      this.postRender(gl, frameState);\n      return canvas;\n    }\n\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n  }, {\n    key: \"prepareFrameInternal\",\n    value: function prepareFrameInternal(frameState) {\n      var _this3 = this;\n      if (!this.initialFeaturesAdded_) {\n        this.addInitialFeatures_(frameState);\n        this.initialFeaturesAdded_ = true;\n      }\n      var layer = this.getLayer();\n      var vectorSource = layer.getSource();\n      var viewState = frameState.viewState;\n      var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n      var extentChanged = !equals(this.previousExtent_, frameState.extent);\n      var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n      if (sourceChanged) {\n        this.sourceRevision_ = vectorSource.getRevision();\n      }\n      if (viewNotMoving && (extentChanged || sourceChanged)) {\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n        var extent = buffer(frameState.extent, renderBuffer * resolution);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          vectorSource.loadFeatures(toUserExtent(extent, userProjection), toUserResolution(resolution, projection), userProjection);\n        } else {\n          vectorSource.loadFeatures(extent, resolution, projection);\n        }\n        this.ready = false;\n        var transform = this.helper.makeProjectionTransform(frameState, createTransform());\n        var generatePromises = this.styleRenderers_.map(function (renderer, i) {\n          return renderer.generateBuffers(_this3.batch_, transform).then(function (buffers) {\n            _this3.buffers_[i] = buffers;\n          });\n        });\n        Promise.all(generatePromises).then(function () {\n          _this3.ready = true;\n          _this3.getLayer().changed();\n        });\n        this.previousExtent_ = frameState.extent.slice();\n      }\n      return true;\n    }\n\n    /**\n     * Render the world, either to the main framebuffer or to the hit framebuffer\n     * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n     * @param {boolean} forHitDetection whether the rendering is for hit detection\n     * @param {number} startWorld the world to render in the first iteration\n     * @param {number} endWorld the last world to render\n     * @param {number} worldWidth the width of the worlds being rendered\n     */\n  }, {\n    key: \"renderWorlds\",\n    value: function renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n      var _this4 = this;\n      var world = startWorld;\n      if (forHitDetection) {\n        this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n        this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n      }\n      this.currentFrameStateTransform_ = this.helper.makeProjectionTransform(frameState, this.currentFrameStateTransform_);\n      do {\n        var _loop = function _loop() {\n          var renderer = _this4.styleRenderers_[i];\n          var buffers = _this4.buffers_[i];\n          if (!buffers) {\n            return 1; // continue\n          }\n          renderer.render(buffers, frameState, function () {\n            _this4.applyUniforms_(buffers.invertVerticesTransform);\n            _this4.helper.applyHitDetectionUniform(forHitDetection);\n          });\n        };\n        for (var i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n          if (_loop()) continue;\n        }\n        translateTransform(this.currentFrameStateTransform_, worldWidth, 0);\n      } while (++world < endWorld);\n    }\n\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n  }, {\n    key: \"forEachFeatureAtCoordinate\",\n    value: function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n      assert(this.hitDetectionEnabled_, '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.');\n      if (!this.styleRenderers_.length || !this.hitDetectionEnabled_) {\n        return undefined;\n      }\n      var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n      var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n      var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n      var ref = colorDecodeId(color);\n      var feature = this.batch_.getFeatureFromRef(ref);\n      if (feature) {\n        return callback(feature, this.getLayer(), null);\n      }\n      return undefined;\n    }\n\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.sourceListenKeys_) {\n        this.sourceListenKeys_.forEach(function (key) {\n          unlistenByKey(key);\n        });\n        this.sourceListenKeys_ = null;\n      }\n      _superPropGet(WebGLVectorLayerRenderer, \"disposeInternal\", this, 3)([]);\n    }\n  }]);\n}(WebGLLayerRenderer);\nexport default WebGLVectorLayerRenderer;","map":{"version":3,"names":["BaseVector","MixedGeometryBatch","VectorEventType","VectorStyleRenderer","ViewHint","WebGLLayerRenderer","WebGLRenderTarget","DefaultUniform","apply","applyTransform","create","createTransform","makeInverse","makeInverseTransform","multiply","multiplyTransform","setFromArray","setFromTransform","translate","translateTransform","assert","buffer","createEmpty","equals","colorDecodeId","createMat4","fromTransform","mat4FromTransform","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getWorldParameters","listen","unlistenByKey","Uniforms","_objectSpread","RENDER_EXTENT","PATTERN_ORIGIN","GLOBAL_ALPHA","WebGLVectorLayerRenderer","_WebGLLayerRenderer","layer","options","_this","_classCallCheck","uniforms","_defineProperty","_callSuper","postProcesses","hitDetectionEnabled_","disableHitDetection","hitRenderTarget_","sourceRevision_","previousExtent_","currentTransform_","tmpCoords_","tmpTransform_","tmpMat4_","currentFrameStateTransform_","styles_","styleRenderers_","buffers_","applyOptions_","batch_","initialFeaturesAdded_","sourceListenKeys_","_inherits","_createClass","key","value","addInitialFeatures_","frameState","source","getLayer","getSource","userProjection","projectionTransform","viewState","projection","addFeatures","getFeatures","ADDFEATURE","handleSourceFeatureAdded_","bind","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","Array","isArray","style","createRenderers_","_this2","map","helper","reset","_superPropGet","afterHelperCreated","event","feature","addFeature","changeFeature","removeFeature","clear","applyUniforms_","batchInvertTransform","setUniformMatrixValue","PROJECTION_MATRIX","SCREEN_TO_WORLD_MATRIX","setUniformFloatVec2","renderFrame","gl","getGL","preRender","_getWorldParameters","_getWorldParameters2","_slicedToArray","startWorld","endWorld","worldWidth","prepareDraw","renderWorlds","finalizeDraw","canvas","getCanvas","layerState","layerStatesArray","layerIndex","opacity","parseFloat","String","clearCachedData","postRender","prepareFrameInternal","_this3","vectorSource","viewNotMoving","viewHints","ANIMATING","INTERACTING","extentChanged","extent","sourceChanged","getRevision","resolution","renderBuffer","getRenderBuffer","loadFeatures","ready","transform","makeProjectionTransform","generatePromises","renderer","i","generateBuffers","then","buffers","Promise","all","changed","slice","forHitDetection","_this4","world","setSize","Math","floor","size","prepareDrawToRenderTarget","_loop","render","invertVerticesTransform","applyHitDetectionUniform","ii","length","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","undefined","pixel","coordinateToPixelTransform","data","readPixel","color","ref","getFeatureFromRef","disposeInternal","forEach"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/renderer/webgl/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/VectorLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport MixedGeometryBatch from '../../render/webgl/MixedGeometryBatch.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {DefaultUniform} from '../../webgl/Helper.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  setFromArray as setFromTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {assert} from '../../asserts.js';\nimport {buffer, createEmpty, equals} from '../../extent.js';\nimport {colorDecodeId} from '../../render/webgl/utils.js';\nimport {\n  create as createMat4,\n  fromTransform as mat4FromTransform,\n} from '../../vec/mat4.js';\nimport {\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getWorldParameters} from './worldUtil.js';\nimport {listen, unlistenByKey} from '../../events.js';\n\nexport const Uniforms = {\n  ...DefaultUniform,\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n};\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').VectorStyle} VectorStyle\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {VectorStyle|Array<VectorStyle>} style Vector style as literal style or shaders; can also accept an array of styles\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Experimental WebGL vector renderer. Supports polygons, lines and points:\n *  * Polygons are broken down into triangles\n *  * Lines are rendered as strips of quads\n *  * Points are rendered as quads\n *\n * You need to provide vertex and fragment shaders as well as custom attributes for each type of geometry. All shaders\n * can access the uniforms in the {@link module:ol/webgl/Helper~DefaultUniform} enum.\n * The vertex shaders can access the following attributes depending on the geometry type:\n *  * For polygons: {@link module:ol/render/webgl/PolygonBatchRenderer~Attributes}\n *  * For line strings: {@link module:ol/render/webgl/LineStringBatchRenderer~Attributes}\n *  * For points: {@link module:ol/render/webgl/PointBatchRenderer~Attributes}\n *\n * Please note that the fragment shaders output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Note: this uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n */\nclass WebGLVectorLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = {\n      [Uniforms.RENDER_EXTENT]: [0, 0, 0, 0],\n      [Uniforms.PATTERN_ORIGIN]: [0, 0],\n      [Uniforms.GLOBAL_ALPHA]: 1,\n    };\n\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    this.sourceRevision_ = -1;\n\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = createTransform();\n\n    this.tmpCoords_ = [0, 0];\n    this.tmpTransform_ = createTransform();\n    this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @type {Array<VectorStyle>}\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    this.styleRenderers_ = [];\n\n    /**\n     * @type {Array<import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers>}\n     * @private\n     */\n    this.buffers_ = [];\n\n    this.applyOptions_(options);\n\n    /**\n     * @private\n     */\n    this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.initialFeaturesAdded_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../events.js\").EventsKey|null>}\n     */\n    this.sourceListenKeys_ = null;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  addInitialFeatures_(frameState) {\n    const source = this.getLayer().getSource();\n    const userProjection = getUserProjection();\n    let projectionTransform;\n    if (userProjection) {\n      projectionTransform = getTransformFromProjections(\n        userProjection,\n        frameState.viewState.projection\n      );\n    }\n    this.batch_.addFeatures(source.getFeatures(), projectionTransform);\n    this.sourceListenKeys_ = [\n      listen(\n        source,\n        VectorEventType.ADDFEATURE,\n        this.handleSourceFeatureAdded_.bind(this, projectionTransform),\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CHANGEFEATURE,\n        this.handleSourceFeatureChanged_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceFeatureDelete_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CLEAR,\n        this.handleSourceFeatureClear_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @private\n   */\n  applyOptions_(options) {\n    this.styles_ = Array.isArray(options.style)\n      ? options.style\n      : [options.style];\n  }\n\n  /**\n   * @private\n   */\n  createRenderers_() {\n    this.buffers_ = [];\n    this.styleRenderers_ = this.styles_.map(\n      (style) =>\n        new VectorStyleRenderer(style, this.helper, this.hitDetectionEnabled_)\n    );\n  }\n\n  reset(options) {\n    this.applyOptions_(options);\n    if (this.helper) {\n      this.createRenderers_();\n    }\n    super.reset(options);\n  }\n\n  afterHelperCreated() {\n    this.createRenderers_();\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../proj.js\").TransformFunction} projectionTransform Transform function.\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(projectionTransform, event) {\n    const feature = event.feature;\n    this.batch_.addFeature(feature, projectionTransform);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.batch_.changeFeature(feature);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    this.batch_.removeFeature(feature);\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.batch_.clear();\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which geometries are expressed\n   * @private\n   */\n  applyUniforms_(batchInvertTransform) {\n    // world to screen matrix\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_)\n    );\n\n    // screen to world matrix\n    makeInverseTransform(this.tmpTransform_, this.tmpTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_)\n    );\n\n    // pattern origin should always be [0, 0] in world coordinates\n    this.tmpCoords_[0] = 0;\n    this.tmpCoords_[1] = 0;\n    makeInverseTransform(this.tmpTransform_, batchInvertTransform);\n    applyTransform(this.tmpTransform_, this.tmpCoords_);\n    this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN, this.tmpCoords_);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(\n      frameState,\n      this.getLayer()\n    );\n\n    // draw the normal canvas\n    this.helper.prepareDraw(frameState);\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(frameState);\n\n    const canvas = this.helper.getCanvas();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const opacity = layerState.opacity;\n    if (opacity !== parseFloat(canvas.style.opacity)) {\n      canvas.style.opacity = String(opacity);\n    }\n\n    if (this.hitDetectionEnabled_) {\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.initialFeaturesAdded_) {\n      this.addInitialFeatures_(frameState);\n      this.initialFeaturesAdded_ = true;\n    }\n\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving =\n      !frameState.viewHints[ViewHint.ANIMATING] &&\n      !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n\n      const renderBuffer =\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        vectorSource.loadFeatures(\n          toUserExtent(extent, userProjection),\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      } else {\n        vectorSource.loadFeatures(extent, resolution, projection);\n      }\n\n      this.ready = false;\n\n      const transform = this.helper.makeProjectionTransform(\n        frameState,\n        createTransform()\n      );\n\n      const generatePromises = this.styleRenderers_.map((renderer, i) =>\n        renderer.generateBuffers(this.batch_, transform).then((buffers) => {\n          this.buffers_[i] = buffers;\n        })\n      );\n      Promise.all(generatePromises).then(() => {\n        this.ready = true;\n        this.getLayer().changed();\n      });\n\n      this.previousExtent_ = frameState.extent.slice();\n    }\n\n    return true;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([\n        Math.floor(frameState.size[0] / 2),\n        Math.floor(frameState.size[1] / 2),\n      ]);\n      this.helper.prepareDrawToRenderTarget(\n        frameState,\n        this.hitRenderTarget_,\n        true\n      );\n    }\n\n    this.currentFrameStateTransform_ = this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_\n    );\n\n    do {\n      for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n        const renderer = this.styleRenderers_[i];\n        const buffers = this.buffers_[i];\n        if (!buffers) {\n          continue;\n        }\n        renderer.render(buffers, frameState, () => {\n          this.applyUniforms_(buffers.invertVerticesTransform);\n          this.helper.applyHitDetectionUniform(forHitDetection);\n        });\n      }\n      translateTransform(this.currentFrameStateTransform_, worldWidth, 0);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    assert(\n      this.hitDetectionEnabled_,\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.'\n    );\n    if (!this.styleRenderers_.length || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n\n    const pixel = applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice()\n    );\n\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const ref = colorDecodeId(color);\n    const feature = this.batch_.getFeatureFromRef(ref);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.sourceListenKeys_) {\n      this.sourceListenKeys_.forEach(function (key) {\n        unlistenByKey(key);\n      });\n      this.sourceListenKeys_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLVectorLayerRenderer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,2BAA2B;AAClD,OAAOC,kBAAkB,MAAM,0CAA0C;AACzE,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,mBAAmB,MAAM,2CAA2C;AAC3E,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,kBAAkB,MAAM,YAAY;AAC3C,OAAOC,iBAAiB,MAAM,6BAA6B;AAC3D,SAAQC,cAAc,QAAO,uBAAuB;AACpD,SACEC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,EACzBC,WAAW,IAAIC,oBAAoB,EACnCC,QAAQ,IAAIC,iBAAiB,EAC7BC,YAAY,IAAIC,gBAAgB,EAChCC,SAAS,IAAIC,kBAAkB,QAC1B,oBAAoB;AAC3B,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,EAAEC,WAAW,EAAEC,MAAM,QAAO,iBAAiB;AAC3D,SAAQC,aAAa,QAAO,6BAA6B;AACzD,SACEd,MAAM,IAAIe,UAAU,EACpBC,aAAa,IAAIC,iBAAiB,QAC7B,mBAAmB;AAC1B,SACEC,2BAA2B,EAC3BC,iBAAiB,EACjBC,YAAY,EACZC,gBAAgB,QACX,eAAe;AACtB,SAAQC,kBAAkB,QAAO,gBAAgB;AACjD,SAAQC,MAAM,EAAEC,aAAa,QAAO,iBAAiB;AAErD,OAAO,IAAMC,QAAQ,GAAAC,aAAA,CAAAA,aAAA,KAChB7B,cAAc;EACjB8B,aAAa,EAAE,gBAAgB;EAAE;EACjCC,cAAc,EAAE,iBAAiB;EACjCC,YAAY,EAAE;AAAe,EAC9B;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,IAkBMC,wBAAwB,0BAAAC,mBAAA;EAC5B;AACF;AACA;AACA;EACE,SAAAD,yBAAYE,KAAK,EAAEC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,wBAAA;IAC1B,IAAMM,QAAQ,GAAAC,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACXZ,QAAQ,CAACE,aAAa,EAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GACrCF,QAAQ,CAACG,cAAc,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAChCH,QAAQ,CAACI,YAAY,EAAG,CAAC,CAC3B;IAEDK,KAAA,GAAAI,UAAA,OAAAR,wBAAA,GAAME,KAAK,EAAE;MACXI,QAAQ,EAAEA,QAAQ;MAClBG,aAAa,EAAEN,OAAO,CAACM;IACzB,CAAC;;IAED;AACJ;AACA;AACA;IACIL,KAAA,CAAKM,oBAAoB,GAAG,CAACP,OAAO,CAACQ,mBAAmB;;IAExD;AACJ;AACA;AACA;IACIP,KAAA,CAAKQ,gBAAgB;IAErBR,KAAA,CAAKS,eAAe,GAAG,CAAC,CAAC;IAEzBT,KAAA,CAAKU,eAAe,GAAGhC,WAAW,CAAC,CAAC;;IAEpC;AACJ;AACA;AACA;AACA;AACA;AACA;IACIsB,KAAA,CAAKW,iBAAiB,GAAG5C,eAAe,CAAC,CAAC;IAE1CiC,KAAA,CAAKY,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACxBZ,KAAA,CAAKa,aAAa,GAAG9C,eAAe,CAAC,CAAC;IACtCiC,KAAA,CAAKc,QAAQ,GAAGjC,UAAU,CAAC,CAAC;;IAE5B;AACJ;AACA;AACA;IACImB,KAAA,CAAKe,2BAA2B,GAAGhD,eAAe,CAAC,CAAC;;IAEpD;AACJ;AACA;AACA;IACIiC,KAAA,CAAKgB,OAAO,GAAG,EAAE;;IAEjB;AACJ;AACA;AACA;IACIhB,KAAA,CAAKiB,eAAe,GAAG,EAAE;;IAEzB;AACJ;AACA;AACA;IACIjB,KAAA,CAAKkB,QAAQ,GAAG,EAAE;IAElBlB,KAAA,CAAKmB,aAAa,CAACpB,OAAO,CAAC;;IAE3B;AACJ;AACA;IACIC,KAAA,CAAKoB,MAAM,GAAG,IAAI/D,kBAAkB,CAAC,CAAC;;IAEtC;AACJ;AACA;AACA;IACI2C,KAAA,CAAKqB,qBAAqB,GAAG,KAAK;;IAElC;AACJ;AACA;AACA;IACIrB,KAAA,CAAKsB,iBAAiB,GAAG,IAAI;IAAC,OAAAtB,KAAA;EAChC;;EAEA;AACF;AACA;AACA;EAHEuB,SAAA,CAAA3B,wBAAA,EAAAC,mBAAA;EAAA,OAAA2B,YAAA,CAAA5B,wBAAA;IAAA6B,GAAA;IAAAC,KAAA,EAIA,SAAAC,mBAAmBA,CAACC,UAAU,EAAE;MAC9B,IAAMC,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;MAC1C,IAAMC,cAAc,GAAG/C,iBAAiB,CAAC,CAAC;MAC1C,IAAIgD,mBAAmB;MACvB,IAAID,cAAc,EAAE;QAClBC,mBAAmB,GAAGjD,2BAA2B,CAC/CgD,cAAc,EACdJ,UAAU,CAACM,SAAS,CAACC,UACvB,CAAC;MACH;MACA,IAAI,CAACf,MAAM,CAACgB,WAAW,CAACP,MAAM,CAACQ,WAAW,CAAC,CAAC,EAAEJ,mBAAmB,CAAC;MAClE,IAAI,CAACX,iBAAiB,GAAG,CACvBjC,MAAM,CACJwC,MAAM,EACNvE,eAAe,CAACgF,UAAU,EAC1B,IAAI,CAACC,yBAAyB,CAACC,IAAI,CAAC,IAAI,EAAEP,mBAAmB,CAAC,EAC9D,IACF,CAAC,EACD5C,MAAM,CACJwC,MAAM,EACNvE,eAAe,CAACmF,aAAa,EAC7B,IAAI,CAACC,2BAA2B,EAChC,IACF,CAAC,EACDrD,MAAM,CACJwC,MAAM,EACNvE,eAAe,CAACqF,aAAa,EAC7B,IAAI,CAACC,0BAA0B,EAC/B,IACF,CAAC,EACDvD,MAAM,CACJwC,MAAM,EACNvE,eAAe,CAACuF,KAAK,EACrB,IAAI,CAACC,yBAAyB,EAC9B,IACF,CAAC,CACF;IACH;;IAEA;AACF;AACA;AACA;EAHE;IAAArB,GAAA;IAAAC,KAAA,EAIA,SAAAP,aAAaA,CAACpB,OAAO,EAAE;MACrB,IAAI,CAACiB,OAAO,GAAG+B,KAAK,CAACC,OAAO,CAACjD,OAAO,CAACkD,KAAK,CAAC,GACvClD,OAAO,CAACkD,KAAK,GACb,CAAClD,OAAO,CAACkD,KAAK,CAAC;IACrB;;IAEA;AACF;AACA;EAFE;IAAAxB,GAAA;IAAAC,KAAA,EAGA,SAAAwB,gBAAgBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MACjB,IAAI,CAACjC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACD,eAAe,GAAG,IAAI,CAACD,OAAO,CAACoC,GAAG,CACrC,UAACH,KAAK;QAAA,OACJ,IAAI1F,mBAAmB,CAAC0F,KAAK,EAAEE,MAAI,CAACE,MAAM,EAAEF,MAAI,CAAC7C,oBAAoB,CAAC;MAAA,CAC1E,CAAC;IACH;EAAC;IAAAmB,GAAA;IAAAC,KAAA,EAED,SAAA4B,KAAKA,CAACvD,OAAO,EAAE;MACb,IAAI,CAACoB,aAAa,CAACpB,OAAO,CAAC;MAC3B,IAAI,IAAI,CAACsD,MAAM,EAAE;QACf,IAAI,CAACH,gBAAgB,CAAC,CAAC;MACzB;MACAK,aAAA,CAAA3D,wBAAA,qBAAYG,OAAO;IACrB;EAAC;IAAA0B,GAAA;IAAAC,KAAA,EAED,SAAA8B,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAACN,gBAAgB,CAAC,CAAC;MACvB,IAAI,IAAI,CAAC5C,oBAAoB,EAAE;QAC7B,IAAI,CAACE,gBAAgB,GAAG,IAAI9C,iBAAiB,CAAC,IAAI,CAAC2F,MAAM,CAAC;MAC5D;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA5B,GAAA;IAAAC,KAAA,EAKA,SAAAa,yBAAyBA,CAACN,mBAAmB,EAAEwB,KAAK,EAAE;MACpD,IAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAC7B,IAAI,CAACtC,MAAM,CAACuC,UAAU,CAACD,OAAO,EAAEzB,mBAAmB,CAAC;IACtD;;IAEA;AACF;AACA;AACA;EAHE;IAAAR,GAAA;IAAAC,KAAA,EAIA,SAAAgB,2BAA2BA,CAACe,KAAK,EAAE;MACjC,IAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAC7B,IAAI,CAACtC,MAAM,CAACwC,aAAa,CAACF,OAAO,CAAC;IACpC;;IAEA;AACF;AACA;AACA;EAHE;IAAAjC,GAAA;IAAAC,KAAA,EAIA,SAAAkB,0BAA0BA,CAACa,KAAK,EAAE;MAChC,IAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAC7B,IAAI,CAACtC,MAAM,CAACyC,aAAa,CAACH,OAAO,CAAC;IACpC;;IAEA;AACF;AACA;EAFE;IAAAjC,GAAA;IAAAC,KAAA,EAGA,SAAAoB,yBAAyBA,CAAA,EAAG;MAC1B,IAAI,CAAC1B,MAAM,CAAC0C,KAAK,CAAC,CAAC;IACrB;;IAEA;AACF;AACA;AACA;EAHE;IAAArC,GAAA;IAAAC,KAAA,EAIA,SAAAqC,cAAcA,CAACC,oBAAoB,EAAE;MACnC;MACA3F,gBAAgB,CAAC,IAAI,CAACwC,aAAa,EAAE,IAAI,CAACE,2BAA2B,CAAC;MACtE5C,iBAAiB,CAAC,IAAI,CAAC0C,aAAa,EAAEmD,oBAAoB,CAAC;MAC3D,IAAI,CAACX,MAAM,CAACY,qBAAqB,CAC/B1E,QAAQ,CAAC2E,iBAAiB,EAC1BnF,iBAAiB,CAAC,IAAI,CAAC+B,QAAQ,EAAE,IAAI,CAACD,aAAa,CACrD,CAAC;;MAED;MACA5C,oBAAoB,CAAC,IAAI,CAAC4C,aAAa,EAAE,IAAI,CAACA,aAAa,CAAC;MAC5D,IAAI,CAACwC,MAAM,CAACY,qBAAqB,CAC/B1E,QAAQ,CAAC4E,sBAAsB,EAC/BpF,iBAAiB,CAAC,IAAI,CAAC+B,QAAQ,EAAE,IAAI,CAACD,aAAa,CACrD,CAAC;;MAED;MACA,IAAI,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC;MACtB,IAAI,CAACA,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC;MACtB3C,oBAAoB,CAAC,IAAI,CAAC4C,aAAa,EAAEmD,oBAAoB,CAAC;MAC9DnG,cAAc,CAAC,IAAI,CAACgD,aAAa,EAAE,IAAI,CAACD,UAAU,CAAC;MACnD,IAAI,CAACyC,MAAM,CAACe,mBAAmB,CAAC7E,QAAQ,CAACG,cAAc,EAAE,IAAI,CAACkB,UAAU,CAAC;IAC3E;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAa,GAAA;IAAAC,KAAA,EAKA,SAAA2C,WAAWA,CAACzC,UAAU,EAAE;MACtB,IAAM0C,EAAE,GAAG,IAAI,CAACjB,MAAM,CAACkB,KAAK,CAAC,CAAC;MAC9B,IAAI,CAACC,SAAS,CAACF,EAAE,EAAE1C,UAAU,CAAC;MAE9B,IAAA6C,mBAAA,GAA2CrF,kBAAkB,CAC3DwC,UAAU,EACV,IAAI,CAACE,QAAQ,CAAC,CAChB,CAAC;QAAA4C,oBAAA,GAAAC,cAAA,CAAAF,mBAAA;QAHMG,UAAU,GAAAF,oBAAA;QAAEG,QAAQ,GAAAH,oBAAA;QAAEI,UAAU,GAAAJ,oBAAA;;MAKvC;MACA,IAAI,CAACrB,MAAM,CAAC0B,WAAW,CAACnD,UAAU,CAAC;MACnC,IAAI,CAACoD,YAAY,CAACpD,UAAU,EAAE,KAAK,EAAEgD,UAAU,EAAEC,QAAQ,EAAEC,UAAU,CAAC;MACtE,IAAI,CAACzB,MAAM,CAAC4B,YAAY,CAACrD,UAAU,CAAC;MAEpC,IAAMsD,MAAM,GAAG,IAAI,CAAC7B,MAAM,CAAC8B,SAAS,CAAC,CAAC;MACtC,IAAMC,UAAU,GAAGxD,UAAU,CAACyD,gBAAgB,CAACzD,UAAU,CAAC0D,UAAU,CAAC;MACrE,IAAMC,OAAO,GAAGH,UAAU,CAACG,OAAO;MAClC,IAAIA,OAAO,KAAKC,UAAU,CAACN,MAAM,CAACjC,KAAK,CAACsC,OAAO,CAAC,EAAE;QAChDL,MAAM,CAACjC,KAAK,CAACsC,OAAO,GAAGE,MAAM,CAACF,OAAO,CAAC;MACxC;MAEA,IAAI,IAAI,CAACjF,oBAAoB,EAAE;QAC7B,IAAI,CAAC0E,YAAY,CAACpD,UAAU,EAAE,IAAI,EAAEgD,UAAU,EAAEC,QAAQ,EAAEC,UAAU,CAAC;QACrE,IAAI,CAACtE,gBAAgB,CAACkF,eAAe,CAAC,CAAC;MACzC;MAEA,IAAI,CAACC,UAAU,CAACrB,EAAE,EAAE1C,UAAU,CAAC;MAE/B,OAAOsD,MAAM;IACf;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAzD,GAAA;IAAAC,KAAA,EAKA,SAAAkE,oBAAoBA,CAAChE,UAAU,EAAE;MAAA,IAAAiE,MAAA;MAC/B,IAAI,CAAC,IAAI,CAACxE,qBAAqB,EAAE;QAC/B,IAAI,CAACM,mBAAmB,CAACC,UAAU,CAAC;QACpC,IAAI,CAACP,qBAAqB,GAAG,IAAI;MACnC;MAEA,IAAMvB,KAAK,GAAG,IAAI,CAACgC,QAAQ,CAAC,CAAC;MAC7B,IAAMgE,YAAY,GAAGhG,KAAK,CAACiC,SAAS,CAAC,CAAC;MACtC,IAAMG,SAAS,GAAGN,UAAU,CAACM,SAAS;MACtC,IAAM6D,aAAa,GACjB,CAACnE,UAAU,CAACoE,SAAS,CAACxI,QAAQ,CAACyI,SAAS,CAAC,IACzC,CAACrE,UAAU,CAACoE,SAAS,CAACxI,QAAQ,CAAC0I,WAAW,CAAC;MAC7C,IAAMC,aAAa,GAAG,CAACxH,MAAM,CAAC,IAAI,CAAC+B,eAAe,EAAEkB,UAAU,CAACwE,MAAM,CAAC;MACtE,IAAMC,aAAa,GAAG,IAAI,CAAC5F,eAAe,GAAGqF,YAAY,CAACQ,WAAW,CAAC,CAAC;MAEvE,IAAID,aAAa,EAAE;QACjB,IAAI,CAAC5F,eAAe,GAAGqF,YAAY,CAACQ,WAAW,CAAC,CAAC;MACnD;MAEA,IAAIP,aAAa,KAAKI,aAAa,IAAIE,aAAa,CAAC,EAAE;QACrD,IAAMlE,UAAU,GAAGD,SAAS,CAACC,UAAU;QACvC,IAAMoE,UAAU,GAAGrE,SAAS,CAACqE,UAAU;QAEvC,IAAMC,YAAY,GAChB1G,KAAK,YAAY1C,UAAU,GAAG0C,KAAK,CAAC2G,eAAe,CAAC,CAAC,GAAG,CAAC;QAC3D,IAAML,MAAM,GAAG3H,MAAM,CAACmD,UAAU,CAACwE,MAAM,EAAEI,YAAY,GAAGD,UAAU,CAAC;QAEnE,IAAMvE,cAAc,GAAG/C,iBAAiB,CAAC,CAAC;QAC1C,IAAI+C,cAAc,EAAE;UAClB8D,YAAY,CAACY,YAAY,CACvBxH,YAAY,CAACkH,MAAM,EAAEpE,cAAc,CAAC,EACpC7C,gBAAgB,CAACoH,UAAU,EAAEpE,UAAU,CAAC,EACxCH,cACF,CAAC;QACH,CAAC,MAAM;UACL8D,YAAY,CAACY,YAAY,CAACN,MAAM,EAAEG,UAAU,EAAEpE,UAAU,CAAC;QAC3D;QAEA,IAAI,CAACwE,KAAK,GAAG,KAAK;QAElB,IAAMC,SAAS,GAAG,IAAI,CAACvD,MAAM,CAACwD,uBAAuB,CACnDjF,UAAU,EACV7D,eAAe,CAAC,CAClB,CAAC;QAED,IAAM+I,gBAAgB,GAAG,IAAI,CAAC7F,eAAe,CAACmC,GAAG,CAAC,UAAC2D,QAAQ,EAAEC,CAAC;UAAA,OAC5DD,QAAQ,CAACE,eAAe,CAACpB,MAAI,CAACzE,MAAM,EAAEwF,SAAS,CAAC,CAACM,IAAI,CAAC,UAACC,OAAO,EAAK;YACjEtB,MAAI,CAAC3E,QAAQ,CAAC8F,CAAC,CAAC,GAAGG,OAAO;UAC5B,CAAC,CAAC;QAAA,CACJ,CAAC;QACDC,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC,CAACI,IAAI,CAAC,YAAM;UACvCrB,MAAI,CAACc,KAAK,GAAG,IAAI;UACjBd,MAAI,CAAC/D,QAAQ,CAAC,CAAC,CAACwF,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC;QAEF,IAAI,CAAC5G,eAAe,GAAGkB,UAAU,CAACwE,MAAM,CAACmB,KAAK,CAAC,CAAC;MAClD;MAEA,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAA9F,GAAA;IAAAC,KAAA,EAQA,SAAAsD,YAAYA,CAACpD,UAAU,EAAE4F,eAAe,EAAE5C,UAAU,EAAEC,QAAQ,EAAEC,UAAU,EAAE;MAAA,IAAA2C,MAAA;MAC1E,IAAIC,KAAK,GAAG9C,UAAU;MAEtB,IAAI4C,eAAe,EAAE;QACnB,IAAI,CAAChH,gBAAgB,CAACmH,OAAO,CAAC,CAC5BC,IAAI,CAACC,KAAK,CAACjG,UAAU,CAACkG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAClCF,IAAI,CAACC,KAAK,CAACjG,UAAU,CAACkG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CACnC,CAAC;QACF,IAAI,CAACzE,MAAM,CAAC0E,yBAAyB,CACnCnG,UAAU,EACV,IAAI,CAACpB,gBAAgB,EACrB,IACF,CAAC;MACH;MAEA,IAAI,CAACO,2BAA2B,GAAG,IAAI,CAACsC,MAAM,CAACwD,uBAAuB,CACpEjF,UAAU,EACV,IAAI,CAACb,2BACP,CAAC;MAED,GAAG;QAAA,IAAAiH,KAAA,YAAAA,MAAA,EAC8D;UAC7D,IAAMjB,QAAQ,GAAGU,MAAI,CAACxG,eAAe,CAAC+F,CAAC,CAAC;UACxC,IAAMG,OAAO,GAAGM,MAAI,CAACvG,QAAQ,CAAC8F,CAAC,CAAC;UAChC,IAAI,CAACG,OAAO,EAAE;YAAA;UAEd;UACAJ,QAAQ,CAACkB,MAAM,CAACd,OAAO,EAAEvF,UAAU,EAAE,YAAM;YACzC6F,MAAI,CAAC1D,cAAc,CAACoD,OAAO,CAACe,uBAAuB,CAAC;YACpDT,MAAI,CAACpE,MAAM,CAAC8E,wBAAwB,CAACX,eAAe,CAAC;UACvD,CAAC,CAAC;QACJ,CAAC;QAVD,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEoB,EAAE,GAAG,IAAI,CAACnH,eAAe,CAACoH,MAAM,EAAErB,CAAC,GAAGoB,EAAE,EAAEpB,CAAC,EAAE;UAAA,IAAAgB,KAAA,IAIzD;QAAS;QAObzJ,kBAAkB,CAAC,IAAI,CAACwC,2BAA2B,EAAE+D,UAAU,EAAE,CAAC,CAAC;MACrE,CAAC,QAAQ,EAAE4C,KAAK,GAAG7C,QAAQ;IAC7B;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAApD,GAAA;IAAAC,KAAA,EASA,SAAA4G,0BAA0BA,CACxBC,UAAU,EACV3G,UAAU,EACV4G,YAAY,EACZC,QAAQ,EACRC,OAAO,EACP;MACAlK,MAAM,CACJ,IAAI,CAAC8B,oBAAoB,EACzB,yJACF,CAAC;MACD,IAAI,CAAC,IAAI,CAACW,eAAe,CAACoH,MAAM,IAAI,CAAC,IAAI,CAAC/H,oBAAoB,EAAE;QAC9D,OAAOqI,SAAS;MAClB;MAEA,IAAMC,KAAK,GAAG/K,cAAc,CAC1B+D,UAAU,CAACiH,0BAA0B,EACrCN,UAAU,CAAChB,KAAK,CAAC,CACnB,CAAC;MAED,IAAMuB,IAAI,GAAG,IAAI,CAACtI,gBAAgB,CAACuI,SAAS,CAACH,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACxE,IAAMI,KAAK,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;MAC1E,IAAMG,GAAG,GAAGrK,aAAa,CAACoK,KAAK,CAAC;MAChC,IAAMtF,OAAO,GAAG,IAAI,CAACtC,MAAM,CAAC8H,iBAAiB,CAACD,GAAG,CAAC;MAClD,IAAIvF,OAAO,EAAE;QACX,OAAO+E,QAAQ,CAAC/E,OAAO,EAAE,IAAI,CAAC5B,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC;MACjD;MACA,OAAO6G,SAAS;IAClB;;IAEA;AACF;AACA;EAFE;IAAAlH,GAAA;IAAAC,KAAA,EAGA,SAAAyH,eAAeA,CAAA,EAAG;MAChB,IAAI,IAAI,CAAC7H,iBAAiB,EAAE;QAC1B,IAAI,CAACA,iBAAiB,CAAC8H,OAAO,CAAC,UAAU3H,GAAG,EAAE;UAC5CnC,aAAa,CAACmC,GAAG,CAAC;QACpB,CAAC,CAAC;QACF,IAAI,CAACH,iBAAiB,GAAG,IAAI;MAC/B;MACAiC,aAAA,CAAA3D,wBAAA;IACF;EAAC;AAAA,EA5aoCnC,kBAAkB;AA+azD,eAAemC,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
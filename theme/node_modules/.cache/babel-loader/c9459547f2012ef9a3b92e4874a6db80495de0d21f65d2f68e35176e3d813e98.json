{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /*#__PURE__*/function (_Control) {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  function OverviewMap(options) {\n    var _this;\n    _classCallCheck(this, OverviewMap);\n    options = options ? options : {};\n    _this = _callSuper(this, OverviewMap, [{\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }]);\n\n    /**\n     * @private\n     */\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"\\u2039\";\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : \"\\u203A\";\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    _this.view_ = options.view;\n    var ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection()\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    _this.ovmap_ = ovmap;\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box\n    });\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n    var overlayBox = _this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    var computeDesiredMousePosition = function computeDesiredMousePosition(mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n    var move = function move(event) {\n      var position = /** @type {?} */computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(/** @type {MouseEvent} */position);\n      overlay.setPosition(coordinates);\n    };\n    var _endMoving = function endMoving(event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', _endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', _endMoving);\n    });\n    return _this;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  _inherits(OverviewMap, _Control);\n  return _createClass(OverviewMap, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      var oldMap = this.getMap();\n      if (map === oldMap) {\n        return;\n      }\n      if (oldMap) {\n        var oldView = oldMap.getView();\n        if (oldView) {\n          this.unbindView_(oldView);\n        }\n        this.ovmap_.setTarget(null);\n      }\n      _superPropGet(OverviewMap, \"setMap\", this, 3)([map]);\n      if (map) {\n        this.ovmap_.setTarget(this.ovmapDiv_);\n        this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n        var view = map.getView();\n        if (view) {\n          this.bindView_(view);\n          if (view.isDef()) {\n            this.ovmap_.updateSize();\n            this.resetExtent_();\n          }\n        }\n        if (!this.ovmap_.isRendered()) {\n          this.updateBoxAfterOvmapIsRendered_();\n        }\n      }\n    }\n\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n  }, {\n    key: \"handleMapPropertyChange_\",\n    value: function handleMapPropertyChange_(event) {\n      if (event.key === MapProperty.VIEW) {\n        var oldView = /** @type {import(\"../View.js\").default} */\n        event.oldValue;\n        if (oldView) {\n          this.unbindView_(oldView);\n        }\n        var newView = this.getMap().getView();\n        this.bindView_(newView);\n      } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n        this.ovmap_.updateSize();\n      }\n    }\n\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n  }, {\n    key: \"bindView_\",\n    value: function bindView_(view) {\n      if (!this.view_) {\n        // Unless an explicit view definition was given, derive default from whatever main map uses.\n        var newView = new View({\n          projection: view.getProjection()\n        });\n        this.ovmap_.setView(newView);\n      }\n      view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n      // Sync once with the new view\n      this.handleRotationChanged_();\n    }\n\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n  }, {\n    key: \"unbindView_\",\n    value: function unbindView_(view) {\n      view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    }\n\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n  }, {\n    key: \"handleRotationChanged_\",\n    value: function handleRotationChanged_() {\n      if (this.rotateWithView_) {\n        this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n      }\n    }\n\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n  }, {\n    key: \"validateExtent_\",\n    value: function validateExtent_() {\n      var map = this.getMap();\n      var ovmap = this.ovmap_;\n      if (!map.isRendered() || !ovmap.isRendered()) {\n        return;\n      }\n      var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n      var view = map.getView();\n      var extent = view.calculateExtentInternal(mapSize);\n      if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n        // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n        return;\n      }\n      this.viewExtent_ = extent;\n      var ovmapSize = /** @type {import(\"../size.js\").Size} */\n      ovmap.getSize();\n      var ovview = ovmap.getView();\n      var ovextent = ovview.calculateExtentInternal(ovmapSize);\n      var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n      var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n      var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n      var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n      var ovmapWidth = ovmapSize[0];\n      var ovmapHeight = ovmapSize[1];\n      if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n        this.resetExtent_();\n      } else if (!containsExtent(ovextent, extent)) {\n        this.recenter_();\n      }\n    }\n\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n  }, {\n    key: \"resetExtent_\",\n    value: function resetExtent_() {\n      if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n        return;\n      }\n      var map = this.getMap();\n      var ovmap = this.ovmap_;\n      var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n      var view = map.getView();\n      var extent = view.calculateExtentInternal(mapSize);\n      var ovview = ovmap.getView();\n\n      // get how many times the current map overview could hold different\n      // box sizes using the min and max ratio, pick the step in the middle used\n      // to calculate the extent from the main map to set it to the overview map,\n      var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n      var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n      scaleFromCenter(extent, ratio);\n      ovview.fitInternal(polygonFromExtent(extent));\n    }\n\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n  }, {\n    key: \"recenter_\",\n    value: function recenter_() {\n      var map = this.getMap();\n      var ovmap = this.ovmap_;\n      var view = map.getView();\n      var ovview = ovmap.getView();\n      ovview.setCenterInternal(view.getCenterInternal());\n    }\n\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n  }, {\n    key: \"updateBox_\",\n    value: function updateBox_() {\n      var map = this.getMap();\n      var ovmap = this.ovmap_;\n      if (!map.isRendered() || !ovmap.isRendered()) {\n        return;\n      }\n      var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n      var view = map.getView();\n      var ovview = ovmap.getView();\n      var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n      var overlay = this.boxOverlay_;\n      var box = this.boxOverlay_.getElement();\n      var center = view.getCenterInternal();\n      var resolution = view.getResolution();\n      var ovresolution = ovview.getResolution();\n      var width = mapSize[0] * resolution / ovresolution;\n      var height = mapSize[1] * resolution / ovresolution;\n\n      // set position using center coordinates\n      overlay.setPosition(center);\n\n      // set box size calculated from map extent size and overview map resolution\n      if (box) {\n        box.style.width = width + 'px';\n        box.style.height = height + 'px';\n        var transform = 'rotate(' + rotation + 'rad)';\n        box.style.transform = transform;\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"updateBoxAfterOvmapIsRendered_\",\n    value: function updateBoxAfterOvmapIsRendered_() {\n      if (this.ovmapPostrenderKey_) {\n        return;\n      }\n      this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      }, this);\n    }\n\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n  }, {\n    key: \"handleClick_\",\n    value: function handleClick_(event) {\n      event.preventDefault();\n      this.handleToggle_();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleToggle_\",\n    value: function handleToggle_() {\n      this.element.classList.toggle(CLASS_COLLAPSED);\n      if (this.collapsed_) {\n        replaceNode(this.collapseLabel_, this.label_);\n      } else {\n        replaceNode(this.label_, this.collapseLabel_);\n      }\n      this.collapsed_ = !this.collapsed_;\n\n      // manage overview map if it had not been rendered before and control\n      // is expanded\n      var ovmap = this.ovmap_;\n      if (!this.collapsed_) {\n        if (ovmap.isRendered()) {\n          this.viewExtent_ = undefined;\n          ovmap.render();\n          return;\n        }\n        ovmap.updateSize();\n        this.resetExtent_();\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n  }, {\n    key: \"getCollapsible\",\n    value: function getCollapsible() {\n      return this.collapsible_;\n    }\n\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(collapsible) {\n      if (this.collapsible_ === collapsible) {\n        return;\n      }\n      this.collapsible_ = collapsible;\n      this.element.classList.toggle('ol-uncollapsible');\n      if (!collapsible && this.collapsed_) {\n        this.handleToggle_();\n      }\n    }\n\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(collapsed) {\n      if (!this.collapsible_ || this.collapsed_ === collapsed) {\n        return;\n      }\n      this.handleToggle_();\n    }\n\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n  }, {\n    key: \"getCollapsed\",\n    value: function getCollapsed() {\n      return this.collapsed_;\n    }\n\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n  }, {\n    key: \"getRotateWithView\",\n    value: function getRotateWithView() {\n      return this.rotateWithView_;\n    }\n\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n  }, {\n    key: \"setRotateWithView\",\n    value: function setRotateWithView(rotateWithView) {\n      if (this.rotateWithView_ === rotateWithView) {\n        return;\n      }\n      this.rotateWithView_ = rotateWithView;\n      if (this.getMap().getView().getRotation() !== 0) {\n        if (this.rotateWithView_) {\n          this.handleRotationChanged_();\n        } else {\n          this.ovmap_.getView().setRotation(0);\n        }\n        this.viewExtent_ = undefined;\n        this.validateExtent_();\n        this.updateBox_();\n      }\n    }\n\n    /**\n     * Return the overview map.\n     * @return {import(\"../Map.js\").default} Overview map.\n     * @api\n     */\n  }, {\n    key: \"getOverviewMap\",\n    value: function getOverviewMap() {\n      return this.ovmap_;\n    }\n\n    /**\n     * Update the overview map element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n  }, {\n    key: \"render\",\n    value: function render(mapEvent) {\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }]);\n}(Control);\nexport default OverviewMap;","map":{"version":3,"names":["Collection","Control","EventType","Map","MapEventType","MapProperty","ObjectEventType","Overlay","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","OverviewMap","_Control","options","_this","_classCallCheck","_callSuper","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap","controls","interactions","ovmap_","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","_inherits","_createClass","key","value","setMap","map","oldMap","oldView","unbindView_","setTarget","_superPropGet","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/control/OverviewMap.js"],"sourcesContent":["/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {listen, listenOnce} from '../events.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {replaceNode} from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection(),\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinateInternal(\n        /** @type {MouseEvent} */ (position)\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      scope.getMap().getView().setCenterInternal(coordinates);\n\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this\n        )\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent)\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent)\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      function (event) {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n      this\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
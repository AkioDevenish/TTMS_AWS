{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nvar WebGLPostProcessingPass = /*#__PURE__*/function () {\n  /**\n   * @param {Options} options Options.\n   */\n  function WebGLPostProcessingPass(options) {\n    var _this = this;\n    _classCallCheck(this, WebGLPostProcessingPass);\n    this.gl_ = options.webGlContext;\n    var gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer();\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      _this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(_this.renderTargetProgram_, name)\n      });\n    });\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  return _createClass(WebGLPostProcessingPass, [{\n    key: \"getGL\",\n    value: function getGL() {\n      return this.gl_;\n    }\n\n    /**\n     * Initialize the render target texture of the post process, make sure it is at the\n     * right size and bind it as a render target for the next draw calls.\n     * The last step to be initialized will be the one where the primitives are rendered.\n     * @param {import(\"../Map.js\").FrameState} frameState current frame state\n     */\n  }, {\n    key: \"init\",\n    value: function init(frameState) {\n      var gl = this.getGL();\n      var textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_];\n\n      // rendering goes to my buffer\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n      gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n      // if size has changed: adjust canvas & render target texture\n      if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n        this.renderTargetTextureSize_ = textureSize;\n\n        // create a new texture\n        var level = 0;\n        var internalFormat = gl.RGBA;\n        var border = 0;\n        var format = gl.RGBA;\n        var type = gl.UNSIGNED_BYTE;\n        var data = null;\n        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        // bind the texture to the framebuffer\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureSize[0], textureSize[1]);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer_);\n      }\n    }\n\n    /**\n     * Render to the next postprocessing pass (or to the canvas if final pass).\n     * @param {import(\"../Map.js\").FrameState} frameState current frame state\n     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n     * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n     * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n     */\n  }, {\n    key: \"apply\",\n    value: function apply(frameState, nextPass, preCompose, postCompose) {\n      var gl = this.getGL();\n      var size = frameState.size;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      if (!nextPass) {\n        // clear the canvas if we are the first to render to it\n        // and preserveDrawingBuffer is true\n        var canvasId = getUid(gl.canvas);\n        if (!frameState.renderTargets[canvasId]) {\n          var attributes = gl.getContextAttributes();\n          if (attributes && attributes.preserveDrawingBuffer) {\n            gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            gl.clearDepth(1.0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n          }\n          frameState.renderTargets[canvasId] = true;\n        }\n      }\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n      gl.useProgram(this.renderTargetProgram_);\n      gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n      gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n      gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n      gl.uniform1i(this.renderTargetTextureLocation_, 0);\n      var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n      gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n      this.applyUniforms(frameState);\n      if (preCompose) {\n        preCompose(gl, frameState);\n      }\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      if (postCompose) {\n        postCompose(gl, frameState);\n      }\n    }\n\n    /**\n     * @return {WebGLFramebuffer} Frame buffer\n     */\n  }, {\n    key: \"getFrameBuffer\",\n    value: function getFrameBuffer() {\n      return this.frameBuffer_;\n    }\n\n    /**\n     * @return {WebGLRenderbuffer} Depth buffer\n     */\n  }, {\n    key: \"getDepthBuffer\",\n    value: function getDepthBuffer() {\n      return this.depthBuffer_;\n    }\n\n    /**\n     * Sets the custom uniforms based on what was given in the constructor.\n     * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n     * @private\n     */\n  }, {\n    key: \"applyUniforms\",\n    value: function applyUniforms(frameState) {\n      var gl = this.getGL();\n      var value;\n      var textureSlot = 1;\n      this.uniforms_.forEach(function (uniform) {\n        value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n        // apply value based on type\n        if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n          // create a texture & put data\n          if (!uniform.texture) {\n            uniform.texture = gl.createTexture();\n          }\n          gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n          if (value instanceof ImageData) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n          } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n          }\n\n          // fill texture slots\n          gl.uniform1i(uniform.location, textureSlot++);\n        } else if (Array.isArray(value)) {\n          switch (value.length) {\n            case 2:\n              gl.uniform2f(uniform.location, value[0], value[1]);\n              return;\n            case 3:\n              gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n              return;\n            case 4:\n              gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n              return;\n            default:\n              return;\n          }\n        } else if (typeof value === 'number') {\n          gl.uniform1f(uniform.location, value);\n        }\n      });\n    }\n  }]);\n}();\nexport default WebGLPostProcessingPass;","map":{"version":3,"names":["getUid","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","options","_this","_classCallCheck","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","name","push","value","location","_createClass","key","getGL","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","viewport","level","internalFormat","RGBA","border","format","type","UNSIGNED_BYTE","data","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","apply","nextPass","preCompose","postCompose","size","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","concat","width","height","Uint8Array","Array","isArray","length","uniform3f","uniform4f"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/webgl/PostProcessingPass.js"],"sourcesContent":["/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position'\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize'\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity'\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image'\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1]\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data)\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3]\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
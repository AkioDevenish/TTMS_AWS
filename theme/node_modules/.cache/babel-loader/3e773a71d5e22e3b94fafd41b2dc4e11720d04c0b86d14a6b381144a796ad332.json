{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { ol_coordinate_equal } from \"./GeomUtils.js\";\nimport ol_geom_LineString from \"ol/geom/LineString.js\";\n\n/** Split a lineString by a point or a list of points\r\n *\tNB: points must be on the line, use getClosestPoint() to get one\r\n * @param {ol.Coordinate | Array<ol.Coordinate>} pt points to split the line\r\n * @param {Number} tol distance tolerance for 2 points to be equal\r\n */\nol_geom_LineString.prototype.splitAt = function (pt, tol) {\n  var i;\n  if (!pt) return [this];\n  if (!tol) tol = 1e-10;\n  // Test if list of points\n  if (pt.length && pt[0].length) {\n    var result = [this];\n    for (i = 0; i < pt.length; i++) {\n      var r = [];\n      for (var k = 0; k < result.length; k++) {\n        var ri = result[k].splitAt(pt[i], tol);\n        r = r.concat(ri);\n      }\n      result = r;\n    }\n    return result;\n  }\n  // Nothing to do\n  if (ol_coordinate_equal(pt, this.getFirstCoordinate()) || ol_coordinate_equal(pt, this.getLastCoordinate())) {\n    return [this];\n  }\n  // Get\n  var c0 = this.getCoordinates();\n  var ci = [c0[0]];\n  var c = [];\n  for (i = 0; i < c0.length - 1; i++) {\n    // Filter equal points\n    if (ol_coordinate_equal(c0[i], c0[i + 1])) continue;\n    // Extremity found\n    if (ol_coordinate_equal(pt, c0[i + 1])) {\n      ci.push(c0[i + 1]);\n      c.push(new ol_geom_LineString(ci));\n      ci = [];\n    }\n    // Test alignement\n    else if (!ol_coordinate_equal(pt, c0[i])) {\n      var d1,\n        d2,\n        split = false;\n      if (c0[i][0] == c0[i + 1][0]) {\n        d1 = (c0[i][1] - pt[1]) / (c0[i][1] - c0[i + 1][1]);\n        split = c0[i][0] == pt[0] && 0 < d1 && d1 <= 1;\n      } else if (c0[i][1] == c0[i + 1][1]) {\n        d1 = (c0[i][0] - pt[0]) / (c0[i][0] - c0[i + 1][0]);\n        split = c0[i][1] == pt[1] && 0 < d1 && d1 <= 1;\n      } else {\n        d1 = (c0[i][0] - pt[0]) / (c0[i][0] - c0[i + 1][0]);\n        d2 = (c0[i][1] - pt[1]) / (c0[i][1] - c0[i + 1][1]);\n        split = Math.abs(d1 - d2) <= tol && 0 < d1 && d1 <= 1;\n      }\n      // pt is inside the segment > split\n      if (split) {\n        ci.push(pt);\n        c.push(new ol_geom_LineString(ci));\n        ci = [pt];\n      }\n    }\n    ci.push(c0[i + 1]);\n  }\n  if (ci.length > 1) c.push(new ol_geom_LineString(ci));\n  if (c.length) return c;else return [this];\n};\n\n// import('ol-ext/geom/LineStringSplitAt')","map":{"version":3,"names":["ol_coordinate_equal","ol_geom_LineString","prototype","splitAt","pt","tol","i","length","result","r","k","ri","concat","getFirstCoordinate","getLastCoordinate","c0","getCoordinates","ci","c","push","d1","d2","split","Math","abs"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol-ext/geom/LineStringSplitAt.js"],"sourcesContent":["import {ol_coordinate_equal} from \"./GeomUtils.js\";\r\nimport ol_geom_LineString from \"ol/geom/LineString.js\";\r\n\r\n/** Split a lineString by a point or a list of points\r\n *\tNB: points must be on the line, use getClosestPoint() to get one\r\n * @param {ol.Coordinate | Array<ol.Coordinate>} pt points to split the line\r\n * @param {Number} tol distance tolerance for 2 points to be equal\r\n */\r\nol_geom_LineString.prototype.splitAt = function(pt, tol) {\r\n  var i;\r\n  if (!pt) return [this];\r\n    if (!tol) tol = 1e-10;\r\n    // Test if list of points\r\n    if (pt.length && pt[0].length) {\r\n      var result = [this];\r\n      for (i=0; i<pt.length; i++) {\r\n        var r = [];\r\n        for (var k=0; k<result.length; k++) {\r\n          var ri = result[k].splitAt(pt[i], tol);\r\n          r = r.concat(ri);\r\n        }\r\n        result = r;\r\n      }\r\n      return result;\r\n    }\r\n    // Nothing to do\r\n    if (ol_coordinate_equal(pt,this.getFirstCoordinate())\r\n    || ol_coordinate_equal(pt,this.getLastCoordinate())) {\r\n      return [this];\r\n    }\r\n    // Get\r\n    var c0 = this.getCoordinates();\r\n    var ci=[c0[0]];\r\n    var c = [];\r\n    for (i=0; i<c0.length-1; i++) {\r\n      // Filter equal points\r\n      if (ol_coordinate_equal(c0[i],c0[i+1])) continue;\r\n      // Extremity found\r\n      if (ol_coordinate_equal(pt,c0[i+1])) {\r\n        ci.push(c0[i+1]);\r\n        c.push(new ol_geom_LineString(ci));\r\n        ci = [];\r\n      }\r\n      // Test alignement\r\n      else if (!ol_coordinate_equal(pt,c0[i])) {\r\n        var d1, d2, split=false;\r\n        if (c0[i][0] == c0[i+1][0]) {\r\n          d1 = (c0[i][1]-pt[1]) / (c0[i][1]-c0[i+1][1]);\r\n          split = (c0[i][0] == pt[0]) && (0 < d1 && d1 <= 1)\r\n        } else if (c0[i][1] == c0[i+1][1]) {\r\n          d1 = (c0[i][0]-pt[0]) / (c0[i][0]-c0[i+1][0]);\r\n          split = (c0[i][1] == pt[1]) && (0 < d1 && d1 <= 1)\r\n        } else {\r\n          d1 = (c0[i][0]-pt[0]) / (c0[i][0]-c0[i+1][0]);\r\n          d2 = (c0[i][1]-pt[1]) / (c0[i][1]-c0[i+1][1]);\r\n          split = (Math.abs(d1-d2) <= tol && 0 < d1 && d1 <= 1)\r\n        }\r\n        // pt is inside the segment > split\r\n        if (split) {\r\n          ci.push(pt);\r\n          c.push (new ol_geom_LineString(ci));\r\n          ci = [pt];\r\n        }\r\n      }\r\n      ci.push(c0[i+1]);\r\n    }\r\n    if (ci.length>1) c.push (new ol_geom_LineString(ci));\r\n    if (c.length) return c;\r\n    else return [this];\r\n}\r\n\r\n// import('ol-ext/geom/LineStringSplitAt')"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _objectSpread from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.max-safe-integer.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, { Attributes, Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { ColorType, NumberType } from '../expr/expression.js';\nimport { PALETTE_TEXTURE_ARRAY, getStringNumberEquivalent, newCompilationContext, uniformNameForVariable } from '../expr/gpu.js';\nimport { expressionToGlsl } from '../webgl/styleparser.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  var vertexShader = \"\\n    attribute vec2 \".concat(Attributes.TEXTURE_COORD, \";\\n    uniform mat4 \").concat(Uniforms.TILE_TRANSFORM, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n    uniform float \").concat(Uniforms.TEXTURE_RESOLUTION, \";\\n    uniform float \").concat(Uniforms.TEXTURE_ORIGIN_X, \";\\n    uniform float \").concat(Uniforms.TEXTURE_ORIGIN_Y, \";\\n    uniform float \").concat(Uniforms.DEPTH, \";\\n\\n    varying vec2 v_textureCoord;\\n    varying vec2 v_mapCoord;\\n\\n    void main() {\\n      v_textureCoord = \").concat(Attributes.TEXTURE_COORD, \";\\n      v_mapCoord = vec2(\\n        \").concat(Uniforms.TEXTURE_ORIGIN_X, \" + \").concat(Uniforms.TEXTURE_RESOLUTION, \" * \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \" * v_textureCoord[0],\\n        \").concat(Uniforms.TEXTURE_ORIGIN_Y, \" - \").concat(Uniforms.TEXTURE_RESOLUTION, \" * \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \" * v_textureCoord[1]\\n      );\\n      gl_Position = \").concat(Uniforms.TILE_TRANSFORM, \" * vec4(\").concat(Attributes.TEXTURE_COORD, \", \").concat(Uniforms.DEPTH, \", 1.0);\\n    }\\n  \");\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  var context = _objectSpread(_objectSpread({}, newCompilationContext()), {}, {\n    inFragmentShader: true,\n    bandCount: bandCount,\n    style: style\n  });\n  var pipeline = [];\n  if (style.color !== undefined) {\n    var color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(\"color = \".concat(color, \";\"));\n  }\n  if (style.contrast !== undefined) {\n    var contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(\"color.rgb = clamp((\".concat(contrast, \" + 1.0) * color.rgb - (\").concat(contrast, \" / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n  if (style.exposure !== undefined) {\n    var exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(\"color.rgb = clamp((\".concat(exposure, \" + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n  if (style.saturation !== undefined) {\n    var saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(\"\\n      float saturation = \".concat(saturation, \" + 1.0;\\n      float sr = (1.0 - saturation) * 0.2126;\\n      float sg = (1.0 - saturation) * 0.7152;\\n      float sb = (1.0 - saturation) * 0.0722;\\n      mat3 saturationMatrix = mat3(\\n        sr + saturation, sr, sr,\\n        sg, sg + saturation, sg,\\n        sb, sb, sb + saturation\\n      );\\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\\n    \"));\n  }\n  if (style.gamma !== undefined) {\n    var gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(\"color.rgb = pow(color.rgb, vec3(1.0 / \".concat(gamma, \"));\"));\n  }\n  if (style.brightness !== undefined) {\n    var brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(\"color.rgb = clamp(color.rgb + \".concat(brightness, \", vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  var uniforms = {};\n  var numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\"Missing variables in style (expected \".concat(context.variables, \")\"));\n  }\n  var _loop = function _loop() {\n    var variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(\"Missing '\".concat(variable.name, \"' in style variables\"));\n    }\n    var uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      var value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  };\n  for (var i = 0; i < numVariables; ++i) {\n    _loop();\n  }\n  var uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return \"uniform float \".concat(name, \";\");\n  });\n  var textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\"uniform sampler2D \".concat(Uniforms.TILE_TEXTURE_ARRAY, \"[\").concat(textureCount, \"];\"));\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\"uniform sampler2D \".concat(PALETTE_TEXTURE_ARRAY, \"[\").concat(context.paletteTextures.length, \"];\"));\n  }\n  var functionDefintions = Object.keys(context.functions).map(function (name) {\n    return context.functions[name];\n  });\n  var fragmentShader = \"\\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\\n    precision highp float;\\n    #else\\n    precision mediump float;\\n    #endif\\n\\n    varying vec2 v_textureCoord;\\n    varying vec2 v_mapCoord;\\n    uniform vec4 \".concat(Uniforms.RENDER_EXTENT, \";\\n    uniform float \").concat(Uniforms.TRANSITION_ALPHA, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n    uniform float \").concat(Uniforms.RESOLUTION, \";\\n    uniform float \").concat(Uniforms.ZOOM, \";\\n\\n    \").concat(uniformDeclarations.join('\\n'), \"\\n\\n    \").concat(functionDefintions.join('\\n'), \"\\n\\n    void main() {\\n      if (\\n        v_mapCoord[0] < \").concat(Uniforms.RENDER_EXTENT, \"[0] ||\\n        v_mapCoord[1] < \").concat(Uniforms.RENDER_EXTENT, \"[1] ||\\n        v_mapCoord[0] > \").concat(Uniforms.RENDER_EXTENT, \"[2] ||\\n        v_mapCoord[1] > \").concat(Uniforms.RENDER_EXTENT, \"[3]\\n      ) {\\n        discard;\\n      }\\n\\n      vec4 color = texture2D(\").concat(Uniforms.TILE_TEXTURE_ARRAY, \"[0],  v_textureCoord);\\n\\n      \").concat(pipeline.join('\\n'), \"\\n\\n      gl_FragColor = color;\\n      gl_FragColor.rgb *= gl_FragColor.a;\\n      gl_FragColor *= \").concat(Uniforms.TRANSITION_ALPHA, \";\\n    }\");\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nvar WebGLTileLayer = /*#__PURE__*/function (_BaseTileLayer) {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  function WebGLTileLayer(options) {\n    var _this;\n    _classCallCheck(this, WebGLTileLayer);\n    options = options ? Object.assign({}, options) : {};\n    var style = options.style || {};\n    delete options.style;\n    var cacheSize = options.cacheSize;\n    delete options.cacheSize;\n    _this = _callSuper(this, WebGLTileLayer, [options]);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    _this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    _this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    _this.style_ = style;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.cacheSize_ = cacheSize;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    _this.styleVariables_ = _this.style_.variables || {};\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourceUpdate_);\n    return _this;\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  _inherits(WebGLTileLayer, _BaseTileLayer);\n  return _createClass(WebGLTileLayer, [{\n    key: \"getSources\",\n    value: function getSources(extent, resolution) {\n      var source = this.getSource();\n      return this.sources_ ? typeof this.sources_ === 'function' ? this.sources_(extent, resolution) : this.sources_ : source ? [source] : [];\n    }\n\n    /**\n     * @return {SourceType} The source being rendered.\n     */\n  }, {\n    key: \"getRenderSource\",\n    value: function getRenderSource() {\n      return this.renderedSource_ || this.getSource();\n    }\n\n    /**\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      var source = this.getRenderSource();\n      return source ? source.getState() : 'undefined';\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourceUpdate_\",\n    value: function handleSourceUpdate_() {\n      if (this.hasRenderer()) {\n        this.getRenderer().clearCache();\n      }\n      if (this.getSource()) {\n        this.setStyle(this.style_);\n      }\n    }\n\n    /**\n     * @private\n     * @return {number} The number of source bands.\n     */\n  }, {\n    key: \"getSourceBandCount_\",\n    value: function getSourceBandCount_() {\n      var max = Number.MAX_SAFE_INTEGER;\n      var sources = this.getSources([-max, -max, max, max], max);\n      return sources && sources.length && 'bandCount' in sources[0] ? sources[0].bandCount : 4;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n      return new WebGLTileLayerRenderer(this, {\n        vertexShader: parsedStyle.vertexShader,\n        fragmentShader: parsedStyle.fragmentShader,\n        uniforms: parsedStyle.uniforms,\n        cacheSize: this.cacheSize_,\n        paletteTextures: parsedStyle.paletteTextures\n      });\n    }\n\n    /**\n     * @param {import(\"../Map\").FrameState} frameState Frame state.\n     * @param {Array<SourceType>} sources Sources.\n     * @return {HTMLElement} Canvas.\n     */\n  }, {\n    key: \"renderSources\",\n    value: function renderSources(frameState, sources) {\n      var layerRenderer = this.getRenderer();\n      var canvas;\n      for (var i = 0, ii = sources.length; i < ii; ++i) {\n        this.renderedSource_ = sources[i];\n        if (layerRenderer.prepareFrame(frameState)) {\n          canvas = layerRenderer.renderFrame(frameState);\n        }\n      }\n      return canvas;\n    }\n\n    /**\n     * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target which the renderer may (but need not) use\n     * for rendering its content.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"render\",\n    value: function render(frameState, target) {\n      var _this2 = this;\n      this.rendered = true;\n      var viewState = frameState.viewState;\n      var sources = this.getSources(frameState.extent, viewState.resolution);\n      var ready = true;\n      var _loop2 = function _loop2() {\n        var source = sources[i];\n        var sourceState = source.getState();\n        if (sourceState == 'loading') {\n          var _onChange = function onChange() {\n            if (source.getState() == 'ready') {\n              source.removeEventListener('change', _onChange);\n              _this2.changed();\n            }\n          };\n          source.addEventListener('change', _onChange);\n        }\n        ready = ready && sourceState == 'ready';\n      };\n      for (var i = 0, ii = sources.length; i < ii; ++i) {\n        _loop2();\n      }\n      var canvas = this.renderSources(frameState, sources);\n      if (this.getRenderer().renderComplete && ready) {\n        // Fully rendered, done.\n        this.renderedResolution_ = viewState.resolution;\n        return canvas;\n      }\n      // Render sources from previously fully rendered frames\n      if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n        var altSources = this.getSources(frameState.extent, this.renderedResolution_).filter(function (source) {\n          return !sources.includes(source);\n        });\n        if (altSources.length > 0) {\n          return this.renderSources(frameState, altSources);\n        }\n      }\n      return canvas;\n    }\n\n    /**\n     * Update the layer style.  The `updateStyleVariables` function is a more efficient\n     * way to update layer rendering.  In cases where the whole style needs to be updated,\n     * this method may be called instead.  Note that calling this method will also replace\n     * any previously set variables, so the new style also needs to include new variables,\n     * if needed.\n     * @param {Style} style The new style.\n     */\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {\n      this.styleVariables_ = style.variables || {};\n      this.style_ = style;\n      var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n      var renderer = this.getRenderer();\n      renderer.reset({\n        vertexShader: parsedStyle.vertexShader,\n        fragmentShader: parsedStyle.fragmentShader,\n        uniforms: parsedStyle.uniforms,\n        paletteTextures: parsedStyle.paletteTextures\n      });\n      this.changed();\n    }\n\n    /**\n     * Update any variables used by the layer style and trigger a re-render.\n     * @param {Object<string, number>} variables Variables to update.\n     * @api\n     */\n  }, {\n    key: \"updateStyleVariables\",\n    value: function updateStyleVariables(variables) {\n      Object.assign(this.styleVariables_, variables);\n      this.changed();\n    }\n  }]);\n}(BaseTileLayer);\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\nexport default WebGLTileLayer;","map":{"version":3,"names":["BaseTileLayer","LayerProperty","WebGLTileLayerRenderer","Attributes","Uniforms","ColorType","NumberType","PALETTE_TEXTURE_ARRAY","getStringNumberEquivalent","newCompilationContext","uniformNameForVariable","expressionToGlsl","parseStyle","style","bandCount","vertexShader","concat","TEXTURE_COORD","TILE_TRANSFORM","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","TEXTURE_RESOLUTION","TEXTURE_ORIGIN_X","TEXTURE_ORIGIN_Y","DEPTH","context","_objectSpread","inFragmentShader","pipeline","color","undefined","push","contrast","exposure","saturation","gamma","brightness","uniforms","numVariables","Object","keys","variables","length","Error","_loop","variable","i","name","uniformName","value","uniformDeclarations","map","textureCount","Math","ceil","TILE_TEXTURE_ARRAY","paletteTextures","functionDefintions","functions","fragmentShader","RENDER_EXTENT","TRANSITION_ALPHA","RESOLUTION","ZOOM","join","WebGLTileLayer","_BaseTileLayer","options","_this","_classCallCheck","assign","cacheSize","_callSuper","sources_","sources","renderedSource_","renderedResolution_","NaN","style_","cacheSize_","styleVariables_","addChangeListener","SOURCE","handleSourceUpdate_","_inherits","_createClass","key","getSources","extent","resolution","source","getSource","getRenderSource","getSourceState","getState","hasRenderer","getRenderer","clearCache","setStyle","getSourceBandCount_","max","Number","MAX_SAFE_INTEGER","createRenderer","parsedStyle","renderSources","frameState","layerRenderer","canvas","ii","prepareFrame","renderFrame","render","target","_this2","rendered","viewState","ready","_loop2","sourceState","onChange","removeEventListener","changed","addEventListener","renderComplete","altSources","filter","includes","renderer","reset","updateStyleVariables","prototype","dispose"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/layer/WebGLTile.js"],"sourcesContent":["/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, {\n  Attributes,\n  Uniforms,\n} from '../renderer/webgl/TileLayer.js';\nimport {ColorType, NumberType} from '../expr/expression.js';\nimport {\n  PALETTE_TEXTURE_ARRAY,\n  getStringNumberEquivalent,\n  newCompilationContext,\n  uniformNameForVariable,\n} from '../expr/gpu.js';\nimport {expressionToGlsl} from '../webgl/styleparser.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    bandCount: bandCount,\n    style: style,\n  };\n\n  const pipeline = [];\n\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\n      `Missing variables in style (expected ${context.variables})`\n    );\n  }\n\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`\n  );\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`\n    );\n  }\n\n  const functionDefintions = Object.keys(context.functions).map(function (\n    name\n  ) {\n    return context.functions[name];\n  });\n\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${\n        Uniforms.TILE_TEXTURE_ARRAY\n      }[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures,\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n\n    const style = options.style || {};\n    delete options.style;\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_\n      ? typeof this.sources_ === 'function'\n        ? this.sources_(extent, resolution)\n        : this.sources_\n      : source\n      ? [source]\n      : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    if (this.getSource()) {\n      this.setStyle(this.style_);\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0]\n      ? sources[0].bandCount\n      : 4;\n  }\n\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(\n        frameState.extent,\n        this.renderedResolution_\n      ).filter((source) => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    const renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\n\nexport default WebGLTileLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
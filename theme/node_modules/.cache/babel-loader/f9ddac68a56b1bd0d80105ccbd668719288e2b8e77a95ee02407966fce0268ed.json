{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\n/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport var CustomTile = /*#__PURE__*/function (_Tile) {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  function CustomTile(tileCoord, state, src, extent, preemptive, jsonp) {\n    var _this;\n    _classCallCheck(this, CustomTile);\n    _this = _callSuper(this, CustomTile, [tileCoord, state]);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    _this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.jsonp_ = jsonp;\n    return _this;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  _inherits(CustomTile, _Tile);\n  return _createClass(CustomTile, [{\n    key: \"getImage\",\n    value: function getImage() {\n      return null;\n    }\n\n    /**\n     * Synchronously returns data at given coordinate (if available).\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {*} The data.\n     */\n  }, {\n    key: \"getData\",\n    value: function getData(coordinate) {\n      if (!this.grid_ || !this.keys_) {\n        return null;\n      }\n      var xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n      var yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n      var row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n      if (typeof row !== 'string') {\n        return null;\n      }\n      var code = row.charCodeAt(Math.floor(xRelative * row.length));\n      if (code >= 93) {\n        code--;\n      }\n      if (code >= 35) {\n        code--;\n      }\n      code -= 32;\n      var data = null;\n      if (code in this.keys_) {\n        var id = this.keys_[code];\n        if (this.data_ && id in this.data_) {\n          data = this.data_[id];\n        } else {\n          data = id;\n        }\n      }\n      return data;\n    }\n\n    /**\n     * Calls the callback (synchronously by default) with the available data\n     * for given coordinate (or `null` if not yet loaded).\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {function(*): void} callback Callback.\n     * @param {boolean} [request] If `true` the callback is always async.\n     *                               The tile data is requested if not yet loaded.\n     */\n  }, {\n    key: \"forDataAtCoordinate\",\n    value: function forDataAtCoordinate(coordinate, callback, request) {\n      var _this2 = this;\n      if (this.state == TileState.EMPTY && request === true) {\n        this.state = TileState.IDLE;\n        listenOnce(this, EventType.CHANGE, function (e) {\n          callback(this.getData(coordinate));\n        }, this);\n        this.loadInternal_();\n      } else {\n        if (request === true) {\n          setTimeout(function () {\n            callback(_this2.getData(coordinate));\n          }, 0);\n        } else {\n          callback(this.getData(coordinate));\n        }\n      }\n    }\n\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      return this.src_;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleError_\",\n    value: function handleError_() {\n      this.state = TileState.ERROR;\n      this.changed();\n    }\n\n    /**\n     * @param {!UTFGridJSON} json UTFGrid data.\n     * @private\n     */\n  }, {\n    key: \"handleLoad_\",\n    value: function handleLoad_(json) {\n      this.grid_ = json['grid'];\n      this.keys_ = json['keys'];\n      this.data_ = json['data'];\n      this.state = TileState.LOADED;\n      this.changed();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"loadInternal_\",\n    value: function loadInternal_() {\n      if (this.state == TileState.IDLE) {\n        this.state = TileState.LOADING;\n        if (this.jsonp_) {\n          requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n        } else {\n          var client = new XMLHttpRequest();\n          client.addEventListener('load', this.onXHRLoad_.bind(this));\n          client.addEventListener('error', this.onXHRError_.bind(this));\n          client.open('GET', this.src_);\n          client.send();\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @param {Event} event The load event.\n     */\n  }, {\n    key: \"onXHRLoad_\",\n    value: function onXHRLoad_(event) {\n      var client = /** @type {XMLHttpRequest} */event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        var response;\n        try {\n          response = /** @type {!UTFGridJSON} */\n          JSON.parse(client.responseText);\n        } catch (err) {\n          this.handleError_();\n          return;\n        }\n        this.handleLoad_(response);\n      } else {\n        this.handleError_();\n      }\n    }\n\n    /**\n     * @private\n     * @param {Event} event The error event.\n     */\n  }, {\n    key: \"onXHRError_\",\n    value: function onXHRError_(event) {\n      this.handleError_();\n    }\n\n    /**\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.preemptive_) {\n        this.loadInternal_();\n      } else {\n        this.setState(TileState.EMPTY);\n      }\n    }\n  }]);\n}(Tile);\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nvar UTFGrid = /*#__PURE__*/function (_TileSource) {\n  /**\n   * @param {Options} options Source options.\n   */\n  function UTFGrid(options) {\n    var _this3;\n    _classCallCheck(this, UTFGrid);\n    _this3 = _callSuper(this, UTFGrid, [{\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection\n    }]);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this3.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    _this3.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this3.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this3.jsonp_ = options.jsonp || false;\n    if (options.url) {\n      if (_this3.jsonp_) {\n        requestJSONP(options.url, _this3.handleTileJSONResponse.bind(_this3), _this3.handleTileJSONError.bind(_this3));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this3.onXHRLoad_.bind(_this3));\n        client.addEventListener('error', _this3.onXHRError_.bind(_this3));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this3.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n    return _this3;\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  _inherits(UTFGrid, _TileSource);\n  return _createClass(UTFGrid, [{\n    key: \"onXHRLoad_\",\n    value: function onXHRLoad_(event) {\n      var client = /** @type {XMLHttpRequest} */event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        var response;\n        try {\n          response = /** @type {import(\"./TileJSON.js\").Config} */\n          JSON.parse(client.responseText);\n        } catch (err) {\n          this.handleTileJSONError();\n          return;\n        }\n        this.handleTileJSONResponse(response);\n      } else {\n        this.handleTileJSONError();\n      }\n    }\n\n    /**\n     * @private\n     * @param {Event} event The error event.\n     */\n  }, {\n    key: \"onXHRError_\",\n    value: function onXHRError_(event) {\n      this.handleTileJSONError();\n    }\n\n    /**\n     * Return the template from TileJSON.\n     * @return {string|undefined} The template from TileJSON.\n     * @api\n     */\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.template_;\n    }\n\n    /**\n     * Calls the callback (synchronously by default) with the available data\n     * for given coordinate and resolution (or `null` if not yet loaded or\n     * in case of an error).\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {function(*): void} callback Callback.\n     * @param {boolean} [request] If `true` the callback is always async.\n     *                               The tile data is requested if not yet loaded.\n     * @api\n     */\n  }, {\n    key: \"forDataAtCoordinateAndResolution\",\n    value: function forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n      if (this.tileGrid) {\n        var z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n        var tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n        var tile = /** @type {!CustomTile} */\n        this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n        tile.forDataAtCoordinate(coordinate, callback, request);\n      } else {\n        if (request === true) {\n          setTimeout(function () {\n            callback(null);\n          }, 0);\n        } else {\n          callback(null);\n        }\n      }\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handleTileJSONError\",\n    value: function handleTileJSONError() {\n      this.setState('error');\n    }\n\n    /**\n     * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n     * @protected\n     * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n     */\n  }, {\n    key: \"handleTileJSONResponse\",\n    value: function handleTileJSONResponse(tileJSON) {\n      var epsg4326Projection = getProjection('EPSG:4326');\n      var sourceProjection = this.getProjection();\n      var extent;\n      if (tileJSON['bounds'] !== undefined) {\n        var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n        extent = applyTransform(tileJSON['bounds'], transform);\n      }\n      var gridExtent = extentFromProjection(sourceProjection);\n      var minZoom = tileJSON['minzoom'] || 0;\n      var maxZoom = tileJSON['maxzoom'] || 22;\n      var tileGrid = createXYZ({\n        extent: gridExtent,\n        maxZoom: maxZoom,\n        minZoom: minZoom\n      });\n      this.tileGrid = tileGrid;\n      this.template_ = tileJSON['template'];\n      var grids = tileJSON['grids'];\n      if (!grids) {\n        this.setState('error');\n        return;\n      }\n      this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n      if (tileJSON['attribution'] !== undefined) {\n        var attributionExtent = extent !== undefined ? extent : gridExtent;\n        this.setAttributions(function (frameState) {\n          if (intersects(attributionExtent, frameState.extent)) {\n            return [tileJSON['attribution']];\n          }\n          return null;\n        });\n      }\n      this.setState('ready');\n    }\n\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!CustomTile} Tile.\n     */\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y, pixelRatio, projection) {\n      var tileCoordKey = getKeyZXY(z, x, y);\n      if (this.tileCache.containsKey(tileCoordKey)) {\n        return this.tileCache.get(tileCoordKey);\n      }\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      var tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     */\n  }, {\n    key: \"useTile\",\n    value: function useTile(z, x, y) {\n      var tileCoordKey = getKeyZXY(z, x, y);\n      if (this.tileCache.containsKey(tileCoordKey)) {\n        this.tileCache.get(tileCoordKey);\n      }\n    }\n  }]);\n}(TileSource);\nexport default UTFGrid;","map":{"version":3,"names":["EventType","Tile","TileSource","TileState","applyTransform","intersects","createFromTemplates","nullTileUrlFunction","createXYZ","extentFromProjection","getKeyZXY","get","getProjection","getTransformFromProjections","listenOnce","jsonp","requestJSONP","CustomTile","_Tile","tileCoord","state","src","extent","preemptive","_this","_classCallCheck","_callSuper","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","_inherits","_createClass","key","value","getImage","getData","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","forDataAtCoordinate","callback","request","_this2","EMPTY","IDLE","CHANGE","e","loadInternal_","setTimeout","getKey","handleError_","ERROR","changed","handleLoad_","json","LOADED","LOADING","bind","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","target","status","response","JSON","parse","responseText","err","load","setState","UTFGrid","_TileSource","options","_this3","projection","zDirection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","Error","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","tile","getTile","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent","setAttributions","frameState","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","getTileCoordExtent","set","useTile"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/UTFGrid.js"],"sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this\n      );\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(() => {\n          callback(this.getData(coordinate));\n        }, 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (\n        this.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2],\n          1,\n          this.getProjection()\n        )\n      );\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n    const tile = new CustomTile(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.tileGrid.getTileCoordExtent(tileCoord),\n      this.preemptive_,\n      this.jsonp_\n    );\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
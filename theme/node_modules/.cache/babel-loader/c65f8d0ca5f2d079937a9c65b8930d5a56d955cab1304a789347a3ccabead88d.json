{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\n/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority as _getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals as equalsExtent, getForViewAndSize, isEmpty } from './extent.js';\nimport { defaults as defaultControls } from './control/defaults.js';\nimport { defaults as defaultInteractions } from './interaction/defaults.js';\nimport { equals } from './array.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\nimport { warn } from './console.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    var layers = layer.getLayers().getArray();\n    for (var i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map.js';\n *     import View from 'ol/View.js';\n *     import TileLayer from 'ol/layer/Tile.js';\n *     import OSM from 'ol/source/OSM.js';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar Map = /*#__PURE__*/function (_BaseObject) {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  function Map(options) {\n    var _this;\n    _classCallCheck(this, Map);\n    _this = _callSuper(this, Map);\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    _this.un;\n    var optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    _this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.loaded_ = true;\n\n    /** @private */\n    _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */\n    _this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    _this.animationDelay_ = _this.animationDelay_.bind(_this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    _this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    _this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.viewport_ = document.createElement('div');\n    _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    _this.viewport_.style.position = 'relative';\n    _this.viewport_.style.overflow = 'hidden';\n    _this.viewport_.style.width = '100%';\n    _this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainer_ = document.createElement('div');\n    _this.overlayContainer_.style.position = 'absolute';\n    _this.overlayContainer_.style.zIndex = '0';\n    _this.overlayContainer_.style.width = '100%';\n    _this.overlayContainer_.style.height = '100%';\n    _this.overlayContainer_.style.pointerEvents = 'none';\n    _this.overlayContainer_.className = 'ol-overlaycontainer';\n    _this.viewport_.appendChild(_this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainerStopEvent_ = document.createElement('div');\n    _this.overlayContainerStopEvent_.style.position = 'absolute';\n    _this.overlayContainerStopEvent_.style.zIndex = '0';\n    _this.overlayContainerStopEvent_.style.width = '100%';\n    _this.overlayContainerStopEvent_.style.height = '100%';\n    _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    _this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @private\n     * @type {HTMLElement|null}\n     */\n    _this.targetElement_ = null;\n\n    /**\n     * @type {ResizeObserver}\n     */\n    _this.resizeObserver_ = new ResizeObserver(function () {\n      return _this.updateSize();\n    });\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    _this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    _this.interactions = optionsInternal.interactions || defaultInteractions({\n      onFocusOnly: true\n    });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    _this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    _this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    _this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    _this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n    _this.addChangeListener(MapProperty.LAYERGROUP, _this.handleLayerGroupChanged_);\n    _this.addChangeListener(MapProperty.VIEW, _this.handleViewChanged_);\n    _this.addChangeListener(MapProperty.SIZE, _this.handleSizeChanged_);\n    _this.addChangeListener(MapProperty.TARGET, _this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    _this.setProperties(optionsInternal.values);\n    var map = _this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n    _this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n     */\n    function (event) {\n      event.element.setMap(_this);\n    });\n    _this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    });\n    _this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(_this);\n    });\n    _this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    });\n    _this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      _this.addOverlayInternal_(event.element);\n    });\n    _this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n     */\n    function (event) {\n      var id = event.element.getId();\n      if (id !== undefined) {\n        delete _this.overlayIdIndex_[id.toString()];\n      }\n      event.element.setMap(null);\n    });\n    _this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     */\n    function (control) {\n      control.setMap(_this);\n    });\n    _this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     */\n    function (interaction) {\n      interaction.setMap(_this);\n    });\n    _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n    return _this;\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  _inherits(Map, _BaseObject);\n  return _createClass(Map, [{\n    key: \"addControl\",\n    value: function addControl(control) {\n      this.getControls().push(control);\n    }\n\n    /**\n     * Add the given interaction to the map. If you want to add an interaction\n     * at another point of the collection use `getInteractions()` and the methods\n     * available on {@link module:ol/Collection~Collection}. This can be used to\n     * stop the event propagation from the handleEvent function. The interactions\n     * get to handle the events in the reverse order of this collection.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n     * @api\n     */\n  }, {\n    key: \"addInteraction\",\n    value: function addInteraction(interaction) {\n      this.getInteractions().push(interaction);\n    }\n\n    /**\n     * Adds the given layer to the top of this map. If you want to add a layer\n     * elsewhere in the stack, use `getLayers()` and the methods available on\n     * {@link module:ol/Collection~Collection}.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @api\n     */\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      var layers = this.getLayerGroup().getLayers();\n      layers.push(layer);\n    }\n\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n     * @private\n     */\n  }, {\n    key: \"handleLayerAdd_\",\n    value: function handleLayerAdd_(event) {\n      setLayerMapProperty(event.layer, this);\n    }\n\n    /**\n     * Add the given overlay to the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @api\n     */\n  }, {\n    key: \"addOverlay\",\n    value: function addOverlay(overlay) {\n      this.getOverlays().push(overlay);\n    }\n\n    /**\n     * This deals with map's overlay collection changes.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @private\n     */\n  }, {\n    key: \"addOverlayInternal_\",\n    value: function addOverlayInternal_(overlay) {\n      var id = overlay.getId();\n      if (id !== undefined) {\n        this.overlayIdIndex_[id.toString()] = overlay;\n      }\n      overlay.setMap(this);\n    }\n\n    /**\n     *\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      this.controls.clear();\n      this.interactions.clear();\n      this.overlays_.clear();\n      this.resizeObserver_.disconnect();\n      this.setTarget(null);\n      _superPropGet(Map, \"disposeInternal\", this, 3)([]);\n    }\n\n    /**\n     * Detect features that intersect a pixel on the viewport, and execute a\n     * callback with each intersecting feature. Layers included in the detection can\n     * be configured through the `layerFilter` option in `options`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n     *     called with two arguments. The first argument is one\n     *     {@link module:ol/Feature~Feature feature} or\n     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n     *     unmanaged layers. To stop detection, callback functions can return a\n     *     truthy value.\n     * @param {AtPixelOptions} [options] Optional options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template T\n     * @api\n     */\n  }, {\n    key: \"forEachFeatureAtPixel\",\n    value: function forEachFeatureAtPixel(pixel, callback, options) {\n      if (!this.frameState_ || !this.renderer_) {\n        return;\n      }\n      var coordinate = this.getCoordinateFromPixelInternal(pixel);\n      options = options !== undefined ? options : {};\n      var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n      var layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n      var checkWrapped = options.checkWrapped !== false;\n      return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    }\n\n    /**\n     * Get all features that intersect a pixel on the viewport.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [options] Optional options.\n     * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n     * an empty array if none were found.\n     * @api\n     */\n  }, {\n    key: \"getFeaturesAtPixel\",\n    value: function getFeaturesAtPixel(pixel, options) {\n      var features = [];\n      this.forEachFeatureAtPixel(pixel, function (feature) {\n        features.push(feature);\n      }, options);\n      return features;\n    }\n\n    /**\n     * Get all layers from all layer groups.\n     * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n     * @api\n     */\n  }, {\n    key: \"getAllLayers\",\n    value: function getAllLayers() {\n      var layers = [];\n      function addLayersFrom(layerGroup) {\n        layerGroup.forEach(function (layer) {\n          if (layer instanceof LayerGroup) {\n            addLayersFrom(layer.getLayers());\n          } else {\n            layers.push(layer);\n          }\n        });\n      }\n      addLayersFrom(this.getLayers());\n      return layers;\n    }\n\n    /**\n     * Detect if features intersect a pixel on the viewport. Layers included in the\n     * detection can be configured through the `layerFilter` option.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [options] Optional options.\n     * @return {boolean} Is there a feature at the given pixel?\n     * @api\n     */\n  }, {\n    key: \"hasFeatureAtPixel\",\n    value: function hasFeatureAtPixel(pixel, options) {\n      if (!this.frameState_ || !this.renderer_) {\n        return false;\n      }\n      var coordinate = this.getCoordinateFromPixelInternal(pixel);\n      options = options !== undefined ? options : {};\n      var layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n      var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n      var checkWrapped = options.checkWrapped !== false;\n      return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    }\n\n    /**\n     * Returns the coordinate in user projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     * @api\n     */\n  }, {\n    key: \"getEventCoordinate\",\n    value: function getEventCoordinate(event) {\n      return this.getCoordinateFromPixel(this.getEventPixel(event));\n    }\n\n    /**\n     * Returns the coordinate in view projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     */\n  }, {\n    key: \"getEventCoordinateInternal\",\n    value: function getEventCoordinateInternal(event) {\n      return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    }\n\n    /**\n     * Returns the map pixel position for a browser event relative to the viewport.\n     * @param {UIEvent|{clientX: number, clientY: number}} event Event.\n     * @return {import(\"./pixel.js\").Pixel} Pixel.\n     * @api\n     */\n  }, {\n    key: \"getEventPixel\",\n    value: function getEventPixel(event) {\n      var viewport = this.viewport_;\n      var viewportPosition = viewport.getBoundingClientRect();\n      var viewportSize = this.getSize();\n      var scaleX = viewportPosition.width / viewportSize[0];\n      var scaleY = viewportPosition.height / viewportSize[1];\n      var eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event ? /** @type {TouchEvent} */event.changedTouches[0] : (/** @type {MouseEvent} */event);\n      return [(eventPosition.clientX - viewportPosition.left) / scaleX, (eventPosition.clientY - viewportPosition.top) / scaleY];\n    }\n\n    /**\n     * Get the target in which this map is rendered.\n     * Note that this returns what is entered as an option or in setTarget:\n     * if that was an element, it returns an element; if a string, it returns that.\n     * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n     *     map is rendered in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getTarget\",\n    value: function getTarget() {\n      return /** @type {HTMLElement|string|undefined} */this.get(MapProperty.TARGET);\n    }\n\n    /**\n     * Get the DOM element into which this map is rendered. In contrast to\n     * `getTarget` this method always return an `Element`, or `null` if the\n     * map has no target.\n     * @return {HTMLElement} The element that the map is rendered in.\n     * @api\n     */\n  }, {\n    key: \"getTargetElement\",\n    value: function getTargetElement() {\n      return this.targetElement_;\n    }\n\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * user projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     * @api\n     */\n  }, {\n    key: \"getCoordinateFromPixel\",\n    value: function getCoordinateFromPixel(pixel) {\n      return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    }\n\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * map view projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     */\n  }, {\n    key: \"getCoordinateFromPixelInternal\",\n    value: function getCoordinateFromPixelInternal(pixel) {\n      var frameState = this.frameState_;\n      if (!frameState) {\n        return null;\n      }\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n\n    /**\n     * Get the map controls. Modifying this collection changes the controls\n     * associated with the map.\n     * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n     * @api\n     */\n  }, {\n    key: \"getControls\",\n    value: function getControls() {\n      return this.controls;\n    }\n\n    /**\n     * Get the map overlays. Modifying this collection changes the overlays\n     * associated with the map.\n     * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n     * @api\n     */\n  }, {\n    key: \"getOverlays\",\n    value: function getOverlays() {\n      return this.overlays_;\n    }\n\n    /**\n     * Get an overlay by its identifier (the value returned by overlay.getId()).\n     * Note that the index treats string and numeric identifiers as the same. So\n     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n     * @param {string|number} id Overlay identifier.\n     * @return {import(\"./Overlay.js\").default} Overlay.\n     * @api\n     */\n  }, {\n    key: \"getOverlayById\",\n    value: function getOverlayById(id) {\n      var overlay = this.overlayIdIndex_[id.toString()];\n      return overlay !== undefined ? overlay : null;\n    }\n\n    /**\n     * Get the map interactions. Modifying this collection changes the interactions\n     * associated with the map.\n     *\n     * Interactions are used for e.g. pan, zoom and rotate.\n     * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n     * @api\n     */\n  }, {\n    key: \"getInteractions\",\n    value: function getInteractions() {\n      return this.interactions;\n    }\n\n    /**\n     * Get the layergroup associated with this map.\n     * @return {LayerGroup} A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getLayerGroup\",\n    value: function getLayerGroup() {\n      return /** @type {LayerGroup} */this.get(MapProperty.LAYERGROUP);\n    }\n\n    /**\n     * Clear any existing layers and add layers to the map.\n     * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n     * @api\n     */\n  }, {\n    key: \"setLayers\",\n    value: function setLayers(layers) {\n      var group = this.getLayerGroup();\n      if (layers instanceof Collection) {\n        group.setLayers(layers);\n        return;\n      }\n      var collection = group.getLayers();\n      collection.clear();\n      collection.extend(layers);\n    }\n\n    /**\n     * Get the collection of layers associated with this map.\n     * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n     * @api\n     */\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      var layers = this.getLayerGroup().getLayers();\n      return layers;\n    }\n\n    /**\n     * @return {boolean} Layers have sources that are still loading.\n     */\n  }, {\n    key: \"getLoadingOrNotReady\",\n    value: function getLoadingOrNotReady() {\n      var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n        var state = layerStatesArray[i];\n        if (!state.visible) {\n          continue;\n        }\n        var renderer = state.layer.getRenderer();\n        if (renderer && !renderer.ready) {\n          return true;\n        }\n        var source = state.layer.getSource();\n        if (source && source.loading) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the user\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     * @api\n     */\n  }, {\n    key: \"getPixelFromCoordinate\",\n    value: function getPixelFromCoordinate(coordinate) {\n      var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n      return this.getPixelFromCoordinateInternal(viewCoordinate);\n    }\n\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the map view\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     */\n  }, {\n    key: \"getPixelFromCoordinateInternal\",\n    value: function getPixelFromCoordinateInternal(coordinate) {\n      var frameState = this.frameState_;\n      if (!frameState) {\n        return null;\n      }\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n\n    /**\n     * Get the map renderer.\n     * @return {import(\"./renderer/Map.js\").default|null} Renderer\n     */\n  }, {\n    key: \"getRenderer\",\n    value: function getRenderer() {\n      return this.renderer_;\n    }\n\n    /**\n     * Get the size of this map.\n     * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return /** @type {import(\"./size.js\").Size|undefined} */this.get(MapProperty.SIZE);\n    }\n\n    /**\n     * Get the view associated with this map. A view manages properties such as\n     * center and resolution.\n     * @return {View} The view that controls this map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return /** @type {View} */this.get(MapProperty.VIEW);\n    }\n\n    /**\n     * Get the element that serves as the map viewport.\n     * @return {HTMLElement} Viewport.\n     * @api\n     */\n  }, {\n    key: \"getViewport\",\n    value: function getViewport() {\n      return this.viewport_;\n    }\n\n    /**\n     * Get the element that serves as the container for overlays.  Elements added to\n     * this container will let mousedown and touchstart events through to the map,\n     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n     * events.\n     * @return {!HTMLElement} The map's overlay container.\n     */\n  }, {\n    key: \"getOverlayContainer\",\n    value: function getOverlayContainer() {\n      return this.overlayContainer_;\n    }\n\n    /**\n     * Get the element that serves as a container for overlays that don't allow\n     * event propagation. Elements added to this container won't let mousedown and\n     * touchstart events through to the map, so clicks and gestures on an overlay\n     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @return {!HTMLElement} The map's overlay container that stops events.\n     */\n  }, {\n    key: \"getOverlayContainerStopEvent\",\n    value: function getOverlayContainerStopEvent() {\n      return this.overlayContainerStopEvent_;\n    }\n\n    /**\n     * @return {!Document} The document where the map is displayed.\n     */\n  }, {\n    key: \"getOwnerDocument\",\n    value: function getOwnerDocument() {\n      var targetElement = this.getTargetElement();\n      return targetElement ? targetElement.ownerDocument : document;\n    }\n\n    /**\n     * @param {import(\"./Tile.js\").default} tile Tile.\n     * @param {string} tileSourceKey Tile source key.\n     * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n     * @param {number} tileResolution Tile resolution.\n     * @return {number} Tile priority.\n     */\n  }, {\n    key: \"getTilePriority\",\n    value: function getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n      return _getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n    }\n\n    /**\n     * @param {UIEvent} browserEvent Browser event.\n     * @param {string} [type] Type.\n     */\n  }, {\n    key: \"handleBrowserEvent\",\n    value: function handleBrowserEvent(browserEvent, type) {\n      type = type || browserEvent.type;\n      var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n      this.handleMapBrowserEvent(mapBrowserEvent);\n    }\n\n    /**\n     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n     */\n  }, {\n    key: \"handleMapBrowserEvent\",\n    value: function handleMapBrowserEvent(mapBrowserEvent) {\n      if (!this.frameState_) {\n        // With no view defined, we cannot translate pixels into geographical\n        // coordinates so interactions cannot be used.\n        return;\n      }\n      var originalEvent = /** @type {PointerEvent} */\n      mapBrowserEvent.originalEvent;\n      var eventType = originalEvent.type;\n      if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n        var doc = this.getOwnerDocument();\n        var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n        var target = /** @type {Node} */originalEvent.target;\n        if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n          return;\n        }\n      }\n      mapBrowserEvent.frameState = this.frameState_;\n      if (this.dispatchEvent(mapBrowserEvent) !== false) {\n        var interactionsArray = this.getInteractions().getArray().slice();\n        for (var i = interactionsArray.length - 1; i >= 0; i--) {\n          var interaction = interactionsArray[i];\n          if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n            continue;\n          }\n          var cont = interaction.handleEvent(mapBrowserEvent);\n          if (!cont || mapBrowserEvent.propagationStopped) {\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"handlePostRender\",\n    value: function handlePostRender() {\n      var frameState = this.frameState_;\n\n      // Manage the tile queue\n      // Image loads are expensive and a limited resource, so try to use them\n      // efficiently:\n      // * When the view is static we allow a large number of parallel tile loads\n      //   to complete the frame as quickly as possible.\n      // * When animating or interacting, image loads can cause janks, so we reduce\n      //   the maximum number of loads per frame and limit the number of parallel\n      //   tile loads to remain reactive to view changes and to reduce the chance of\n      //   loading tiles that will quickly disappear from view.\n      var tileQueue = this.tileQueue_;\n      if (!tileQueue.isEmpty()) {\n        var maxTotalLoading = this.maxTilesLoading_;\n        var maxNewLoads = maxTotalLoading;\n        if (frameState) {\n          var hints = frameState.viewHints;\n          if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n            var lowOnFrameBudget = Date.now() - frameState.time > 8;\n            maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n            maxNewLoads = lowOnFrameBudget ? 0 : 2;\n          }\n        }\n        if (tileQueue.getTilesLoading() < maxTotalLoading) {\n          tileQueue.reprioritize(); // FIXME only call if view has changed\n          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n        }\n      }\n      if (frameState && this.renderer_ && !frameState.animate) {\n        if (this.renderComplete_ === true) {\n          if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n            this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n          }\n          if (this.loaded_ === false) {\n            this.loaded_ = true;\n            this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n          }\n        } else if (this.loaded_ === true) {\n          this.loaded_ = false;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n        }\n      }\n      var postRenderFunctions = this.postRenderFunctions_;\n      for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n        postRenderFunctions[i](this, frameState);\n      }\n      postRenderFunctions.length = 0;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSizeChanged_\",\n    value: function handleSizeChanged_() {\n      if (this.getView() && !this.getView().getAnimating()) {\n        this.getView().resolveConstraints(0);\n      }\n      this.render();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleTargetChanged_\",\n    value: function handleTargetChanged_() {\n      if (this.mapBrowserEventHandler_) {\n        for (var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n          unlistenByKey(this.targetChangeHandlerKeys_[i]);\n        }\n        this.targetChangeHandlerKeys_ = null;\n        this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n        this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n        this.mapBrowserEventHandler_.dispose();\n        this.mapBrowserEventHandler_ = null;\n        removeNode(this.viewport_);\n      }\n      if (this.targetElement_) {\n        this.resizeObserver_.unobserve(this.targetElement_);\n        var rootNode = this.targetElement_.getRootNode();\n        if (rootNode instanceof ShadowRoot) {\n          this.resizeObserver_.unobserve(rootNode.host);\n        }\n        this.setSize(undefined);\n      }\n\n      // target may be undefined, null, a string or an Element.\n      // If it's a string we convert it to an Element before proceeding.\n      // If it's not now an Element we remove the viewport from the DOM.\n      // If it's an Element we append the viewport element to it.\n\n      var target = this.getTarget();\n      var targetElement = typeof target === 'string' ? document.getElementById(target) : target;\n      this.targetElement_ = targetElement;\n      if (!targetElement) {\n        if (this.renderer_) {\n          clearTimeout(this.postRenderTimeoutHandle_);\n          this.postRenderTimeoutHandle_ = undefined;\n          this.postRenderFunctions_.length = 0;\n          this.renderer_.dispose();\n          this.renderer_ = null;\n        }\n        if (this.animationDelayKey_) {\n          cancelAnimationFrame(this.animationDelayKey_);\n          this.animationDelayKey_ = undefined;\n        }\n      } else {\n        targetElement.appendChild(this.viewport_);\n        if (!this.renderer_) {\n          this.renderer_ = new CompositeMapRenderer(this);\n        }\n        this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n        for (var key in MapBrowserEventType) {\n          this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n        }\n        this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n        this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n          passive: false\n        } : false);\n        var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n        this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n        var _rootNode = targetElement.getRootNode();\n        if (_rootNode instanceof ShadowRoot) {\n          this.resizeObserver_.observe(_rootNode.host);\n        }\n        this.resizeObserver_.observe(targetElement);\n      }\n      this.updateSize();\n      // updateSize calls setSize, so no need to call this.render\n      // ourselves here.\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleTileChange_\",\n    value: function handleTileChange_() {\n      this.render();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleViewPropertyChanged_\",\n    value: function handleViewPropertyChanged_() {\n      this.render();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleViewChanged_\",\n    value: function handleViewChanged_() {\n      if (this.viewPropertyListenerKey_) {\n        unlistenByKey(this.viewPropertyListenerKey_);\n        this.viewPropertyListenerKey_ = null;\n      }\n      if (this.viewChangeListenerKey_) {\n        unlistenByKey(this.viewChangeListenerKey_);\n        this.viewChangeListenerKey_ = null;\n      }\n      var view = this.getView();\n      if (view) {\n        this.updateViewportSize_(this.getSize());\n        this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n        this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n        view.resolveConstraints(0);\n      }\n      this.render();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleLayerGroupChanged_\",\n    value: function handleLayerGroupChanged_() {\n      if (this.layerGroupPropertyListenerKeys_) {\n        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n        this.layerGroupPropertyListenerKeys_ = null;\n      }\n      var layerGroup = this.getLayerGroup();\n      if (layerGroup) {\n        this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n        this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n      }\n      this.render();\n    }\n\n    /**\n     * @return {boolean} Is rendered.\n     */\n  }, {\n    key: \"isRendered\",\n    value: function isRendered() {\n      return !!this.frameState_;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"animationDelay_\",\n    value: function animationDelay_() {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }\n\n    /**\n     * Requests an immediate render in a synchronous manner.\n     * @api\n     */\n  }, {\n    key: \"renderSync\",\n    value: function renderSync() {\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n      }\n      this.animationDelay_();\n    }\n\n    /**\n     * Redraws all text after new fonts have loaded\n     */\n  }, {\n    key: \"redrawText\",\n    value: function redrawText() {\n      var layerStates = this.getLayerGroup().getLayerStatesArray();\n      for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n        var layer = layerStates[i].layer;\n        if (layer.hasRenderer()) {\n          layer.getRenderer().handleFontsChanged();\n        }\n      }\n    }\n\n    /**\n     * Request a map rendering (at the next animation frame).\n     * @api\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.renderer_ && this.animationDelayKey_ === undefined) {\n        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n      }\n    }\n\n    /**\n     * This method is meant to be called in a layer's `prerender` listener. It causes all collected\n     * declutter items to be decluttered and rendered on the map immediately. This is useful for\n     * layers that need to appear entirely above the decluttered items of layers lower in the layer\n     * stack.\n     * @api\n     */\n  }, {\n    key: \"flushDeclutterItems\",\n    value: function flushDeclutterItems() {\n      var frameState = this.frameState_;\n      if (!frameState) {\n        return;\n      }\n      this.renderer_.flushDeclutterItems(frameState);\n    }\n\n    /**\n     * Remove the given control from the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n     *     if the control was not found).\n     * @api\n     */\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(control) {\n      return this.getControls().remove(control);\n    }\n\n    /**\n     * Remove the given interaction from the map.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n     * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n     *     undefined if the interaction was not found).\n     * @api\n     */\n  }, {\n    key: \"removeInteraction\",\n    value: function removeInteraction(interaction) {\n      return this.getInteractions().remove(interaction);\n    }\n\n    /**\n     * Removes the given layer from the map.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n     *     layer was not found).\n     * @api\n     */\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer(layer) {\n      var layers = this.getLayerGroup().getLayers();\n      return layers.remove(layer);\n    }\n\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n     * @private\n     */\n  }, {\n    key: \"handleLayerRemove_\",\n    value: function handleLayerRemove_(event) {\n      removeLayerMapProperty(event.layer);\n    }\n\n    /**\n     * Remove the given overlay from the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n     *     if the overlay was not found).\n     * @api\n     */\n  }, {\n    key: \"removeOverlay\",\n    value: function removeOverlay(overlay) {\n      return this.getOverlays().remove(overlay);\n    }\n\n    /**\n     * @param {number} time Time.\n     * @private\n     */\n  }, {\n    key: \"renderFrame_\",\n    value: function renderFrame_(time) {\n      var _this2 = this;\n      var size = this.getSize();\n      var view = this.getView();\n      var previousFrameState = this.frameState_;\n      /** @type {?FrameState} */\n      var frameState = null;\n      if (size !== undefined && hasArea(size) && view && view.isDef()) {\n        var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n        var viewState = view.getState();\n        frameState = {\n          animate: false,\n          coordinateToPixelTransform: this.coordinateToPixelTransform_,\n          declutterTree: null,\n          extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n          index: this.frameIndex_++,\n          layerIndex: 0,\n          layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n          pixelRatio: this.pixelRatio_,\n          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n          postRenderFunctions: [],\n          size: size,\n          tileQueue: this.tileQueue_,\n          time: time,\n          usedTiles: {},\n          viewState: viewState,\n          viewHints: viewHints,\n          wantedTiles: {},\n          mapId: getUid(this),\n          renderTargets: {}\n        };\n        if (viewState.nextCenter && viewState.nextResolution) {\n          var rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n          frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n        }\n      }\n      this.frameState_ = frameState;\n      this.renderer_.renderFrame(frameState);\n      if (frameState) {\n        if (frameState.animate) {\n          this.render();\n        }\n        Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n        if (previousFrameState) {\n          var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equalsExtent(frameState.extent, this.previousExtent_);\n          if (moveStart) {\n            this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n          }\n        }\n        var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equalsExtent(frameState.extent, this.previousExtent_);\n        if (idle) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n          clone(frameState.extent, this.previousExtent_);\n        }\n      }\n      this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n      this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n      if (!this.postRenderTimeoutHandle_) {\n        this.postRenderTimeoutHandle_ = setTimeout(function () {\n          _this2.postRenderTimeoutHandle_ = undefined;\n          _this2.handlePostRender();\n        }, 0);\n      }\n    }\n\n    /**\n     * Sets the layergroup of this map.\n     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setLayerGroup\",\n    value: function setLayerGroup(layerGroup) {\n      var oldLayerGroup = this.getLayerGroup();\n      if (oldLayerGroup) {\n        this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n      }\n      this.set(MapProperty.LAYERGROUP, layerGroup);\n    }\n\n    /**\n     * Set the size of this map.\n     * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.set(MapProperty.SIZE, size);\n    }\n\n    /**\n     * Set the target element to render this map into.\n     * @param {HTMLElement|string} [target] The Element or id of the Element\n     *     that the map is rendered in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setTarget\",\n    value: function setTarget(target) {\n      this.set(MapProperty.TARGET, target);\n    }\n\n    /**\n     * Set the view for this map.\n     * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n     * It is also possible to pass a promise that resolves to options for constructing a view.  This\n     * alternative allows view properties to be resolved by sources or other components that load\n     * view-related metadata.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setView\",\n    value: function setView(view) {\n      if (!view || view instanceof View) {\n        this.set(MapProperty.VIEW, view);\n        return;\n      }\n      this.set(MapProperty.VIEW, new View());\n      var map = this;\n      view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    /**\n     * Force a recalculation of the map viewport size.  This should be called when\n     * third-party code changes the size of the map viewport.\n     * @api\n     */\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var targetElement = this.getTargetElement();\n      var size = undefined;\n      if (targetElement) {\n        var computedStyle = getComputedStyle(targetElement);\n        var width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n        var height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n        if (!isNaN(width) && !isNaN(height)) {\n          size = [width, height];\n          if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n            warn(\"No map visible because the map container's width or height are 0.\");\n          }\n        }\n      }\n      var oldSize = this.getSize();\n      if (size && (!oldSize || !equals(size, oldSize))) {\n        this.setSize(size);\n        this.updateViewportSize_(size);\n      }\n    }\n\n    /**\n     * Recomputes the viewport size and save it on the view object (if any)\n     * @param {import(\"./size.js\").Size|undefined} size The size.\n     * @private\n     */\n  }, {\n    key: \"updateViewportSize_\",\n    value: function updateViewportSize_(size) {\n      var view = this.getView();\n      if (view) {\n        view.setViewportSize(size);\n      }\n    }\n  }]);\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  var values = {};\n  var layerGroup = options.layers && typeof (/** @type {?} */options.layers.getLayers) === 'function' ? (/** @type {LayerGroup} */options.layers) : new LayerGroup({\n    layers: (/** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */\n    options.layers)\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  var controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.controls.getArray) === 'function', 'Expected `controls` to be an array or an `ol/Collection.js`');\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  var interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.interactions.getArray) === 'function', 'Expected `interactions` to be an array or an `ol/Collection.js`');\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  var overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.overlays.getArray) === 'function', 'Expected `overlays` to be an array or an `ol/Collection.js`');\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\nexport default Map;","map":{"version":3,"names":["BaseObject","Collection","CollectionEventType","CompositeMapRenderer","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","equalsExtent","getForViewAndSize","isEmpty","defaults","defaultControls","defaultInteractions","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","warn","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","Map","_BaseObject","options","_this","_classCallCheck","_callSuper","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","targetElement_","resizeObserver_","ResizeObserver","updateSize","controls","interactions","onFocusOnly","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","id","getId","toString","control","interaction","_inherits","_createClass","key","value","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","overlay","getOverlays","disposeInternal","clear","disconnect","setTarget","_superPropGet","forEachFeatureAtPixel","pixel","callback","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewport","viewportPosition","getBoundingClientRect","viewportSize","getSize","scaleX","scaleY","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","target","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","Date","now","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","unobserve","ShadowRoot","host","setSize","getElementById","clearTimeout","cancelAnimationFrame","passive","KEYPRESS","observe","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderFrame_","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","flushDeclutterItems","removeControl","remove","removeInteraction","removeLayer","removeOverlay","_this2","size","previousFrameState","isDef","getHints","viewState","getState","declutterTree","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","Array","prototype","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","oldSize","setViewportSize","isArray"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/Map.js"],"sourcesContent":["/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals as equalsExtent,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {defaults as defaultControls} from './control/defaults.js';\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\nimport {equals} from './array.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {getUid} from './util.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\nimport {warn} from './console.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map.js';\n *     import View from 'ol/View.js';\n *     import TileLayer from 'ol/layer/Tile.js';\n *     import OSM from 'ol/source/OSM.js';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @private\n     * @type {HTMLElement|null}\n     */\n    this.targetElement_ = null;\n\n    /**\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver_ = new ResizeObserver(() => this.updateSize());\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions =\n      optionsInternal.interactions ||\n      defaultInteractions({\n        onFocusOnly: true,\n      });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n       */\n      (event) => {\n        event.element.setMap(this);\n      }\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(null);\n      }\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(this);\n      }\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(null);\n      }\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        this.addOverlayInternal_(event.element);\n      }\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        const id = event.element.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }\n    );\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       */\n      (control) => {\n        control.setMap(this);\n      }\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       */\n      (interaction) => {\n        interaction.setMap(this);\n      }\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.resizeObserver_.disconnect();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      options\n    );\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewport = this.viewport_;\n    const viewportPosition = viewport.getBoundingClientRect();\n    const viewportSize = this.getSize();\n    const scaleX = viewportPosition.width / viewportSize[0];\n    const scaleY = viewportPosition.height / viewportSize[1];\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      (eventPosition.clientX - viewportPosition.left) / scaleX,\n      (eventPosition.clientY - viewportPosition.top) / scaleY,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    return this.targetElement_;\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice(0, 2)\n    );\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(\n            RenderEventType.RENDERCOMPLETE,\n            frameState\n          );\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(\n            new MapEvent(MapEventType.LOADEND, this, frameState)\n          );\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(\n          new MapEvent(MapEventType.LOADSTART, this, frameState)\n        );\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    if (this.targetElement_) {\n      this.resizeObserver_.unobserve(this.targetElement_);\n      const rootNode = this.targetElement_.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.unobserve(rootNode.host);\n      }\n      this.setSize(undefined);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const target = this.getTarget();\n    const targetElement =\n      typeof target === 'string' ? document.getElementById(target) : target;\n    this.targetElement_ = targetElement;\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n      ];\n      const rootNode = targetElement.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.observe(rootNode.host);\n      }\n      this.resizeObserver_.observe(targetElement);\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_(this.getSize());\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * @private\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * This method is meant to be called in a layer's `prerender` listener. It causes all collected\n   * declutter items to be decluttered and rendered on the map immediately. This is useful for\n   * layers that need to appear entirely above the decluttered items of layers lower in the layer\n   * stack.\n   * @api\n   */\n  flushDeclutterItems() {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return;\n    }\n    this.renderer_.flushDeclutterItems(frameState);\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {},\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation)\n          ? viewState.rotation\n          : viewState.nextRotation;\n\n        frameState.nextExtent = getForViewAndSize(\n          viewState.nextCenter,\n          viewState.nextResolution,\n          rotation,\n          size\n        );\n      }\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equalsExtent(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equalsExtent(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.renderComplete_ =\n      this.hasListener(MapEventType.LOADSTART) ||\n      this.hasListener(MapEventType.LOADEND) ||\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\n        ? !this.tileQueue_.getTilesLoading() &&\n          !this.tileQueue_.getCount() &&\n          !this.getLoadingOrNotReady()\n        : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (\n          !hasArea(size) &&\n          !!(\n            targetElement.offsetWidth ||\n            targetElement.offsetHeight ||\n            targetElement.getClientRects().length\n          )\n        ) {\n          warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    const oldSize = this.getSize();\n    if (size && (!oldSize || !equals(size, oldSize))) {\n      this.setSize(size);\n      this.updateViewportSize_(size);\n    }\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @param {import(\"./size.js\").Size|undefined} size The size.\n   * @private\n   */\n  updateViewportSize_(size) {\n    const view = this.getView();\n    if (view) {\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({\n          layers:\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\n              options.layers\n            ),\n        });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        'Expected `controls` to be an array or an `ol/Collection.js`'\n      );\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        'Expected `interactions` to be an array or an `ol/Collection.js`'\n      );\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        'Expected `overlays` to be an array or an `ol/Collection.js`'\n      );\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default Map;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,aAAa;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,oBAAoB,MAAM,yBAAyB;AAC1D,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,UAAU,IAAGC,UAAU,QAAO,kBAAkB;AACvD,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,sBAAsB,MAAM,6BAA6B;AAChE,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,SAAS,IAAGC,eAAe,IAAfA,gBAAe,QAAO,gBAAgB;AACzD,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAAQC,kBAAkB,EAAEC,uBAAuB,QAAO,UAAU;AACpE,SAAQC,IAAI,QAAO,gBAAgB;AACnC,SACEC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,QACpB,gBAAgB;AACvB,SAAQC,MAAM,QAAO,cAAc;AACnC,SACEC,KAAK,EACLC,mBAAmB,EACnBC,MAAM,IAAIC,YAAY,EACtBC,iBAAiB,EACjBC,OAAO,QACF,aAAa;AACpB,SAAQC,QAAQ,IAAIC,eAAe,QAAO,uBAAuB;AACjE,SAAQD,QAAQ,IAAIE,mBAAmB,QAAO,2BAA2B;AACzE,SAAQN,MAAM,QAAO,YAAY;AACjC,SAAQO,kBAAkB,EAAEC,gBAAgB,QAAO,WAAW;AAC9D,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,MAAM,EAAEC,aAAa,QAAO,aAAa;AACjD,SAAQC,UAAU,QAAO,UAAU;AACnC,SAAQC,IAAI,QAAO,cAAc;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASC,sBAAsBA,CAACC,KAAK,EAAE;EACrC,IAAIA,KAAK,YAAY1C,KAAK,EAAE;IAC1B0C,KAAK,CAACC,cAAc,CAAC,IAAI,CAAC;IAC1B;EACF;EACA,IAAID,KAAK,YAAYzC,UAAU,EAAE;IAC/ByC,KAAK,CAACE,SAAS,CAAC,CAAC,CAACC,OAAO,CAACJ,sBAAsB,CAAC;EACnD;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASK,mBAAmBA,CAACJ,KAAK,EAAEK,GAAG,EAAE;EACvC,IAAIL,KAAK,YAAY1C,KAAK,EAAE;IAC1B0C,KAAK,CAACC,cAAc,CAACI,GAAG,CAAC;IACzB;EACF;EACA,IAAIL,KAAK,YAAYzC,UAAU,EAAE;IAC/B,IAAM+C,MAAM,GAAGN,KAAK,CAACE,SAAS,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;IAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGH,MAAM,CAACI,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC/CJ,mBAAmB,CAACE,MAAM,CAACE,CAAC,CAAC,EAAEH,GAAG,CAAC;IACrC;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
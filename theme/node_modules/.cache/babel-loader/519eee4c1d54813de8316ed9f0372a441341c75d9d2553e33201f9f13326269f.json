{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter, isEmpty } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nvar Polygon = /*#__PURE__*/function (_SimpleGeometry) {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  function Polygon(coordinates, layout, ends) {\n    var _this;\n    _classCallCheck(this, Polygon);\n    _this = _callSuper(this, Polygon);\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    _this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    _this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    _this.orientedFlatCoordinates_ = null;\n    if (layout !== undefined && ends) {\n      _this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n      _this.ends_ = ends;\n    } else {\n      _this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, layout);\n    }\n    return _this;\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  _inherits(Polygon, _SimpleGeometry);\n  return _createClass(Polygon, [{\n    key: \"appendLinearRing\",\n    value: function appendLinearRing(linearRing) {\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n      } else {\n        extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n      }\n      this.ends_.push(this.flatCoordinates.length);\n      this.changed();\n    }\n\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Polygon} Clone.\n     * @api\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n      polygon.applyProperties(this);\n      return polygon;\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n        return minSquaredDistance;\n      }\n      if (this.maxDeltaRevision_ != this.getRevision()) {\n        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n        this.maxDeltaRevision_ = this.getRevision();\n      }\n      return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n  }, {\n    key: \"containsXY\",\n    value: function containsXY(x, y) {\n      return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    }\n\n    /**\n     * Return the area of the polygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    }\n\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for polygons.\n     *\n     * @param {boolean} [right] Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n     * @api\n     */\n  }, {\n    key: \"getCoordinates\",\n    value: function getCoordinates(right) {\n      var flatCoordinates;\n      if (right !== undefined) {\n        flatCoordinates = this.getOrientedFlatCoordinates().slice();\n        orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n      } else {\n        flatCoordinates = this.flatCoordinates;\n      }\n      return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n    }\n\n    /**\n     * @return {Array<number>} Ends.\n     */\n  }, {\n    key: \"getEnds\",\n    value: function getEnds() {\n      return this.ends_;\n    }\n\n    /**\n     * @return {Array<number>} Interior point.\n     */\n  }, {\n    key: \"getFlatInteriorPoint\",\n    value: function getFlatInteriorPoint() {\n      if (this.flatInteriorPointRevision_ != this.getRevision()) {\n        var flatCenter = getCenter(this.getExtent());\n        this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n        this.flatInteriorPointRevision_ = this.getRevision();\n      }\n      return /** @type {import(\"../coordinate.js\").Coordinate} */this.flatInteriorPoint_;\n    }\n\n    /**\n     * Return an interior point of the polygon.\n     * @return {Point} Interior point as XYM coordinate, where M is the\n     * length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n  }, {\n    key: \"getInteriorPoint\",\n    value: function getInteriorPoint() {\n      return new Point(this.getFlatInteriorPoint(), 'XYM');\n    }\n\n    /**\n     * Return the number of rings of the polygon,  this includes the exterior\n     * ring and any interior rings.\n     *\n     * @return {number} Number of rings.\n     * @api\n     */\n  }, {\n    key: \"getLinearRingCount\",\n    value: function getLinearRingCount() {\n      return this.ends_.length;\n    }\n\n    /**\n     * Return the Nth linear ring of the polygon geometry. Return `null` if the\n     * given index is out of range.\n     * The exterior linear ring is available at index `0` and the interior rings\n     * at index `1` and beyond.\n     *\n     * @param {number} index Index.\n     * @return {LinearRing|null} Linear ring.\n     * @api\n     */\n  }, {\n    key: \"getLinearRing\",\n    value: function getLinearRing(index) {\n      if (index < 0 || this.ends_.length <= index) {\n        return null;\n      }\n      return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n\n    /**\n     * Return the linear rings of the polygon.\n     * @return {Array<LinearRing>} Linear rings.\n     * @api\n     */\n  }, {\n    key: \"getLinearRings\",\n    value: function getLinearRings() {\n      var layout = this.layout;\n      var flatCoordinates = this.flatCoordinates;\n      var ends = this.ends_;\n      var linearRings = [];\n      var offset = 0;\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n        linearRings.push(linearRing);\n        offset = end;\n      }\n      return linearRings;\n    }\n\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n  }, {\n    key: \"getOrientedFlatCoordinates\",\n    value: function getOrientedFlatCoordinates() {\n      if (this.orientedRevision_ != this.getRevision()) {\n        var flatCoordinates = this.flatCoordinates;\n        if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n          this.orientedFlatCoordinates_ = flatCoordinates;\n        } else {\n          this.orientedFlatCoordinates_ = flatCoordinates.slice();\n          this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n        }\n        this.orientedRevision_ = this.getRevision();\n      }\n      return /** @type {Array<number>} */this.orientedFlatCoordinates_;\n    }\n\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {Polygon} Simplified Polygon.\n     * @protected\n     */\n  }, {\n    key: \"getSimplifiedGeometryInternal\",\n    value: function getSimplifiedGeometryInternal(squaredTolerance) {\n      /** @type {Array<number>} */\n      var simplifiedFlatCoordinates = [];\n      /** @type {Array<number>} */\n      var simplifiedEnds = [];\n      simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n      return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'Polygon';\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    }\n\n    /**\n     * Set the coordinates of the polygon.\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n     * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n     * @api\n     */\n  }, {\n    key: \"setCoordinates\",\n    value: function setCoordinates(coordinates, layout) {\n      this.setLayout(layout, coordinates, 2);\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = [];\n      }\n      var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n      this.changed();\n    }\n  }]);\n}(SimpleGeometry);\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  var flatCoordinates = [];\n  for (var i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var center = circle.getCenter();\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n  for (var i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (var j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  var ends = [flatCoordinates.length];\n  var polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var stride = polygon.getStride();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = angle ? angle : 0;\n  for (var i = 0; i <= sides; ++i) {\n    var offset = i * stride;\n    var _angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(_angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(_angle);\n  }\n  polygon.changed();\n}","map":{"version":3,"names":["LinearRing","Point","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","getCenter","isEmpty","deflateCoordinatesArray","extend","getInteriorPointOfArray","inflateCoordinatesArray","intersectsLinearRingArray","linearRingsAreOriented","orientLinearRings","linearRings","linearRingsArea","linearRingsContainsXY","modulo","quantizeArray","offset","sphereOffset","Polygon","_SimpleGeometry","coordinates","layout","ends","_this","_classCallCheck","_callSuper","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","_inherits","_createClass","key","value","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","clone","polygon","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","containsXY","getOrientedFlatCoordinates","getArea","getCoordinates","right","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","index","getLinearRings","i","ii","end","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","getType","intersectsExtent","extent","setLayout","circular","center","radius","n","sphereRadius","PI","fromExtent","Error","minX","minY","maxX","maxY","fromCircle","circle","sides","angle","getStride","getLayout","arrayLength","Array","j","makeRegular","getRadius","startAngle","cos","sin"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\n      this.flatInteriorPoint_\n    );\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @module ol/control/ZoomSlider\n */\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { clamp } from '../math.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nvar ZoomSlider = /*#__PURE__*/function (_Control) {\n  /**\n   * @param {Options} [options] Zoom slider options.\n   */\n  function ZoomSlider(options) {\n    var _this;\n    _classCallCheck(this, ZoomSlider);\n    options = options ? options : {};\n    _this = _callSuper(this, ZoomSlider, [{\n      target: options.target,\n      element: document.createElement('div'),\n      render: options.render\n    }]);\n\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    _this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    _this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    _this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.startX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.startY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    _this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    _this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = _this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n    containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n    return _this;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  _inherits(ZoomSlider, _Control);\n  return _createClass(ZoomSlider, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      _superPropGet(ZoomSlider, \"setMap\", this, 3)([map]);\n      if (map) {\n        map.render();\n      }\n    }\n\n    /**\n     * Initializes the slider element. This will determine and set this controls\n     * direction_ and also constrain the dragging of the thumb to always be within\n     * the bounds of the container.\n     *\n     * @return {boolean} Initialization successful\n     * @private\n     */\n  }, {\n    key: \"initSlider_\",\n    value: function initSlider_() {\n      var container = this.element;\n      var containerWidth = container.offsetWidth;\n      var containerHeight = container.offsetHeight;\n      if (containerWidth === 0 && containerHeight === 0) {\n        return this.sliderInitialized_ = false;\n      }\n      var containerStyle = getComputedStyle(container);\n      containerWidth -= parseFloat(containerStyle['paddingRight']) + parseFloat(containerStyle['paddingLeft']);\n      containerHeight -= parseFloat(containerStyle['paddingTop']) + parseFloat(containerStyle['paddingBottom']);\n      var thumb = /** @type {HTMLElement} */container.firstElementChild;\n      var thumbStyle = getComputedStyle(thumb);\n      var thumbWidth = thumb.offsetWidth + parseFloat(thumbStyle['marginRight']) + parseFloat(thumbStyle['marginLeft']);\n      var thumbHeight = thumb.offsetHeight + parseFloat(thumbStyle['marginTop']) + parseFloat(thumbStyle['marginBottom']);\n      this.thumbSize_ = [thumbWidth, thumbHeight];\n      if (containerWidth > containerHeight) {\n        this.direction_ = Direction.HORIZONTAL;\n        this.widthLimit_ = containerWidth - thumbWidth;\n      } else {\n        this.direction_ = Direction.VERTICAL;\n        this.heightLimit_ = containerHeight - thumbHeight;\n      }\n      return this.sliderInitialized_ = true;\n    }\n\n    /**\n     * @param {PointerEvent} event The browser event to handle.\n     * @private\n     */\n  }, {\n    key: \"handleContainerClick_\",\n    value: function handleContainerClick_(event) {\n      var view = this.getMap().getView();\n      var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n      var resolution = this.getResolutionForPosition_(relativePosition);\n      var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n      view.animateInternal({\n        zoom: zoom,\n        duration: this.duration_,\n        easing: easeOut\n      });\n    }\n\n    /**\n     * Handle dragger start events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n  }, {\n    key: \"handleDraggerStart_\",\n    value: function handleDraggerStart_(event) {\n      if (!this.dragging_ && event.target === this.element.firstElementChild) {\n        var element = /** @type {HTMLElement} */\n        this.element.firstElementChild;\n        this.getMap().getView().beginInteraction();\n        this.startX_ = event.clientX - parseFloat(element.style.left);\n        this.startY_ = event.clientY - parseFloat(element.style.top);\n        this.dragging_ = true;\n        if (this.dragListenerKeys_.length === 0) {\n          var drag = this.handleDraggerDrag_;\n          var end = this.handleDraggerEnd_;\n          var doc = this.getMap().getOwnerDocument();\n          this.dragListenerKeys_.push(listen(doc, PointerEventType.POINTERMOVE, drag, this), listen(doc, PointerEventType.POINTERUP, end, this));\n        }\n      }\n    }\n\n    /**\n     * Handle dragger drag events.\n     *\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n  }, {\n    key: \"handleDraggerDrag_\",\n    value: function handleDraggerDrag_(event) {\n      if (this.dragging_) {\n        var deltaX = event.clientX - this.startX_;\n        var deltaY = event.clientY - this.startY_;\n        var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n        this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n        this.getMap().getView().setResolution(this.currentResolution_);\n      }\n    }\n\n    /**\n     * Handle dragger end events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n  }, {\n    key: \"handleDraggerEnd_\",\n    value: function handleDraggerEnd_(event) {\n      if (this.dragging_) {\n        var view = this.getMap().getView();\n        view.endInteraction();\n        this.dragging_ = false;\n        this.startX_ = undefined;\n        this.startY_ = undefined;\n        this.dragListenerKeys_.forEach(unlistenByKey);\n        this.dragListenerKeys_.length = 0;\n      }\n    }\n\n    /**\n     * Positions the thumb inside its container according to the given resolution.\n     *\n     * @param {number} res The res.\n     * @private\n     */\n  }, {\n    key: \"setThumbPosition_\",\n    value: function setThumbPosition_(res) {\n      var position = this.getPositionForResolution_(res);\n      var thumb = /** @type {HTMLElement} */this.element.firstElementChild;\n      if (this.direction_ == Direction.HORIZONTAL) {\n        thumb.style.left = this.widthLimit_ * position + 'px';\n      } else {\n        thumb.style.top = this.heightLimit_ * position + 'px';\n      }\n    }\n\n    /**\n     * Calculates the relative position of the thumb given x and y offsets.  The\n     * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n     * in pixel units within the dragger limits.\n     *\n     * @param {number} x Pixel position relative to the left of the slider.\n     * @param {number} y Pixel position relative to the top of the slider.\n     * @return {number} The relative position of the thumb.\n     * @private\n     */\n  }, {\n    key: \"getRelativePosition_\",\n    value: function getRelativePosition_(x, y) {\n      var amount;\n      if (this.direction_ === Direction.HORIZONTAL) {\n        amount = x / this.widthLimit_;\n      } else {\n        amount = y / this.heightLimit_;\n      }\n      return clamp(amount, 0, 1);\n    }\n\n    /**\n     * Calculates the corresponding resolution of the thumb given its relative\n     * position (where 0 is the minimum and 1 is the maximum).\n     *\n     * @param {number} position The relative position of the thumb.\n     * @return {number} The corresponding resolution.\n     * @private\n     */\n  }, {\n    key: \"getResolutionForPosition_\",\n    value: function getResolutionForPosition_(position) {\n      var fn = this.getMap().getView().getResolutionForValueFunction();\n      return fn(1 - position);\n    }\n\n    /**\n     * Determines the relative position of the slider for the given resolution.  A\n     * relative position of 0 corresponds to the minimum view resolution.  A\n     * relative position of 1 corresponds to the maximum view resolution.\n     *\n     * @param {number} res The resolution.\n     * @return {number} The relative position value (between 0 and 1).\n     * @private\n     */\n  }, {\n    key: \"getPositionForResolution_\",\n    value: function getPositionForResolution_(res) {\n      var fn = this.getMap().getView().getValueForResolutionFunction();\n      return clamp(1 - fn(res), 0, 1);\n    }\n\n    /**\n     * Update the zoomslider element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n  }, {\n    key: \"render\",\n    value: function render(mapEvent) {\n      if (!mapEvent.frameState) {\n        return;\n      }\n      if (!this.sliderInitialized_ && !this.initSlider_()) {\n        return;\n      }\n      var res = mapEvent.frameState.viewState.resolution;\n      this.currentResolution_ = res;\n      this.setThumbPosition_(res);\n    }\n  }]);\n}(Control);\nexport default ZoomSlider;","map":{"version":3,"names":["Control","EventType","PointerEventType","CLASS_CONTROL","CLASS_UNSELECTABLE","clamp","easeOut","listen","unlistenByKey","stopPropagation","Direction","VERTICAL","HORIZONTAL","ZoomSlider","_Control","options","_this","_classCallCheck","_callSuper","target","element","document","createElement","render","dragListenerKeys_","currentResolution_","undefined","direction_","dragging_","heightLimit_","widthLimit_","startX_","startY_","thumbSize_","sliderInitialized_","duration_","duration","className","thumbElement","setAttribute","containerElement","appendChild","addEventListener","POINTERDOWN","handleDraggerStart_","bind","POINTERMOVE","handleDraggerDrag_","POINTERUP","handleDraggerEnd_","CLICK","handleContainerClick_","_inherits","_createClass","key","value","setMap","map","_superPropGet","initSlider_","container","containerWidth","offsetWidth","containerHeight","offsetHeight","containerStyle","getComputedStyle","parseFloat","thumb","firstElementChild","thumbStyle","thumbWidth","thumbHeight","event","view","getMap","getView","relativePosition","getRelativePosition_","offsetX","offsetY","resolution","getResolutionForPosition_","zoom","getConstrainedZoom","getZoomForResolution","animateInternal","easing","beginInteraction","clientX","style","left","clientY","top","length","drag","end","doc","getOwnerDocument","push","deltaX","deltaY","setResolution","endInteraction","forEach","setThumbPosition_","res","position","getPositionForResolution_","x","y","amount","fn","getResolutionForValueFunction","getValueForResolutionFunction","mapEvent","frameState","viewState"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/control/ZoomSlider.js"],"sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {clamp} from '../math.js';\nimport {easeOut} from '../easing.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {stopPropagation} from '../events/Event.js';\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nclass ZoomSlider extends Control {\n  /**\n   * @param {Options} [options] Zoom slider options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      target: options.target,\n      element: document.createElement('div'),\n      render: options.render,\n    });\n\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoomslider';\n    const thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    const containerElement = this.element;\n    containerElement.className =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n\n    containerElement.addEventListener(\n      PointerEventType.POINTERDOWN,\n      this.handleDraggerStart_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERMOVE,\n      this.handleDraggerDrag_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERUP,\n      this.handleDraggerEnd_.bind(this),\n      false\n    );\n\n    containerElement.addEventListener(\n      EventType.CLICK,\n      this.handleContainerClick_.bind(this),\n      false\n    );\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      map.render();\n    }\n  }\n\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n  initSlider_() {\n    const container = this.element;\n    let containerWidth = container.offsetWidth;\n    let containerHeight = container.offsetHeight;\n    if (containerWidth === 0 && containerHeight === 0) {\n      return (this.sliderInitialized_ = false);\n    }\n\n    const containerStyle = getComputedStyle(container);\n    containerWidth -=\n      parseFloat(containerStyle['paddingRight']) +\n      parseFloat(containerStyle['paddingLeft']);\n    containerHeight -=\n      parseFloat(containerStyle['paddingTop']) +\n      parseFloat(containerStyle['paddingBottom']);\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n    const thumbStyle = getComputedStyle(thumb);\n    const thumbWidth =\n      thumb.offsetWidth +\n      parseFloat(thumbStyle['marginRight']) +\n      parseFloat(thumbStyle['marginLeft']);\n    const thumbHeight =\n      thumb.offsetHeight +\n      parseFloat(thumbStyle['marginTop']) +\n      parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n    return (this.sliderInitialized_ = true);\n  }\n\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n  handleContainerClick_(event) {\n    const view = this.getMap().getView();\n\n    const relativePosition = this.getRelativePosition_(\n      event.offsetX - this.thumbSize_[0] / 2,\n      event.offsetY - this.thumbSize_[1] / 2\n    );\n\n    const resolution = this.getResolutionForPosition_(relativePosition);\n    const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerStart_(event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      const element = /** @type {HTMLElement} */ (\n        this.element.firstElementChild\n      );\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        const drag = this.handleDraggerDrag_;\n        const end = this.handleDraggerEnd_;\n        const doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(\n          listen(doc, PointerEventType.POINTERMOVE, drag, this),\n          listen(doc, PointerEventType.POINTERUP, end, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      const deltaX = event.clientX - this.startX_;\n      const deltaY = event.clientY - this.startY_;\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ =\n        this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  }\n\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      const view = this.getMap().getView();\n      view.endInteraction();\n\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  }\n\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  setThumbPosition_(res) {\n    const position = this.getPositionForResolution_(res);\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  }\n\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  getRelativePosition_(x, y) {\n    let amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  }\n\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  getResolutionForPosition_(position) {\n    const fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  }\n\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  getPositionForResolution_(res) {\n    const fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  }\n\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n    const res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\nexport default ZoomSlider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
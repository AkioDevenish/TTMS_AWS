{"ast":null,"code":"import _typeof from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _toConsumableArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/expr/cpu\n */\n\nimport { ColorType, LiteralExpression, Ops, overlapsType, parse, typeName } from './expression.js';\nimport { fromString, lchaToRgba, normalize, rgbaToLcha, withAlpha } from '../color.js';\n\n/**\n * @fileoverview This module includes functions to build expressions for evaluation on the CPU.\n * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded\n * expression and returns an instance of one of the expression classes.  The compiling step takes\n * the expression instance and returns a function that can be evaluated in to return a literal\n * value.  The evaluator function should do as little allocation and work as possible.\n */\n\n/**\n * @typedef {Object} EvaluationContext\n * @property {Object} properties The values for properties used in 'get' expressions.\n * @property {Object} variables The values for variables used in 'var' expressions.\n * @property {number} resolution The map resolution.\n * @property {string|number|null} featureId The feature id.\n */\n\n/**\n * @return {EvaluationContext} A new evaluation context.\n */\nexport function newEvaluationContext() {\n  return {\n    variables: {},\n    properties: {},\n    resolution: NaN,\n    featureId: null\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):import(\"./expression.js\").LiteralValue} ExpressionEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):boolean} BooleanEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):number} NumberEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):string} StringEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The expression evaluator.\n */\nexport function buildExpression(encoded, type, context) {\n  var expression = parse(encoded, context);\n  if (!overlapsType(type, expression.type)) {\n    var expected = typeName(type);\n    var actual = typeName(expression.type);\n    throw new Error(\"Expected expression to be of type \".concat(expected, \", got \").concat(actual));\n  }\n  return compileExpression(expression, context);\n}\n\n/**\n * @param {import(\"./expression.js\").Expression} expression The expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileExpression(expression, context) {\n  if (expression instanceof LiteralExpression) {\n    // convert colors to array if possible\n    if (expression.type === ColorType && typeof expression.value === 'string') {\n      var colorValue = fromString(expression.value);\n      return function () {\n        return colorValue;\n      };\n    }\n    return function () {\n      return expression.value;\n    };\n  }\n  var operator = expression.operator;\n  switch (operator) {\n    case Ops.Number:\n    case Ops.String:\n      {\n        return compileAssertionExpression(expression, context);\n      }\n    case Ops.Get:\n    case Ops.Var:\n      {\n        return compileAccessorExpression(expression, context);\n      }\n    case Ops.Id:\n      {\n        return function (expression) {\n          return expression.featureId;\n        };\n      }\n    case Ops.Concat:\n      {\n        var args = expression.args.map(function (e) {\n          return compileExpression(e, context);\n        });\n        return function (context) {\n          var _ref;\n          return (_ref = '').concat.apply(_ref, _toConsumableArray(args.map(function (arg) {\n            return arg(context).toString();\n          })));\n        };\n      }\n    case Ops.Resolution:\n      {\n        return function (context) {\n          return context.resolution;\n        };\n      }\n    case Ops.Any:\n    case Ops.All:\n    case Ops.Not:\n      {\n        return compileLogicalExpression(expression, context);\n      }\n    case Ops.Equal:\n    case Ops.NotEqual:\n    case Ops.LessThan:\n    case Ops.LessThanOrEqualTo:\n    case Ops.GreaterThan:\n    case Ops.GreaterThanOrEqualTo:\n      {\n        return compileComparisonExpression(expression, context);\n      }\n    case Ops.Multiply:\n    case Ops.Divide:\n    case Ops.Add:\n    case Ops.Subtract:\n    case Ops.Clamp:\n    case Ops.Mod:\n    case Ops.Pow:\n    case Ops.Abs:\n    case Ops.Floor:\n    case Ops.Ceil:\n    case Ops.Round:\n    case Ops.Sin:\n    case Ops.Cos:\n    case Ops.Atan:\n    case Ops.Sqrt:\n      {\n        return compileNumericExpression(expression, context);\n      }\n    case Ops.Match:\n      {\n        return compileMatchExpression(expression, context);\n      }\n    case Ops.Interpolate:\n      {\n        return compileInterpolateExpression(expression, context);\n      }\n    default:\n      {\n        throw new Error(\"Unsupported operator \".concat(operator));\n      }\n    // TODO: unimplemented\n    // Ops.GeometryType\n    // Ops.Zoom\n    // Ops.Time\n    // Ops.Between\n    // Ops.Case\n    // Ops.In\n    // Ops.Array\n    // Ops.Color\n    // Ops.Band\n    // Ops.Palette\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAssertionExpression(expression, context) {\n  var type = expression.operator;\n  var length = expression.args.length;\n  var args = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (type) {\n    case Ops.Number:\n    case Ops.String:\n      {\n        return function (context) {\n          for (var _i = 0; _i < length; ++_i) {\n            var value = args[_i](context);\n            if (_typeof(value) === type) {\n              return value;\n            }\n          }\n          throw new Error(\"Expected one of the values to be a \".concat(type));\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unsupported assertion operator \".concat(type));\n      }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAccessorExpression(expression, context) {\n  var nameExpression = /** @type {LiteralExpression} */expression.args[0];\n  var name = /** @type {string} */nameExpression.value;\n  switch (expression.operator) {\n    case Ops.Get:\n      {\n        return function (context) {\n          return context.properties[name];\n        };\n      }\n    case Ops.Var:\n      {\n        return function (context) {\n          return context.variables[name];\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unsupported accessor operator \".concat(expression.operator));\n      }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileComparisonExpression(expression, context) {\n  var op = expression.operator;\n  var left = compileExpression(expression.args[0], context);\n  var right = compileExpression(expression.args[1], context);\n  switch (op) {\n    case Ops.Equal:\n      {\n        return function (context) {\n          return left(context) === right(context);\n        };\n      }\n    case Ops.NotEqual:\n      {\n        return function (context) {\n          return left(context) !== right(context);\n        };\n      }\n    case Ops.LessThan:\n      {\n        return function (context) {\n          return left(context) < right(context);\n        };\n      }\n    case Ops.LessThanOrEqualTo:\n      {\n        return function (context) {\n          return left(context) <= right(context);\n        };\n      }\n    case Ops.GreaterThan:\n      {\n        return function (context) {\n          return left(context) > right(context);\n        };\n      }\n    case Ops.GreaterThanOrEqualTo:\n      {\n        return function (context) {\n          return left(context) >= right(context);\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unsupported comparison operator \".concat(op));\n      }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileLogicalExpression(expression, context) {\n  var op = expression.operator;\n  var length = expression.args.length;\n  var args = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Any:\n      {\n        return function (context) {\n          for (var _i2 = 0; _i2 < length; ++_i2) {\n            if (args[_i2](context)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    case Ops.All:\n      {\n        return function (context) {\n          for (var _i3 = 0; _i3 < length; ++_i3) {\n            if (!args[_i3](context)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n    case Ops.Not:\n      {\n        return function (context) {\n          return !args[0](context);\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unsupported logical operator \".concat(op));\n      }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {NumberEvaluator} The evaluator function.\n */\nfunction compileNumericExpression(expression, context) {\n  var op = expression.operator;\n  var length = expression.args.length;\n  var args = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Multiply:\n      {\n        return function (context) {\n          var value = 1;\n          for (var _i4 = 0; _i4 < length; ++_i4) {\n            value *= args[_i4](context);\n          }\n          return value;\n        };\n      }\n    case Ops.Divide:\n      {\n        return function (context) {\n          return args[0](context) / args[1](context);\n        };\n      }\n    case Ops.Add:\n      {\n        return function (context) {\n          var value = 0;\n          for (var _i5 = 0; _i5 < length; ++_i5) {\n            value += args[_i5](context);\n          }\n          return value;\n        };\n      }\n    case Ops.Subtract:\n      {\n        return function (context) {\n          return args[0](context) - args[1](context);\n        };\n      }\n    case Ops.Clamp:\n      {\n        return function (context) {\n          var value = args[0](context);\n          var min = args[1](context);\n          if (value < min) {\n            return min;\n          }\n          var max = args[2](context);\n          if (value > max) {\n            return max;\n          }\n          return value;\n        };\n      }\n    case Ops.Mod:\n      {\n        return function (context) {\n          return args[0](context) % args[1](context);\n        };\n      }\n    case Ops.Pow:\n      {\n        return function (context) {\n          return Math.pow(args[0](context), args[1](context));\n        };\n      }\n    case Ops.Abs:\n      {\n        return function (context) {\n          return Math.abs(args[0](context));\n        };\n      }\n    case Ops.Floor:\n      {\n        return function (context) {\n          return Math.floor(args[0](context));\n        };\n      }\n    case Ops.Ceil:\n      {\n        return function (context) {\n          return Math.ceil(args[0](context));\n        };\n      }\n    case Ops.Round:\n      {\n        return function (context) {\n          return Math.round(args[0](context));\n        };\n      }\n    case Ops.Sin:\n      {\n        return function (context) {\n          return Math.sin(args[0](context));\n        };\n      }\n    case Ops.Cos:\n      {\n        return function (context) {\n          return Math.cos(args[0](context));\n        };\n      }\n    case Ops.Atan:\n      {\n        if (length === 2) {\n          return function (context) {\n            return Math.atan2(args[0](context), args[1](context));\n          };\n        }\n        return function (context) {\n          return Math.atan(args[0](context));\n        };\n      }\n    case Ops.Sqrt:\n      {\n        return function (context) {\n          return Math.sqrt(args[0](context));\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unsupported numeric operator \".concat(op));\n      }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileMatchExpression(expression, context) {\n  var length = expression.args.length;\n  var args = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return function (context) {\n    var value = args[0](context);\n    for (var _i6 = 1; _i6 < length; _i6 += 2) {\n      if (value === args[_i6](context)) {\n        return args[_i6 + 1](context);\n      }\n    }\n    return args[length - 1](context);\n  };\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileInterpolateExpression(expression, context) {\n  var length = expression.args.length;\n  var args = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return function (context) {\n    var base = args[0](context);\n    var value = args[1](context);\n    var previousInput;\n    var previousOutput;\n    for (var _i7 = 2; _i7 < length; _i7 += 2) {\n      var input = args[_i7](context);\n      var output = args[_i7 + 1](context);\n      var isColor = Array.isArray(output);\n      if (isColor) {\n        output = withAlpha(output);\n      }\n      if (input >= value) {\n        if (_i7 === 2) {\n          return output;\n        }\n        if (isColor) {\n          return interpolateColor(base, value, previousInput, previousOutput, input, output);\n        }\n        return interpolateNumber(base, value, previousInput, previousOutput, input, output);\n      }\n      previousInput = input;\n      previousOutput = output;\n    }\n    return previousOutput;\n  };\n}\n\n/**\n * @param {number} base The base.\n * @param {number} value The value.\n * @param {number} input1 The first input value.\n * @param {number} output1 The first output value.\n * @param {number} input2 The second input value.\n * @param {number} output2 The second output value.\n * @return {number} The interpolated value.\n */\nfunction interpolateNumber(base, value, input1, output1, input2, output2) {\n  var delta = input2 - input1;\n  if (delta === 0) {\n    return output1;\n  }\n  var along = value - input1;\n  var factor = base === 1 ? along / delta : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);\n  return output1 + factor * (output2 - output1);\n}\n\n/**\n * @param {number} base The base.\n * @param {number} value The value.\n * @param {number} input1 The first input value.\n * @param {import('../color.js').Color} rgba1 The first output value.\n * @param {number} input2 The second input value.\n * @param {import('../color.js').Color} rgba2 The second output value.\n * @return {import('../color.js').Color} The interpolated color.\n */\nfunction interpolateColor(base, value, input1, rgba1, input2, rgba2) {\n  var delta = input2 - input1;\n  if (delta === 0) {\n    return rgba1;\n  }\n  var lcha1 = rgbaToLcha(rgba1);\n  var lcha2 = rgbaToLcha(rgba2);\n  var deltaHue = lcha2[2] - lcha1[2];\n  if (deltaHue > 180) {\n    deltaHue -= 360;\n  } else if (deltaHue < -180) {\n    deltaHue += 360;\n  }\n  var lcha = [interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]), interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]), lcha1[2] + interpolateNumber(base, value, input1, 0, input2, deltaHue), interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3])];\n  return normalize(lchaToRgba(lcha));\n}","map":{"version":3,"names":["ColorType","LiteralExpression","Ops","overlapsType","parse","typeName","fromString","lchaToRgba","normalize","rgbaToLcha","withAlpha","newEvaluationContext","variables","properties","resolution","NaN","featureId","buildExpression","encoded","type","context","expression","expected","actual","Error","concat","compileExpression","value","colorValue","operator","Number","String","compileAssertionExpression","Get","Var","compileAccessorExpression","Id","Concat","args","map","e","_ref","apply","_toConsumableArray","arg","toString","Resolution","Any","All","Not","compileLogicalExpression","Equal","NotEqual","LessThan","LessThanOrEqualTo","GreaterThan","GreaterThanOrEqualTo","compileComparisonExpression","Multiply","Divide","Add","Subtract","Clamp","Mod","Pow","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","compileNumericExpression","Match","compileMatchExpression","Interpolate","compileInterpolateExpression","length","Array","i","_typeof","nameExpression","name","op","left","right","min","max","Math","pow","abs","floor","ceil","round","sin","cos","atan2","atan","sqrt","base","previousInput","previousOutput","input","output","isColor","isArray","interpolateColor","interpolateNumber","input1","output1","input2","output2","delta","along","factor","rgba1","rgba2","lcha1","lcha2","deltaHue","lcha"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/expr/cpu.js"],"sourcesContent":["/**\n * @module ol/expr/cpu\n */\n\nimport {\n  ColorType,\n  LiteralExpression,\n  Ops,\n  overlapsType,\n  parse,\n  typeName,\n} from './expression.js';\nimport {\n  fromString,\n  lchaToRgba,\n  normalize,\n  rgbaToLcha,\n  withAlpha,\n} from '../color.js';\n\n/**\n * @fileoverview This module includes functions to build expressions for evaluation on the CPU.\n * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded\n * expression and returns an instance of one of the expression classes.  The compiling step takes\n * the expression instance and returns a function that can be evaluated in to return a literal\n * value.  The evaluator function should do as little allocation and work as possible.\n */\n\n/**\n * @typedef {Object} EvaluationContext\n * @property {Object} properties The values for properties used in 'get' expressions.\n * @property {Object} variables The values for variables used in 'var' expressions.\n * @property {number} resolution The map resolution.\n * @property {string|number|null} featureId The feature id.\n */\n\n/**\n * @return {EvaluationContext} A new evaluation context.\n */\nexport function newEvaluationContext() {\n  return {\n    variables: {},\n    properties: {},\n    resolution: NaN,\n    featureId: null,\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):import(\"./expression.js\").LiteralValue} ExpressionEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):boolean} BooleanEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):number} NumberEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):string} StringEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The expression evaluator.\n */\nexport function buildExpression(encoded, type, context) {\n  const expression = parse(encoded, context);\n  if (!overlapsType(type, expression.type)) {\n    const expected = typeName(type);\n    const actual = typeName(expression.type);\n    throw new Error(\n      `Expected expression to be of type ${expected}, got ${actual}`\n    );\n  }\n  return compileExpression(expression, context);\n}\n\n/**\n * @param {import(\"./expression.js\").Expression} expression The expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileExpression(expression, context) {\n  if (expression instanceof LiteralExpression) {\n    // convert colors to array if possible\n    if (expression.type === ColorType && typeof expression.value === 'string') {\n      const colorValue = fromString(expression.value);\n      return function () {\n        return colorValue;\n      };\n    }\n    return function () {\n      return expression.value;\n    };\n  }\n  const operator = expression.operator;\n  switch (operator) {\n    case Ops.Number:\n    case Ops.String: {\n      return compileAssertionExpression(expression, context);\n    }\n    case Ops.Get:\n    case Ops.Var: {\n      return compileAccessorExpression(expression, context);\n    }\n    case Ops.Id: {\n      return (expression) => expression.featureId;\n    }\n    case Ops.Concat: {\n      const args = expression.args.map((e) => compileExpression(e, context));\n      return (context) =>\n        ''.concat(...args.map((arg) => arg(context).toString()));\n    }\n    case Ops.Resolution: {\n      return (context) => context.resolution;\n    }\n    case Ops.Any:\n    case Ops.All:\n    case Ops.Not: {\n      return compileLogicalExpression(expression, context);\n    }\n    case Ops.Equal:\n    case Ops.NotEqual:\n    case Ops.LessThan:\n    case Ops.LessThanOrEqualTo:\n    case Ops.GreaterThan:\n    case Ops.GreaterThanOrEqualTo: {\n      return compileComparisonExpression(expression, context);\n    }\n    case Ops.Multiply:\n    case Ops.Divide:\n    case Ops.Add:\n    case Ops.Subtract:\n    case Ops.Clamp:\n    case Ops.Mod:\n    case Ops.Pow:\n    case Ops.Abs:\n    case Ops.Floor:\n    case Ops.Ceil:\n    case Ops.Round:\n    case Ops.Sin:\n    case Ops.Cos:\n    case Ops.Atan:\n    case Ops.Sqrt: {\n      return compileNumericExpression(expression, context);\n    }\n    case Ops.Match: {\n      return compileMatchExpression(expression, context);\n    }\n    case Ops.Interpolate: {\n      return compileInterpolateExpression(expression, context);\n    }\n    default: {\n      throw new Error(`Unsupported operator ${operator}`);\n    }\n    // TODO: unimplemented\n    // Ops.GeometryType\n    // Ops.Zoom\n    // Ops.Time\n    // Ops.Between\n    // Ops.Case\n    // Ops.In\n    // Ops.Array\n    // Ops.Color\n    // Ops.Band\n    // Ops.Palette\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAssertionExpression(expression, context) {\n  const type = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (type) {\n    case Ops.Number:\n    case Ops.String: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          const value = args[i](context);\n          if (typeof value === type) {\n            return value;\n          }\n        }\n        throw new Error(`Expected one of the values to be a ${type}`);\n      };\n    }\n    default: {\n      throw new Error(`Unsupported assertion operator ${type}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAccessorExpression(expression, context) {\n  const nameExpression = /** @type {LiteralExpression} */ (expression.args[0]);\n  const name = /** @type {string} */ (nameExpression.value);\n  switch (expression.operator) {\n    case Ops.Get: {\n      return (context) => context.properties[name];\n    }\n    case Ops.Var: {\n      return (context) => context.variables[name];\n    }\n    default: {\n      throw new Error(`Unsupported accessor operator ${expression.operator}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileComparisonExpression(expression, context) {\n  const op = expression.operator;\n  const left = compileExpression(expression.args[0], context);\n  const right = compileExpression(expression.args[1], context);\n  switch (op) {\n    case Ops.Equal: {\n      return (context) => left(context) === right(context);\n    }\n    case Ops.NotEqual: {\n      return (context) => left(context) !== right(context);\n    }\n    case Ops.LessThan: {\n      return (context) => left(context) < right(context);\n    }\n    case Ops.LessThanOrEqualTo: {\n      return (context) => left(context) <= right(context);\n    }\n    case Ops.GreaterThan: {\n      return (context) => left(context) > right(context);\n    }\n    case Ops.GreaterThanOrEqualTo: {\n      return (context) => left(context) >= right(context);\n    }\n    default: {\n      throw new Error(`Unsupported comparison operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileLogicalExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Any: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          if (args[i](context)) {\n            return true;\n          }\n        }\n        return false;\n      };\n    }\n    case Ops.All: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          if (!args[i](context)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n    case Ops.Not: {\n      return (context) => !args[0](context);\n    }\n    default: {\n      throw new Error(`Unsupported logical operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {NumberEvaluator} The evaluator function.\n */\nfunction compileNumericExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Multiply: {\n      return (context) => {\n        let value = 1;\n        for (let i = 0; i < length; ++i) {\n          value *= args[i](context);\n        }\n        return value;\n      };\n    }\n    case Ops.Divide: {\n      return (context) => args[0](context) / args[1](context);\n    }\n    case Ops.Add: {\n      return (context) => {\n        let value = 0;\n        for (let i = 0; i < length; ++i) {\n          value += args[i](context);\n        }\n        return value;\n      };\n    }\n    case Ops.Subtract: {\n      return (context) => args[0](context) - args[1](context);\n    }\n    case Ops.Clamp: {\n      return (context) => {\n        const value = args[0](context);\n        const min = args[1](context);\n        if (value < min) {\n          return min;\n        }\n        const max = args[2](context);\n        if (value > max) {\n          return max;\n        }\n        return value;\n      };\n    }\n    case Ops.Mod: {\n      return (context) => args[0](context) % args[1](context);\n    }\n    case Ops.Pow: {\n      return (context) => Math.pow(args[0](context), args[1](context));\n    }\n    case Ops.Abs: {\n      return (context) => Math.abs(args[0](context));\n    }\n    case Ops.Floor: {\n      return (context) => Math.floor(args[0](context));\n    }\n    case Ops.Ceil: {\n      return (context) => Math.ceil(args[0](context));\n    }\n    case Ops.Round: {\n      return (context) => Math.round(args[0](context));\n    }\n    case Ops.Sin: {\n      return (context) => Math.sin(args[0](context));\n    }\n    case Ops.Cos: {\n      return (context) => Math.cos(args[0](context));\n    }\n    case Ops.Atan: {\n      if (length === 2) {\n        return (context) => Math.atan2(args[0](context), args[1](context));\n      }\n      return (context) => Math.atan(args[0](context));\n    }\n    case Ops.Sqrt: {\n      return (context) => Math.sqrt(args[0](context));\n    }\n    default: {\n      throw new Error(`Unsupported numeric operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileMatchExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return (context) => {\n    const value = args[0](context);\n    for (let i = 1; i < length; i += 2) {\n      if (value === args[i](context)) {\n        return args[i + 1](context);\n      }\n    }\n    return args[length - 1](context);\n  };\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileInterpolateExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return (context) => {\n    const base = args[0](context);\n    const value = args[1](context);\n\n    let previousInput;\n    let previousOutput;\n    for (let i = 2; i < length; i += 2) {\n      const input = args[i](context);\n      let output = args[i + 1](context);\n      const isColor = Array.isArray(output);\n      if (isColor) {\n        output = withAlpha(output);\n      }\n      if (input >= value) {\n        if (i === 2) {\n          return output;\n        }\n        if (isColor) {\n          return interpolateColor(\n            base,\n            value,\n            previousInput,\n            previousOutput,\n            input,\n            output\n          );\n        }\n        return interpolateNumber(\n          base,\n          value,\n          previousInput,\n          previousOutput,\n          input,\n          output\n        );\n      }\n      previousInput = input;\n      previousOutput = output;\n    }\n    return previousOutput;\n  };\n}\n\n/**\n * @param {number} base The base.\n * @param {number} value The value.\n * @param {number} input1 The first input value.\n * @param {number} output1 The first output value.\n * @param {number} input2 The second input value.\n * @param {number} output2 The second output value.\n * @return {number} The interpolated value.\n */\nfunction interpolateNumber(base, value, input1, output1, input2, output2) {\n  const delta = input2 - input1;\n  if (delta === 0) {\n    return output1;\n  }\n  const along = value - input1;\n  const factor =\n    base === 1\n      ? along / delta\n      : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);\n  return output1 + factor * (output2 - output1);\n}\n\n/**\n * @param {number} base The base.\n * @param {number} value The value.\n * @param {number} input1 The first input value.\n * @param {import('../color.js').Color} rgba1 The first output value.\n * @param {number} input2 The second input value.\n * @param {import('../color.js').Color} rgba2 The second output value.\n * @return {import('../color.js').Color} The interpolated color.\n */\nfunction interpolateColor(base, value, input1, rgba1, input2, rgba2) {\n  const delta = input2 - input1;\n  if (delta === 0) {\n    return rgba1;\n  }\n  const lcha1 = rgbaToLcha(rgba1);\n  const lcha2 = rgbaToLcha(rgba2);\n  let deltaHue = lcha2[2] - lcha1[2];\n  if (deltaHue > 180) {\n    deltaHue -= 360;\n  } else if (deltaHue < -180) {\n    deltaHue += 360;\n  }\n\n  const lcha = [\n    interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]),\n    interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]),\n    lcha1[2] + interpolateNumber(base, value, input1, 0, input2, deltaHue),\n    interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3]),\n  ];\n  return normalize(lchaToRgba(lcha));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
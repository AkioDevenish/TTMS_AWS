{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\n/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport { DEFAULT_VERSION, getImageSrc, getRequestParams } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nvar TileWMS = /*#__PURE__*/function (_TileImage) {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  function TileWMS(options) {\n    var _this;\n    _classCallCheck(this, TileWMS);\n    options = options ? options : (/** @type {Options} */{});\n    var params = Object.assign({}, options.params);\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    _this = _callSuper(this, TileWMS, [{\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }]);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    _this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.tmpExtent_ = createEmpty();\n    _this.updateV13_();\n    _this.setKey(_this.getKeyForParams_());\n    return _this;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  _inherits(TileWMS, _TileImage);\n  return _createClass(TileWMS, [{\n    key: \"getFeatureInfoUrl\",\n    value: function getFeatureInfoUrl(coordinate, resolution, projection, params) {\n      var projectionObj = getProjection(projection);\n      var sourceProjectionObj = this.getProjection() || projectionObj;\n      var tileGrid = this.getTileGrid();\n      if (!tileGrid) {\n        tileGrid = this.getTileGridForProjection(sourceProjectionObj);\n      }\n      var sourceProjCoord = transform(coordinate, projectionObj, sourceProjectionObj);\n      var sourceResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      var z = tileGrid.getZForResolution(sourceResolution, this.zDirection);\n      var tileResolution = tileGrid.getResolution(z);\n      var tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);\n      if (tileGrid.getResolutions().length <= tileCoord[0]) {\n        return undefined;\n      }\n      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n      var gutter = this.gutter_;\n      if (gutter !== 0) {\n        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n      }\n      var baseParams = {\n        'QUERY_LAYERS': this.params_['LAYERS']\n      };\n      Object.assign(baseParams, getRequestParams(this.params_, 'GetFeatureInfo'), params);\n      var x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);\n      var y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);\n      baseParams[this.v13_ ? 'I' : 'X'] = x;\n      baseParams[this.v13_ ? 'J' : 'Y'] = y;\n      return this.getRequestUrl_(tileCoord, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n    }\n\n    /**\n     * Return the GetLegendGraphic URL, optionally optimized for the passed\n     * resolution and possibly including any passed specific parameters. Returns\n     * `undefined` if the GetLegendGraphic URL cannot be constructed.\n     *\n     * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n     *     will not be calculated and included in URL.\n     * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n     *     request is generated for this wms layer, else it will try to use the\n     *     configured wms layer. Default `FORMAT` is `image/png`.\n     *     `VERSION` should not be specified here.\n     * @return {string|undefined} GetLegendGraphic URL.\n     * @api\n     */\n  }, {\n    key: \"getLegendUrl\",\n    value: function getLegendUrl(resolution, params) {\n      if (this.urls[0] === undefined) {\n        return undefined;\n      }\n      var baseParams = {\n        'SERVICE': 'WMS',\n        'VERSION': DEFAULT_VERSION,\n        'REQUEST': 'GetLegendGraphic',\n        'FORMAT': 'image/png'\n      };\n      if (params === undefined || params['LAYER'] === undefined) {\n        var layers = this.params_.LAYERS;\n        var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n        if (!isSingleLayer) {\n          return undefined;\n        }\n        baseParams['LAYER'] = layers;\n      }\n      if (resolution !== undefined) {\n        var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n        var pixelSize = 0.00028;\n        baseParams['SCALE'] = resolution * mpu / pixelSize;\n      }\n      Object.assign(baseParams, params);\n      return appendParams(/** @type {string} */this.urls[0], baseParams);\n    }\n\n    /**\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutter\",\n    value: function getGutter() {\n      return this.gutter_;\n    }\n\n    /**\n     * Get the user-provided params, i.e. those passed to the constructor through\n     * the \"params\" option, and possibly updated using the updateParams method.\n     * @return {Object} Params.\n     * @api\n     */\n  }, {\n    key: \"getParams\",\n    value: function getParams() {\n      return this.params_;\n    }\n\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {Object} params Params.\n     * @return {string|undefined} Request URL.\n     * @private\n     */\n  }, {\n    key: \"getRequestUrl_\",\n    value: function getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {\n      var urls = this.urls;\n      if (!urls) {\n        return undefined;\n      }\n      var url;\n      if (urls.length == 1) {\n        url = urls[0];\n      } else {\n        var index = modulo(tileCoordHash(tileCoord), urls.length);\n        url = urls[index];\n      }\n      return getImageSrc(tileExtent, (this.tileGrid || this.getTileGridForProjection(projection)).getResolution(tileCoord[0]), pixelRatio, projection, url, params, this.serverType_);\n    }\n\n    /**\n     * Get the tile pixel ratio for this source.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n  }, {\n    key: \"getTilePixelRatio\",\n    value: function getTilePixelRatio(pixelRatio) {\n      return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n    }\n\n    /**\n     * @private\n     * @return {string} The key for the current params.\n     */\n  }, {\n    key: \"getKeyForParams_\",\n    value: function getKeyForParams_() {\n      var i = 0;\n      var res = [];\n      for (var key in this.params_) {\n        res[i++] = key + '-' + this.params_[key];\n      }\n      return res.join('/');\n    }\n\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n  }, {\n    key: \"updateParams\",\n    value: function updateParams(params) {\n      Object.assign(this.params_, params);\n      this.updateV13_();\n      this.setKey(this.getKeyForParams_());\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"updateV13_\",\n    value: function updateV13_() {\n      var version = this.params_['VERSION'] || DEFAULT_VERSION;\n      this.v13_ = compareVersions(version, '1.3') >= 0;\n    }\n\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n     * @param {number} pixelRatio The pixel ratio\n     * @param {import(\"../proj/Projection.js\").default} projection The projection\n     * @return {string|undefined} The tile URL\n     * @override\n     */\n  }, {\n    key: \"tileUrlFunction\",\n    value: function tileUrlFunction(tileCoord, pixelRatio, projection) {\n      var tileGrid = this.getTileGrid();\n      if (!tileGrid) {\n        tileGrid = this.getTileGridForProjection(projection);\n      }\n      if (tileGrid.getResolutions().length <= tileCoord[0]) {\n        return undefined;\n      }\n      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n        pixelRatio = 1;\n      }\n      var tileResolution = tileGrid.getResolution(tileCoord[0]);\n      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n      var gutter = this.gutter_;\n      if (gutter !== 0) {\n        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n      }\n      var baseParams = Object.assign({}, getRequestParams(this.params_, 'GetMap'));\n      return this.getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, baseParams);\n    }\n  }]);\n}(TileImage);\nexport default TileWMS;","map":{"version":3,"names":["TileImage","DEFAULT_VERSION","getImageSrc","getRequestParams","appendParams","buffer","createEmpty","calculateSourceResolution","compareVersions","get","getProjection","transform","modulo","hash","tileCoordHash","TileWMS","_TileImage","options","_this","_classCallCheck","params","Object","assign","transparent","_callSuper","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","_inherits","_createClass","key","value","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","sourceProjCoord","sourceResolution","z","getZForResolution","tileResolution","getResolution","tileCoord","getTileCoordForCoordAndZ","getResolutions","length","tileExtent","getTileCoordExtent","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","pixelSize","getGutter","getParams","pixelRatio","index","getTilePixelRatio","i","res","join","updateParams","version","tileUrlFunction"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION, getImageSrc, getRequestParams} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection() || projectionObj;\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(sourceProjectionObj);\n    }\n\n    const sourceProjCoord = transform(\n      coordinate,\n      projectionObj,\n      sourceProjectionObj\n    );\n    const sourceResolution = calculateSourceResolution(\n      sourceProjectionObj,\n      projectionObj,\n      coordinate,\n      resolution\n    );\n\n    const z = tileGrid.getZForResolution(sourceResolution, this.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(\n      baseParams,\n      getRequestParams(this.params_, 'GetFeatureInfo'),\n      params\n    );\n\n    const x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return getImageSrc(\n      tileExtent,\n      (\n        this.tileGrid || this.getTileGridForProjection(projection)\n      ).getResolution(tileCoord[0]),\n      pixelRatio,\n      projection,\n      url,\n      params,\n      this.serverType_\n    );\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = Object.assign(\n      {},\n      getRequestParams(this.params_, 'GetMap')\n    );\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
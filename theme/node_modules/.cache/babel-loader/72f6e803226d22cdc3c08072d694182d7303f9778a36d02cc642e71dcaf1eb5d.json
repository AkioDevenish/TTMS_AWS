{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.string.trim.js\";\n/**\n * @module ol/format/GML2\n */\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { createOrUpdate } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport { writeStringTextNode } from './xsd.js';\n\n/**\n * @const\n * @type {string}\n */\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nvar GML2 = /*#__PURE__*/function (_GMLBase) {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  function GML2(options) {\n    var _this;\n    _classCallCheck(this, GML2);\n    options = options ? options : {};\n    _this = _callSuper(this, GML2, [options]);\n    _this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(_this.readFeaturesInternal);\n\n    /**\n     * @type {string}\n     */\n    _this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    return _this;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  _inherits(GML2, _GMLBase);\n  return _createClass(GML2, [{\n    key: \"readFlatCoordinates\",\n    value: function readFlatCoordinates(node, objectStack) {\n      var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n      var context = /** @type {import(\"../xml.js\").NodeStackItem} */\n      objectStack[0];\n      var containerSrs = context['srsName'];\n      var axisOrientation = 'enu';\n      if (containerSrs) {\n        var proj = getProjection(containerSrs);\n        if (proj) {\n          axisOrientation = proj.getAxisOrientation();\n        }\n      }\n      var coordsGroups = s.trim().split(/\\s+/);\n      var flatCoordinates = [];\n      for (var i = 0, ii = coordsGroups.length; i < ii; i++) {\n        var coords = coordsGroups[i].split(/,+/);\n        var x = parseFloat(coords[0]);\n        var y = parseFloat(coords[1]);\n        var z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n        if (axisOrientation.substr(0, 2) === 'en') {\n          flatCoordinates.push(x, y, z);\n        } else {\n          flatCoordinates.push(y, x, z);\n        }\n      }\n      return flatCoordinates;\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n     */\n  }, {\n    key: \"readBox\",\n    value: function readBox(node, objectStack) {\n      /** @type {Array<number>} */\n      var flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n      return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n  }, {\n    key: \"innerBoundaryIsParser\",\n    value: function innerBoundaryIsParser(node, objectStack) {\n      /** @type {Array<number>|undefined} */\n      var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n      if (flatLinearRing) {\n        var flatLinearRings = /** @type {Array<Array<number>>} */\n        objectStack[objectStack.length - 1];\n        flatLinearRings.push(flatLinearRing);\n      }\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n  }, {\n    key: \"outerBoundaryIsParser\",\n    value: function outerBoundaryIsParser(node, objectStack) {\n      /** @type {Array<number>|undefined} */\n      var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n      if (flatLinearRing) {\n        var flatLinearRings = /** @type {Array<Array<number>>} */\n        objectStack[objectStack.length - 1];\n        flatLinearRings[0] = flatLinearRing;\n      }\n    }\n\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [nodeName] Node name.\n     * @return {Element|undefined} Node.\n     * @private\n     */\n  }, {\n    key: \"GEOMETRY_NODE_FACTORY_\",\n    value: function GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n      var context = objectStack[objectStack.length - 1];\n      var multiSurface = context['multiSurface'];\n      var surface = context['surface'];\n      var multiCurve = context['multiCurve'];\n      if (!Array.isArray(value)) {\n        nodeName = /** @type {import(\"../geom/Geometry.js\").default} */value.getType();\n        if (nodeName === 'MultiPolygon' && multiSurface === true) {\n          nodeName = 'MultiSurface';\n        } else if (nodeName === 'Polygon' && surface === true) {\n          nodeName = 'Surface';\n        } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n          nodeName = 'MultiCurve';\n        }\n      } else {\n        nodeName = 'Envelope';\n      }\n      return createElementNS('http://www.opengis.net/gml', nodeName);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeFeatureElement\",\n    value: function writeFeatureElement(node, feature, objectStack) {\n      var fid = feature.getId();\n      if (fid) {\n        node.setAttribute('fid', /** @type {string} */fid);\n      }\n      var context = /** @type {Object} */objectStack[objectStack.length - 1];\n      var featureNS = context['featureNS'];\n      var geometryName = feature.getGeometryName();\n      if (!context.serializers) {\n        context.serializers = {};\n        context.serializers[featureNS] = {};\n      }\n      var keys = [];\n      var values = [];\n      if (feature.hasProperties()) {\n        var properties = feature.getProperties();\n        for (var key in properties) {\n          var value = properties[key];\n          if (value !== null) {\n            keys.push(key);\n            values.push(value);\n            if (key == geometryName || typeof (/** @type {?} */value.getSimplifiedGeometry) === 'function') {\n              if (!(key in context.serializers[featureNS])) {\n                context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n              }\n            } else {\n              if (!(key in context.serializers[featureNS])) {\n                context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n              }\n            }\n          }\n        }\n      }\n      var item = Object.assign({}, context);\n      item.node = node;\n      pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeCurveOrLineString\",\n    value: function writeCurveOrLineString(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var srsName = context['srsName'];\n      if (node.nodeName !== 'LineStringSegment' && srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n        var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n        node.appendChild(coordinates);\n        this.writeCoordinates_(coordinates, geometry, objectStack);\n      } else if (node.nodeName === 'Curve') {\n        var segments = createElementNS(node.namespaceURI, 'segments');\n        node.appendChild(segments);\n        this.writeCurveSegments_(segments, geometry, objectStack);\n      }\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeLineStringOrCurveMember\",\n    value: function writeLineStringOrCurveMember(node, line, objectStack) {\n      var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n      if (child) {\n        node.appendChild(child);\n        this.writeCurveOrLineString(child, line, objectStack);\n      }\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeMultiCurveOrLineString\",\n    value: function writeMultiCurveOrLineString(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      var curve = context['curve'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var lines = geometry.getLineStrings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName,\n        curve: curve\n      }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n    }\n\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeGeometryElement\",\n    value: function writeGeometryElement(node, geometry, objectStack) {\n      var context = /** @type {import(\"./Feature.js\").WriteOptions} */\n      objectStack[objectStack.length - 1];\n      var item = Object.assign({}, context);\n      item['node'] = node;\n      var value;\n      if (Array.isArray(geometry)) {\n        value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */geometry, context);\n      } else {\n        value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */geometry, true, context);\n      }\n      pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n    }\n\n    /**\n     * @param {string} namespaceURI XML namespace.\n     * @return {Element} coordinates node.\n     * @private\n     */\n  }, {\n    key: \"createCoordinatesNode_\",\n    value: function createCoordinatesNode_(namespaceURI) {\n      var coordinates = createElementNS(namespaceURI, 'coordinates');\n      coordinates.setAttribute('decimal', '.');\n      coordinates.setAttribute('cs', ',');\n      coordinates.setAttribute('ts', ' ');\n      return coordinates;\n    }\n\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n  }, {\n    key: \"writeCoordinates_\",\n    value: function writeCoordinates_(node, value, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      // only 2d for simple features profile\n      var points = value.getCoordinates();\n      var len = points.length;\n      var parts = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        var point = points[i];\n        parts[i] = this.getCoords_(point, srsName, hasZ);\n      }\n      writeStringTextNode(node, parts.join(' '));\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n  }, {\n    key: \"writeCurveSegments_\",\n    value: function writeCurveSegments_(node, line, objectStack) {\n      var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeSurfaceOrPolygon\",\n    value: function writeSurfaceOrPolygon(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      if (node.nodeName !== 'PolygonPatch' && srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n        var rings = geometry.getLinearRings();\n        pushSerializeAndPop({\n          node: node,\n          hasZ: hasZ,\n          srsName: srsName\n        }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n      } else if (node.nodeName === 'Surface') {\n        var patches = createElementNS(node.namespaceURI, 'patches');\n        node.appendChild(patches);\n        this.writeSurfacePatches_(patches, geometry, objectStack);\n      }\n    }\n\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [nodeName] Node name.\n     * @return {Node} Node.\n     * @private\n     */\n  }, {\n    key: \"RING_NODE_FACTORY_\",\n    value: function RING_NODE_FACTORY_(value, objectStack, nodeName) {\n      var context = objectStack[objectStack.length - 1];\n      var parentNode = context.node;\n      var exteriorWritten = context['exteriorWritten'];\n      if (exteriorWritten === undefined) {\n        context['exteriorWritten'] = true;\n      }\n      return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n  }, {\n    key: \"writeSurfacePatches_\",\n    value: function writeSurfacePatches_(node, polygon, objectStack) {\n      var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeRing\",\n    value: function writeRing(node, ring, objectStack) {\n      var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n      node.appendChild(linearRing);\n      this.writeLinearRing(linearRing, ring, objectStack);\n    }\n\n    /**\n     * @param {Array<number>} point Point geometry.\n     * @param {string} [srsName] Optional srsName\n     * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n     * @return {string} The coords string.\n     * @private\n     */\n  }, {\n    key: \"getCoords_\",\n    value: function getCoords_(point, srsName, hasZ) {\n      var axisOrientation = 'enu';\n      if (srsName) {\n        axisOrientation = getProjection(srsName).getAxisOrientation();\n      }\n      var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ',' + point[1] : point[1] + ',' + point[0];\n      if (hasZ) {\n        // For newly created points, Z can be undefined.\n        var z = point[2] || 0;\n        coords += ',' + z;\n      }\n      return coords;\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writePoint\",\n    value: function writePoint(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      var point = geometry.getCoordinates();\n      var coord = this.getCoords_(point, srsName, hasZ);\n      writeStringTextNode(coordinates, coord);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeMultiPoint\",\n    value: function writeMultiPoint(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var points = geometry.getPoints();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} point Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writePointMember\",\n    value: function writePointMember(node, point, objectStack) {\n      var child = createElementNS(node.namespaceURI, 'Point');\n      node.appendChild(child);\n      this.writePoint(child, point, objectStack);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeLinearRing\",\n    value: function writeLinearRing(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var srsName = context['srsName'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeMultiSurfaceOrPolygon\",\n    value: function writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var hasZ = context['hasZ'];\n      var srsName = context['srsName'];\n      var surface = context['surface'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var polygons = geometry.getPolygons();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName,\n        surface: surface\n      }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n    }\n\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeSurfaceOrPolygonMember\",\n    value: function writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n      var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n      if (child) {\n        node.appendChild(child);\n        this.writeSurfaceOrPolygon(child, polygon, objectStack);\n      }\n    }\n\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {Array<*>} objectStack Node stack.\n     */\n  }, {\n    key: \"writeEnvelope\",\n    value: function writeEnvelope(node, extent, objectStack) {\n      var context = objectStack[objectStack.length - 1];\n      var srsName = context['srsName'];\n      if (srsName) {\n        node.setAttribute('srsName', srsName);\n      }\n      var keys = ['lowerCorner', 'upperCorner'];\n      var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n      pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      {\n        node: node\n      }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n    }\n\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [nodeName] Node name.\n     * @return {Node|undefined} Node.\n     * @private\n     */\n  }, {\n    key: \"MULTIGEOMETRY_MEMBER_NODE_FACTORY_\",\n    value: function MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n      var parentNode = objectStack[objectStack.length - 1].node;\n      return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n    }\n  }]);\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\nexport default GML2;","map":{"version":3,"names":["GMLBase","GMLNS","OBJECT_PROPERTY_NODE_FACTORY","createElementNS","getAllTextContent","makeArrayPusher","makeChildAppender","makeReplacer","makeSimpleNodeFactory","pushParseAndPop","pushSerializeAndPop","createOrUpdate","get","getProjection","transformExtentWithOptions","transformGeometryWithOptions","writeStringTextNode","schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML2","_GMLBase","options","_this","_classCallCheck","_callSuper","FEATURE_COLLECTION_PARSERS","readFeaturesInternal","_inherits","_createClass","key","value","readFlatCoordinates","node","objectStack","s","replace","context","containerSrs","axisOrientation","proj","getAxisOrientation","coordsGroups","trim","split","flatCoordinates","i","ii","length","coords","x","parseFloat","y","z","substr","push","readBox","BOX_PARSERS_","innerBoundaryIsParser","flatLinearRing","undefined","RING_PARSERS","flatLinearRings","outerBoundaryIsParser","GEOMETRY_NODE_FACTORY_","nodeName","multiSurface","surface","multiCurve","Array","isArray","getType","writeFeatureElement","feature","fid","getId","setAttribute","featureNS","geometryName","getGeometryName","serializers","keys","values","hasProperties","properties","getProperties","getSimplifiedGeometry","writeGeometryElement","item","Object","assign","writeCurveOrLineString","geometry","srsName","coordinates","createCoordinatesNode_","namespaceURI","appendChild","writeCoordinates_","segments","writeCurveSegments_","writeLineStringOrCurveMember","line","child","writeMultiCurveOrLineString","hasZ","curve","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","GEOMETRY_SERIALIZERS","points","getCoordinates","len","parts","point","getCoords_","join","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","RING_NODE_FACTORY_","patches","writeSurfacePatches_","parentNode","exteriorWritten","polygon","writeRing","ring","linearRing","writeLinearRing","writePoint","coord","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writePointMember","writeMultiSurfaceOrPolygon","polygons","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","writeSurfaceOrPolygonMember","writeEnvelope","extent","ENVELOPE_SERIALIZERS","prototype","GEOMETRY_FLAT_COORDINATES_PARSERS","FLAT_LINEAR_RINGS_PARSERS","GEOMETRY_PARSERS","readPoint","readMultiPoint","readLineString","readMultiLineString","readLinearRing","readPolygon","readMultiPolygon"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/format/GML2.js"],"sourcesContent":["/**\n * @module ol/format/GML2\n */\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  createElementNS,\n  getAllTextContent,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport {writeStringTextNode} from './xsd.js';\n\n/**\n * @const\n * @type {string}\n */\nconst schemaLocation =\n  GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nclass GML2 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(\n      this.readFeaturesInternal\n    );\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatCoordinates(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n      objectStack[0]\n    );\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n    const coordsGroups = s.trim().split(/\\s+/);\n    const flatCoordinates = [];\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n      const coords = coordsGroups[i].split(/,+/);\n      const x = parseFloat(coords[0]);\n      const y = parseFloat(coords[1]);\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readBox(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.BOX_PARSERS_,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[1][3],\n      flatCoordinates[1][4]\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  innerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  outerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n  createCoordinatesNode_(namespaceURI) {\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n\n    return coordinates;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCoordinates_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ',' + point[1]\n        : point[1] + ',' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    const point = geometry.getCoordinates();\n    const coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      'http://www.opengis.net/gml',\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\nexport default GML2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
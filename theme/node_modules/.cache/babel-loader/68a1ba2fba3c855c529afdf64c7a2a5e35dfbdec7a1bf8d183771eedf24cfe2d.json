{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\n/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport { abstract as _abstract } from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nvar JSONFeature = /*#__PURE__*/function (_FeatureFormat) {\n  function JSONFeature() {\n    _classCallCheck(this, JSONFeature);\n    return _callSuper(this, JSONFeature);\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  _inherits(JSONFeature, _FeatureFormat);\n  return _createClass(JSONFeature, [{\n    key: \"getType\",\n    value: function getType() {\n      return 'json';\n    }\n\n    /**\n     * Read a feature.  Only works for a single feature. Use `readFeatures` to\n     * read a feature collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {import(\"../Feature.js\").FeatureLike|Array<import(\"../render/Feature.js\").default>} Feature.\n     * @api\n     */\n  }, {\n    key: \"readFeature\",\n    value: function readFeature(source, options) {\n      return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, options));\n    }\n\n    /**\n     * Read all features.  Works with both a single feature and a feature\n     * collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n     * @api\n     */\n  }, {\n    key: \"readFeatures\",\n    value: function readFeatures(source, options) {\n      return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, options));\n    }\n\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default|import(\"../render/Feature.js\").default|Array<import(\"../render/Feature.js\").default>} Feature.\n     */\n  }, {\n    key: \"readFeatureFromObject\",\n    value: function readFeatureFromObject(object, options) {\n      return _abstract();\n    }\n\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default|import(\"../render/Feature.js\").default>} Features.\n     */\n  }, {\n    key: \"readFeaturesFromObject\",\n    value: function readFeaturesFromObject(object, options) {\n      return _abstract();\n    }\n\n    /**\n     * Read a geometry.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     * @api\n     */\n  }, {\n    key: \"readGeometry\",\n    value: function readGeometry(source, options) {\n      return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, options));\n    }\n\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n  }, {\n    key: \"readGeometryFromObject\",\n    value: function readGeometryFromObject(object, options) {\n      return _abstract();\n    }\n\n    /**\n     * Read the projection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     * @api\n     */\n  }, {\n    key: \"readProjection\",\n    value: function readProjection(source) {\n      return this.readProjectionFromObject(getObject(source));\n    }\n\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n  }, {\n    key: \"readProjectionFromObject\",\n    value: function readProjectionFromObject(object) {\n      return _abstract();\n    }\n\n    /**\n     * Encode a feature as string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Encoded feature.\n     * @api\n     */\n  }, {\n    key: \"writeFeature\",\n    value: function writeFeature(feature, options) {\n      return JSON.stringify(this.writeFeatureObject(feature, options));\n    }\n\n    /**\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {Object} Object.\n     */\n  }, {\n    key: \"writeFeatureObject\",\n    value: function writeFeatureObject(feature, options) {\n      return _abstract();\n    }\n\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Encoded features.\n     * @api\n     */\n  }, {\n    key: \"writeFeatures\",\n    value: function writeFeatures(features, options) {\n      return JSON.stringify(this.writeFeaturesObject(features, options));\n    }\n\n    /**\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {Object} Object.\n     */\n  }, {\n    key: \"writeFeaturesObject\",\n    value: function writeFeaturesObject(features, options) {\n      return _abstract();\n    }\n\n    /**\n     * Encode a geometry as string.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {string} Encoded geometry.\n     * @api\n     */\n  }, {\n    key: \"writeGeometry\",\n    value: function writeGeometry(geometry, options) {\n      return JSON.stringify(this.writeGeometryObject(geometry, options));\n    }\n\n    /**\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n     * @return {Object} Object.\n     */\n  }, {\n    key: \"writeGeometryObject\",\n    value: function writeGeometryObject(geometry, options) {\n      return _abstract();\n    }\n  }]);\n}(FeatureFormat);\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    var object = JSON.parse(source);\n    return object ? (/** @type {Object} */object) : null;\n  }\n  if (source !== null) {\n    return source;\n  }\n  return null;\n}\nexport default JSONFeature;","map":{"version":3,"names":["FeatureFormat","abstract","JSONFeature","_FeatureFormat","_classCallCheck","_callSuper","_inherits","_createClass","key","value","getType","readFeature","source","options","readFeatureFromObject","getObject","getReadOptions","readFeatures","readFeaturesFromObject","object","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","JSON","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","geometry","writeGeometryObject","parse"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/format/JSONFeature.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|Array<import(\"../render/Feature.js\").default>} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default|import(\"../render/Feature.js\").default|Array<import(\"../render/Feature.js\").default>} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default|import(\"../render/Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  }\n  if (source !== null) {\n    return source;\n  }\n  return null;\n}\n\nexport default JSONFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
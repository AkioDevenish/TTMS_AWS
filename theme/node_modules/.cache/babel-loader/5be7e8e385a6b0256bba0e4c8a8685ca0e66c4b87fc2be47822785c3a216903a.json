{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /*#__PURE__*/function (_Geometry) {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  function GeometryCollection(geometries) {\n    var _this;\n    _classCallCheck(this, GeometryCollection);\n    _this = _callSuper(this, GeometryCollection);\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    _this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.changeEventsKeys_ = [];\n    _this.listenGeometriesChange_();\n    return _this;\n  }\n\n  /**\n   * @private\n   */\n  _inherits(GeometryCollection, _Geometry);\n  return _createClass(GeometryCollection, [{\n    key: \"unlistenGeometriesChange_\",\n    value: function unlistenGeometriesChange_() {\n      this.changeEventsKeys_.forEach(unlistenByKey);\n      this.changeEventsKeys_.length = 0;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"listenGeometriesChange_\",\n    value: function listenGeometriesChange_() {\n      if (!this.geometries_) {\n        return;\n      }\n      for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n        this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n      }\n    }\n\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!GeometryCollection} Clone.\n     * @api\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var geometryCollection = new GeometryCollection(null);\n      geometryCollection.setGeometries(this.geometries_);\n      geometryCollection.applyProperties(this);\n      return geometryCollection;\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n        return minSquaredDistance;\n      }\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n      }\n      return minSquaredDistance;\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n  }, {\n    key: \"containsXY\",\n    value: function containsXY(x, y) {\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        if (geometries[i].containsXY(x, y)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n  }, {\n    key: \"computeExtent\",\n    value: function computeExtent(extent) {\n      createOrUpdateEmpty(extent);\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        extend(extent, geometries[i].getExtent());\n      }\n      return extent;\n    }\n\n    /**\n     * Return the geometries that make up this geometry collection.\n     * @return {Array<Geometry>} Geometries.\n     * @api\n     */\n  }, {\n    key: \"getGeometries\",\n    value: function getGeometries() {\n      return cloneGeometries(this.geometries_);\n    }\n\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n  }, {\n    key: \"getGeometriesArray\",\n    value: function getGeometriesArray() {\n      return this.geometries_;\n    }\n\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n  }, {\n    key: \"getGeometriesArrayRecursive\",\n    value: function getGeometriesArrayRecursive() {\n      /** @type {Array<Geometry>} */\n      var geometriesArray = [];\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        if (geometries[i].getType() === this.getType()) {\n          geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */geometries[i].getGeometriesArrayRecursive());\n        } else {\n          geometriesArray.push(geometries[i]);\n        }\n      }\n      return geometriesArray;\n    }\n\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {GeometryCollection} Simplified GeometryCollection.\n     */\n  }, {\n    key: \"getSimplifiedGeometry\",\n    value: function getSimplifiedGeometry(squaredTolerance) {\n      if (this.simplifiedGeometryRevision !== this.getRevision()) {\n        this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n        this.simplifiedGeometryRevision = this.getRevision();\n      }\n      if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n        return this;\n      }\n      var simplifiedGeometries = [];\n      var geometries = this.geometries_;\n      var simplified = false;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometry = geometries[i];\n        var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n        simplifiedGeometries.push(simplifiedGeometry);\n        if (simplifiedGeometry !== geometry) {\n          simplified = true;\n        }\n      }\n      if (simplified) {\n        var simplifiedGeometryCollection = new GeometryCollection(null);\n        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n        return simplifiedGeometryCollection;\n      }\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'GeometryCollection';\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        if (geometries[i].intersectsExtent(extent)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @return {boolean} Is empty.\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.geometries_.length === 0;\n    }\n\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, anchor) {\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        geometries[i].rotate(angle, anchor);\n      }\n      this.changed();\n    }\n\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy, anchor) {\n      if (!anchor) {\n        anchor = getCenter(this.getExtent());\n      }\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        geometries[i].scale(sx, sy, anchor);\n      }\n      this.changed();\n    }\n\n    /**\n     * Set the geometries that make up this geometry collection.\n     * @param {Array<Geometry>} geometries Geometries.\n     * @api\n     */\n  }, {\n    key: \"setGeometries\",\n    value: function setGeometries(geometries) {\n      this.setGeometriesArray(cloneGeometries(geometries));\n    }\n\n    /**\n     * @param {Array<Geometry>} geometries Geometries.\n     */\n  }, {\n    key: \"setGeometriesArray\",\n    value: function setGeometriesArray(geometries) {\n      this.unlistenGeometriesChange_();\n      this.geometries_ = geometries;\n      this.listenGeometriesChange_();\n      this.changed();\n    }\n\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform(transformFn) {\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        geometries[i].applyTransform(transformFn);\n      }\n      this.changed();\n    }\n\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n  }, {\n    key: \"translate\",\n    value: function translate(deltaX, deltaY) {\n      var geometries = this.geometries_;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        geometries[i].translate(deltaX, deltaY);\n      }\n      this.changed();\n    }\n\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      this.unlistenGeometriesChange_();\n      _superPropGet(GeometryCollection, \"disposeInternal\", this, 3)([]);\n    }\n  }]);\n}(Geometry);\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\nexport default GeometryCollection;","map":{"version":3,"names":["EventType","Geometry","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","GeometryCollection","_Geometry","geometries","_this","_classCallCheck","_callSuper","geometries_","changeEventsKeys_","listenGeometriesChange_","_inherits","_createClass","key","value","unlistenGeometriesChange_","forEach","length","i","ii","push","CHANGE","changed","clone","geometryCollection","setGeometries","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","containsXY","computeExtent","extent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","getType","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","intersectsExtent","isEmpty","rotate","angle","anchor","scale","sx","sy","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","_superPropGet","clonedGeometries"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/geom/GeometryCollection.js"],"sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
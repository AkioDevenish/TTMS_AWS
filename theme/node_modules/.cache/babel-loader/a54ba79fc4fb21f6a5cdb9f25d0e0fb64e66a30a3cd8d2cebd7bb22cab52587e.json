{"ast":null,"code":"import _toConsumableArray from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /*#__PURE__*/function (_Control) {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function FullScreen(options) {\n    var _this;\n    _classCallCheck(this, FullScreen);\n    options = options ? options : {};\n    _this = _callSuper(this, FullScreen, [{\n      element: document.createElement('div'),\n      target: options.target\n    }]);\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    _this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : \"\\u2922\";\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : \"\\xD7\";\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.button_ = document.createElement('button');\n    _this.button_.title = tipLabel;\n    _this.button_.setAttribute('type', 'button');\n    _this.button_.appendChild(_this.labelNode_);\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    _this.setClassName_(_this.button_, _this.isInFullscreen_);\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n    _this.element.appendChild(_this.button_);\n    return _this;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  _inherits(FullScreen, _Control);\n  return _createClass(FullScreen, [{\n    key: \"handleClick_\",\n    value: function handleClick_(event) {\n      event.preventDefault();\n      this.handleFullScreen_();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleFullScreen_\",\n    value: function handleFullScreen_() {\n      var map = this.getMap();\n      if (!map) {\n        return;\n      }\n      var doc = map.getOwnerDocument();\n      if (!isFullScreenSupported(doc)) {\n        return;\n      }\n      if (isFullScreen(doc)) {\n        exitFullScreen(doc);\n      } else {\n        var element;\n        if (this.source_) {\n          element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n        } else {\n          element = map.getTargetElement();\n        }\n        if (this.keys_) {\n          requestFullScreenWithKeys(element);\n        } else {\n          requestFullScreen(element);\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleFullScreenChange_\",\n    value: function handleFullScreenChange_() {\n      var map = this.getMap();\n      if (!map) {\n        return;\n      }\n      var wasInFullscreen = this.isInFullscreen_;\n      this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n      if (wasInFullscreen !== this.isInFullscreen_) {\n        this.setClassName_(this.button_, this.isInFullscreen_);\n        if (this.isInFullscreen_) {\n          replaceNode(this.labelActiveNode_, this.labelNode_);\n          this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n        } else {\n          replaceNode(this.labelNode_, this.labelActiveNode_);\n          this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n        }\n        map.updateSize();\n      }\n    }\n\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n  }, {\n    key: \"setClassName_\",\n    value: function setClassName_(element, fullscreen) {\n      if (fullscreen) {\n        var _element$classList, _element$classList2;\n        (_element$classList = element.classList).remove.apply(_element$classList, _toConsumableArray(this.inactiveClassName_));\n        (_element$classList2 = element.classList).add.apply(_element$classList2, _toConsumableArray(this.activeClassName_));\n      } else {\n        var _element$classList3, _element$classList4;\n        (_element$classList3 = element.classList).remove.apply(_element$classList3, _toConsumableArray(this.activeClassName_));\n        (_element$classList4 = element.classList).add.apply(_element$classList4, _toConsumableArray(this.inactiveClassName_));\n      }\n    }\n\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     * @api\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      var oldMap = this.getMap();\n      if (oldMap) {\n        oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n      }\n      _superPropGet(FullScreen, \"setMap\", this, 3)([map]);\n      this.handleMapTargetChange_();\n      if (map) {\n        map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleMapTargetChange_\",\n    value: function handleMapTargetChange_() {\n      var listeners = this.documentListeners_;\n      for (var i = 0, ii = listeners.length; i < ii; ++i) {\n        unlistenByKey(listeners[i]);\n      }\n      listeners.length = 0;\n      var map = this.getMap();\n      if (map) {\n        var doc = map.getOwnerDocument();\n        if (isFullScreenSupported(doc)) {\n          this.element.classList.remove(CLASS_UNSUPPORTED);\n        } else {\n          this.element.classList.add(CLASS_UNSUPPORTED);\n        }\n        for (var _i = 0, _ii = events.length; _i < _ii; ++_i) {\n          listeners.push(listen(doc, events[_i], this.handleFullScreenChange_, this));\n        }\n        this.handleFullScreenChange_();\n      }\n    }\n  }]);\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\nexport default FullScreen;","map":{"version":3,"names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","_Control","options","_this","_classCallCheck","_callSuper","element","document","createElement","target","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","concat","_inherits","_createClass","key","value","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","wasInFullscreen","dispatchEvent","updateSize","fullscreen","_element$classList","_element$classList2","classList","remove","apply","_toConsumableArray","add","_element$classList3","_element$classList4","setMap","oldMap","removeChangeListener","TARGET","_superPropGet","addChangeListener","listeners","i","ii","length","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/control/FullScreen.js"],"sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceNode} from '../dom.js';\n\nconst events = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'MSFullscreenChange',\n];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this)\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
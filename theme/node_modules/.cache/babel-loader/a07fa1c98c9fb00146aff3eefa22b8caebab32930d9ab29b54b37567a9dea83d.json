{"ast":null,"code":"import _typeof from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {Feature} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport var ModifyEvent = /*#__PURE__*/function (_Event) {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  function ModifyEvent(type, features, mapBrowserEvent) {\n    var _this;\n    _classCallCheck(this, ModifyEvent);\n    _this = _callSuper(this, ModifyEvent, [type]);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    _this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n  _inherits(ModifyEvent, _Event);\n  return _createClass(ModifyEvent);\n}(Event);\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /*#__PURE__*/function (_PointerInteraction) {\n  /**\n   * @param {Options} options Options.\n   */\n  function Modify(options) {\n    var _this2;\n    _classCallCheck(this, Modify);\n    _this2 = _callSuper(this, Modify, [(/** @type {import(\"./Pointer.js\").Options} */options)]);\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    _this2.un;\n\n    /** @private */\n    _this2.boundHandleFeatureChange_ = _this2.handleFeatureChange_.bind(_this2);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this2.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    _this2.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this2.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this2.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this2.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    _this2.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    _this2.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this2.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    _this2.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    _this2.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    _this2.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this2.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this2.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    _this2.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    _this2.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this2.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    _this2.SEGMENT_WRITERS_ = {\n      'Point': _this2.writePointGeometry_.bind(_this2),\n      'LineString': _this2.writeLineStringGeometry_.bind(_this2),\n      'LinearRing': _this2.writeLineStringGeometry_.bind(_this2),\n      'Polygon': _this2.writePolygonGeometry_.bind(_this2),\n      'MultiPoint': _this2.writeMultiPointGeometry_.bind(_this2),\n      'MultiLineString': _this2.writeMultiLineStringGeometry_.bind(_this2),\n      'MultiPolygon': _this2.writeMultiPolygonGeometry_.bind(_this2),\n      'Circle': _this2.writeCircleGeometry_.bind(_this2),\n      'GeometryCollection': _this2.writeGeometryCollectionGeometry_.bind(_this2)\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    _this2.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n    _this2.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    var features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      _this2.source_ = options.source;\n      features = new Collection(_this2.source_.getFeatures());\n      _this2.source_.addEventListener(VectorEventType.ADDFEATURE, _this2.handleSourceAdd_.bind(_this2));\n      _this2.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this2.handleSourceRemove_.bind(_this2));\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n    if (options.hitDetection) {\n      _this2.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    _this2.features_ = features;\n    _this2.features_.forEach(_this2.addFeature_.bind(_this2));\n    _this2.features_.addEventListener(CollectionEventType.ADD, _this2.handleFeatureAdd_.bind(_this2));\n    _this2.features_.addEventListener(CollectionEventType.REMOVE, _this2.handleFeatureRemove_.bind(_this2));\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    _this2.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n    _this2.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    _this2.snapToPointer_ = options.snapToPointer === undefined ? !_this2.hitDetection_ : options.snapToPointer;\n    return _this2;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  _inherits(Modify, _PointerInteraction);\n  return _createClass(Modify, [{\n    key: \"addFeature_\",\n    value: function addFeature_(feature) {\n      var geometry = feature.getGeometry();\n      if (geometry) {\n        var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n        if (writer) {\n          writer(feature, geometry);\n        }\n      }\n      var map = this.getMap();\n      if (map && map.isRendered() && this.getActive()) {\n        this.handlePointerAtPixel_(this.lastPixel_, map);\n      }\n      feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    }\n\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n  }, {\n    key: \"willModifyFeatures_\",\n    value: function willModifyFeatures_(evt, segments) {\n      if (!this.featuresBeingModified_) {\n        this.featuresBeingModified_ = new Collection();\n        var features = this.featuresBeingModified_.getArray();\n        for (var i = 0, ii = segments.length; i < ii; ++i) {\n          var segment = segments[i];\n          for (var s = 0, ss = segment.length; s < ss; ++s) {\n            var feature = segment[s].feature;\n            if (feature && !features.includes(feature)) {\n              this.featuresBeingModified_.push(feature);\n            }\n          }\n        }\n        if (this.featuresBeingModified_.getLength() === 0) {\n          this.featuresBeingModified_ = null;\n        } else {\n          this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n        }\n      }\n    }\n\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n  }, {\n    key: \"removeFeature_\",\n    value: function removeFeature_(feature) {\n      this.removeFeatureSegmentData_(feature);\n      // Remove the vertex feature if the collection of candidate features is empty.\n      if (this.vertexFeature_ && this.features_.getLength() === 0) {\n        this.overlay_.getSource().removeFeature(this.vertexFeature_);\n        this.vertexFeature_ = null;\n      }\n      feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    }\n\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n  }, {\n    key: \"removeFeatureSegmentData_\",\n    value: function removeFeatureSegmentData_(feature) {\n      var rBush = this.rBush_;\n      /** @type {Array<SegmentData>} */\n      var nodesToRemove = [];\n      rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n      for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n        var nodeToRemove = nodesToRemove[i];\n        for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n          if (this.dragSegments_[j][0] === nodeToRemove) {\n            this.dragSegments_.splice(j, 1);\n          }\n        }\n        rBush.remove(nodeToRemove);\n      }\n    }\n\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setActive\",\n    value: function setActive(active) {\n      if (this.vertexFeature_ && !active) {\n        this.overlay_.getSource().removeFeature(this.vertexFeature_);\n        this.vertexFeature_ = null;\n      }\n      _superPropGet(Modify, \"setActive\", this, 3)([active]);\n    }\n\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../Map.js\").default} map Map.\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      this.overlay_.setMap(map);\n      _superPropGet(Modify, \"setMap\", this, 3)([map]);\n    }\n\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n  }, {\n    key: \"getOverlay\",\n    value: function getOverlay() {\n      return this.overlay_;\n    }\n\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleSourceAdd_\",\n    value: function handleSourceAdd_(event) {\n      if (event.feature) {\n        this.features_.push(event.feature);\n      }\n    }\n\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleSourceRemove_\",\n    value: function handleSourceRemove_(event) {\n      if (event.feature) {\n        this.features_.remove(event.feature);\n      }\n    }\n\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n     * @private\n     */\n  }, {\n    key: \"handleFeatureAdd_\",\n    value: function handleFeatureAdd_(evt) {\n      this.addFeature_(evt.element);\n    }\n\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n  }, {\n    key: \"handleFeatureChange_\",\n    value: function handleFeatureChange_(evt) {\n      if (!this.changingFeature_) {\n        var feature = /** @type {Feature} */evt.target;\n        this.removeFeature_(feature);\n        this.addFeature_(feature);\n      }\n    }\n\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n     * @private\n     */\n  }, {\n    key: \"handleFeatureRemove_\",\n    value: function handleFeatureRemove_(evt) {\n      this.removeFeature_(evt.element);\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writePointGeometry_\",\n    value: function writePointGeometry_(feature, geometry) {\n      var coordinates = geometry.getCoordinates();\n\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeMultiPointGeometry_\",\n    value: function writeMultiPointGeometry_(feature, geometry) {\n      var points = geometry.getCoordinates();\n      for (var i = 0, ii = points.length; i < ii; ++i) {\n        var coordinates = points[i];\n\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [i],\n          index: i,\n          segment: [coordinates, coordinates]\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n      }\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeLineStringGeometry_\",\n    value: function writeLineStringGeometry_(feature, geometry) {\n      var coordinates = geometry.getCoordinates();\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeMultiLineStringGeometry_\",\n    value: function writeMultiLineStringGeometry_(feature, geometry) {\n      var lines = geometry.getCoordinates();\n      for (var j = 0, jj = lines.length; j < jj; ++j) {\n        var coordinates = lines[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writePolygonGeometry_\",\n    value: function writePolygonGeometry_(feature, geometry) {\n      var rings = geometry.getCoordinates();\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeMultiPolygonGeometry_\",\n    value: function writeMultiPolygonGeometry_(feature, geometry) {\n      var polygons = geometry.getCoordinates();\n      for (var k = 0, kk = polygons.length; k < kk; ++k) {\n        var rings = polygons[k];\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n          var coordinates = rings[j];\n          for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n\n            /** @type {SegmentData} */\n            var segmentData = {\n              feature: feature,\n              geometry: geometry,\n              depth: [j, k],\n              index: i,\n              segment: segment\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n          }\n        }\n      }\n    }\n\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeCircleGeometry_\",\n    value: function writeCircleGeometry_(feature, geometry) {\n      var coordinates = geometry.getCenter();\n\n      /** @type {SegmentData} */\n      var centerSegmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: CIRCLE_CENTER_INDEX,\n        segment: [coordinates, coordinates]\n      };\n\n      /** @type {SegmentData} */\n      var circumferenceSegmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: CIRCLE_CIRCUMFERENCE_INDEX,\n        segment: [coordinates, coordinates]\n      };\n      var featureSegments = [centerSegmentData, circumferenceSegmentData];\n      centerSegmentData.featureSegments = featureSegments;\n      circumferenceSegmentData.featureSegments = featureSegments;\n      this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n      var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry;\n      var userProjection = getUserProjection();\n      if (userProjection && this.getMap()) {\n        var projection = this.getMap().getView().getProjection();\n        circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n        circleGeometry = fromCircle(/** @type {import(\"../geom/Circle.js\").default} */circleGeometry).transform(projection, userProjection);\n      }\n      this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    }\n\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n  }, {\n    key: \"writeGeometryCollectionGeometry_\",\n    value: function writeGeometryCollectionGeometry_(feature, geometry) {\n      var geometries = geometry.getGeometriesArray();\n      for (var i = 0; i < geometries.length; ++i) {\n        var _geometry = geometries[i];\n        var writer = this.SEGMENT_WRITERS_[_geometry.getType()];\n        writer(feature, _geometry);\n      }\n    }\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<Feature>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n  }, {\n    key: \"createOrUpdateVertexFeature_\",\n    value: function createOrUpdateVertexFeature_(coordinates, features, geometries) {\n      var vertexFeature = this.vertexFeature_;\n      if (!vertexFeature) {\n        vertexFeature = new Feature(new Point(coordinates));\n        this.vertexFeature_ = vertexFeature;\n        this.overlay_.getSource().addFeature(vertexFeature);\n      } else {\n        var geometry = vertexFeature.getGeometry();\n        geometry.setCoordinates(coordinates);\n      }\n      vertexFeature.set('features', features);\n      vertexFeature.set('geometries', geometries);\n      return vertexFeature;\n    }\n\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(mapBrowserEvent) {\n      if (!mapBrowserEvent.originalEvent) {\n        return true;\n      }\n      this.lastPointerEvent_ = mapBrowserEvent;\n      var handled;\n      if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n        this.handlePointerMove_(mapBrowserEvent);\n      }\n      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n        if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n          handled = this.removePoint();\n        } else {\n          handled = true;\n        }\n      }\n      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n        this.ignoreNextSingleClick_ = false;\n      }\n      return _superPropGet(Modify, \"handleEvent\", this, 3)([mapBrowserEvent]) && !handled;\n    }\n\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n  }, {\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(evt) {\n      this.ignoreNextSingleClick_ = false;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      var vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n      var features = [];\n      var geometries = [];\n      for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n        var dragSegment = this.dragSegments_[i];\n        var segmentData = dragSegment[0];\n        var feature = segmentData.feature;\n        if (!features.includes(feature)) {\n          features.push(feature);\n        }\n        var geometry = segmentData.geometry;\n        if (!geometries.includes(geometry)) {\n          geometries.push(geometry);\n        }\n        var depth = segmentData.depth;\n        var coordinates = void 0;\n        var segment = segmentData.segment;\n        var index = dragSegment[1];\n        while (vertex.length < geometry.getStride()) {\n          vertex.push(segment[index][vertex.length]);\n        }\n        switch (geometry.getType()) {\n          case 'Point':\n            coordinates = vertex;\n            segment[0] = vertex;\n            segment[1] = vertex;\n            break;\n          case 'MultiPoint':\n            coordinates = geometry.getCoordinates();\n            coordinates[segmentData.index] = vertex;\n            segment[0] = vertex;\n            segment[1] = vertex;\n            break;\n          case 'LineString':\n            coordinates = geometry.getCoordinates();\n            coordinates[segmentData.index + index] = vertex;\n            segment[index] = vertex;\n            break;\n          case 'MultiLineString':\n            coordinates = geometry.getCoordinates();\n            coordinates[depth[0]][segmentData.index + index] = vertex;\n            segment[index] = vertex;\n            break;\n          case 'Polygon':\n            coordinates = geometry.getCoordinates();\n            coordinates[depth[0]][segmentData.index + index] = vertex;\n            segment[index] = vertex;\n            break;\n          case 'MultiPolygon':\n            coordinates = geometry.getCoordinates();\n            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n            segment[index] = vertex;\n            break;\n          case 'Circle':\n            segment[0] = vertex;\n            segment[1] = vertex;\n            if (segmentData.index === CIRCLE_CENTER_INDEX) {\n              this.changingFeature_ = true;\n              geometry.setCenter(vertex);\n              this.changingFeature_ = false;\n            } else {\n              // We're dragging the circle's circumference:\n              this.changingFeature_ = true;\n              var projection = evt.map.getView().getProjection();\n              var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n              var userProjection = getUserProjection();\n              if (userProjection) {\n                var circleGeometry = geometry.clone().transform(userProjection, projection);\n                circleGeometry.setRadius(radius);\n                radius = circleGeometry.transform(projection, userProjection).getRadius();\n              }\n              geometry.setRadius(radius);\n              this.changingFeature_ = false;\n            }\n            break;\n          default:\n          // pass\n        }\n        if (coordinates) {\n          this.setGeometryCoordinates_(geometry, coordinates);\n        }\n      }\n      this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    }\n\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(evt) {\n      if (!this.condition_(evt)) {\n        return false;\n      }\n      var pixelCoordinate = evt.coordinate;\n      this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n      this.dragSegments_.length = 0;\n      this.featuresBeingModified_ = null;\n      var vertexFeature = this.vertexFeature_;\n      if (vertexFeature) {\n        var projection = evt.map.getView().getProjection();\n        var insertVertices = [];\n        var vertex = vertexFeature.getGeometry().getCoordinates();\n        var vertexExtent = boundingExtent([vertex]);\n        var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n        var componentSegments = {};\n        segmentDataMatches.sort(compareIndexes);\n        for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n          var segmentDataMatch = segmentDataMatches[i];\n          var segment = segmentDataMatch.segment;\n          var uid = getUid(segmentDataMatch.geometry);\n          var depth = segmentDataMatch.depth;\n          if (depth) {\n            uid += '-' + depth.join('-'); // separate feature components\n          }\n          if (!componentSegments[uid]) {\n            componentSegments[uid] = new Array(2);\n          }\n          if (segmentDataMatch.geometry.getType() === 'Circle' && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n            if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n              this.dragSegments_.push([segmentDataMatch, 0]);\n              componentSegments[uid][0] = segmentDataMatch;\n            }\n            continue;\n          }\n          if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n            continue;\n          }\n          if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n            if (componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n              var coordinates = segmentDataMatch.geometry.getCoordinates();\n              switch (segmentDataMatch.geometry.getType()) {\n                // prevent dragging closed linestrings by the connecting node\n                case 'LineString':\n                case 'MultiLineString':\n                  continue;\n                // if dragging the first vertex of a polygon, ensure the other segment\n                // belongs to the closing vertex of the linear ring\n                case 'MultiPolygon':\n                  coordinates = coordinates[depth[1]];\n                /* falls through */\n                case 'Polygon':\n                  if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                    continue;\n                  }\n                  break;\n                default:\n                // pass\n              }\n            }\n            this.dragSegments_.push([segmentDataMatch, 1]);\n            componentSegments[uid][1] = segmentDataMatch;\n            continue;\n          }\n          if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n            insertVertices.push(segmentDataMatch);\n          }\n        }\n        if (insertVertices.length) {\n          this.willModifyFeatures_(evt, [insertVertices]);\n        }\n        for (var j = insertVertices.length - 1; j >= 0; --j) {\n          this.insertVertex_(insertVertices[j], vertex);\n        }\n      }\n      return !!this.vertexFeature_;\n    }\n\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(evt) {\n      for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n        var segmentData = this.dragSegments_[i][0];\n        var geometry = segmentData.geometry;\n        if (geometry.getType() === 'Circle') {\n          // Update a circle object in the R* bush:\n          var coordinates = geometry.getCenter();\n          var centerSegmentData = segmentData.featureSegments[0];\n          var circumferenceSegmentData = segmentData.featureSegments[1];\n          centerSegmentData.segment[0] = coordinates;\n          centerSegmentData.segment[1] = coordinates;\n          circumferenceSegmentData.segment[0] = coordinates;\n          circumferenceSegmentData.segment[1] = coordinates;\n          this.rBush_.update(createExtent(coordinates), centerSegmentData);\n          var circleGeometry = geometry;\n          var userProjection = getUserProjection();\n          if (userProjection) {\n            var projection = evt.map.getView().getProjection();\n            circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n            circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n          }\n          this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n        } else {\n          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n        }\n      }\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n        this.featuresBeingModified_ = null;\n      }\n      return false;\n    }\n\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n  }, {\n    key: \"handlePointerMove_\",\n    value: function handlePointerMove_(evt) {\n      this.lastPixel_ = evt.pixel;\n      this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    }\n\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../Map.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n     * @private\n     */\n  }, {\n    key: \"handlePointerAtPixel_\",\n    value: function handlePointerAtPixel_(pixel, map, coordinate) {\n      var _this3 = this;\n      var pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n      var projection = map.getView().getProjection();\n      var sortByDistance = function sortByDistance(a, b) {\n        return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n      };\n\n      /** @type {Array<SegmentData>|undefined} */\n      var nodes;\n      /** @type {Point|undefined} */\n      var hitPointGeometry;\n      if (this.hitDetection_) {\n        var layerFilter = _typeof(this.hitDetection_) === 'object' ? function (layer) {\n          return layer === _this3.hitDetection_;\n        } : undefined;\n        map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n          if (geometry && geometry.getType() === 'Point') {\n            geometry = new Point(toUserCoordinate(geometry.getCoordinates(), projection));\n          }\n          var geom = geometry || feature.getGeometry();\n          if (feature instanceof Feature && _this3.features_.getArray().includes(feature)) {\n            hitPointGeometry = /** @type {Point} */geom;\n            var _coordinate = /** @type {Point} */feature.getGeometry().getFlatCoordinates().slice(0, 2);\n            nodes = [{\n              feature: feature,\n              geometry: hitPointGeometry,\n              segment: [_coordinate, _coordinate]\n            }];\n          }\n          return true;\n        }, {\n          layerFilter: layerFilter\n        });\n      }\n      if (!nodes) {\n        var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n        var buffer = map.getView().getResolution() * this.pixelTolerance_;\n        var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n        nodes = this.rBush_.getInExtent(box);\n      }\n      if (nodes && nodes.length > 0) {\n        var node = nodes.sort(sortByDistance)[0];\n        var closestSegment = node.segment;\n        var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n        var vertexPixel = map.getPixelFromCoordinate(vertex);\n        var dist = coordinateDistance(pixel, vertexPixel);\n        if (hitPointGeometry || dist <= this.pixelTolerance_) {\n          /** @type {Object<string, boolean>} */\n          var vertexSegments = {};\n          vertexSegments[getUid(closestSegment)] = true;\n          if (!this.snapToPointer_) {\n            this.delta_[0] = vertex[0] - pixelCoordinate[0];\n            this.delta_[1] = vertex[1] - pixelCoordinate[1];\n          }\n          if (node.geometry.getType() === 'Circle' && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            this.snappedToVertex_ = true;\n            this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          } else {\n            var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n            var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n            var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n            var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n            this.snappedToVertex_ = dist <= this.pixelTolerance_;\n            if (this.snappedToVertex_) {\n              vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n            }\n            this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n            var geometries = {};\n            geometries[getUid(node.geometry)] = true;\n            for (var i = 1, ii = nodes.length; i < ii; ++i) {\n              var segment = nodes[i].segment;\n              if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n                var geometryUid = getUid(nodes[i].geometry);\n                if (!(geometryUid in geometries)) {\n                  geometries[geometryUid] = true;\n                  vertexSegments[getUid(segment)] = true;\n                }\n              } else {\n                break;\n              }\n            }\n          }\n          this.vertexSegments_ = vertexSegments;\n          return;\n        }\n      }\n      if (this.vertexFeature_) {\n        this.overlay_.getSource().removeFeature(this.vertexFeature_);\n        this.vertexFeature_ = null;\n      }\n    }\n\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n  }, {\n    key: \"insertVertex_\",\n    value: function insertVertex_(segmentData, vertex) {\n      var segment = segmentData.segment;\n      var feature = segmentData.feature;\n      var geometry = segmentData.geometry;\n      var depth = segmentData.depth;\n      var index = segmentData.index;\n      var coordinates;\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(0);\n      }\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]].splice(index + 1, 0, vertex);\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]].splice(index + 1, 0, vertex);\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates.splice(index + 1, 0, vertex);\n          break;\n        default:\n          return;\n      }\n      this.setGeometryCoordinates_(geometry, coordinates);\n      var rTree = this.rBush_;\n      rTree.remove(segmentData);\n      this.updateSegmentIndices_(geometry, index, depth, 1);\n\n      /** @type {SegmentData} */\n      var newSegmentData = {\n        segment: [segment[0], vertex],\n        feature: feature,\n        geometry: geometry,\n        depth: depth,\n        index: index\n      };\n      rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n      this.dragSegments_.push([newSegmentData, 1]);\n\n      /** @type {SegmentData} */\n      var newSegmentData2 = {\n        segment: [vertex, segment[1]],\n        feature: feature,\n        geometry: geometry,\n        depth: depth,\n        index: index + 1\n      };\n      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n      this.dragSegments_.push([newSegmentData2, 0]);\n      this.ignoreNextSingleClick_ = true;\n    }\n\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n  }, {\n    key: \"removePoint\",\n    value: function removePoint() {\n      if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n        var evt = this.lastPointerEvent_;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var removed = this.removeVertex_();\n        if (this.featuresBeingModified_) {\n          this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n        }\n        this.featuresBeingModified_ = null;\n        return removed;\n      }\n      return false;\n    }\n\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n  }, {\n    key: \"removeVertex_\",\n    value: function removeVertex_() {\n      var dragSegments = this.dragSegments_;\n      var segmentsByFeature = {};\n      var deleted = false;\n      var component, coordinates, dragSegment, geometry, i, index, left;\n      var newIndex, right, segmentData, uid;\n      for (i = dragSegments.length - 1; i >= 0; --i) {\n        dragSegment = dragSegments[i];\n        segmentData = dragSegment[0];\n        uid = getUid(segmentData.feature);\n        if (segmentData.depth) {\n          // separate feature components\n          uid += '-' + segmentData.depth.join('-');\n        }\n        if (!(uid in segmentsByFeature)) {\n          segmentsByFeature[uid] = {};\n        }\n        if (dragSegment[1] === 0) {\n          segmentsByFeature[uid].right = segmentData;\n          segmentsByFeature[uid].index = segmentData.index;\n        } else if (dragSegment[1] == 1) {\n          segmentsByFeature[uid].left = segmentData;\n          segmentsByFeature[uid].index = segmentData.index + 1;\n        }\n      }\n      for (uid in segmentsByFeature) {\n        right = segmentsByFeature[uid].right;\n        left = segmentsByFeature[uid].left;\n        index = segmentsByFeature[uid].index;\n        newIndex = index - 1;\n        if (left !== undefined) {\n          segmentData = left;\n        } else {\n          segmentData = right;\n        }\n        if (newIndex < 0) {\n          newIndex = 0;\n        }\n        geometry = segmentData.geometry;\n        coordinates = geometry.getCoordinates();\n        component = coordinates;\n        deleted = false;\n        switch (geometry.getType()) {\n          case 'MultiLineString':\n            if (coordinates[segmentData.depth[0]].length > 2) {\n              coordinates[segmentData.depth[0]].splice(index, 1);\n              deleted = true;\n            }\n            break;\n          case 'LineString':\n            if (coordinates.length > 2) {\n              coordinates.splice(index, 1);\n              deleted = true;\n            }\n            break;\n          case 'MultiPolygon':\n            component = component[segmentData.depth[1]];\n          /* falls through */\n          case 'Polygon':\n            component = component[segmentData.depth[0]];\n            if (component.length > 4) {\n              if (index == component.length - 1) {\n                index = 0;\n              }\n              component.splice(index, 1);\n              deleted = true;\n              if (index === 0) {\n                // close the ring again\n                component.pop();\n                component.push(component[0]);\n                newIndex = component.length - 1;\n              }\n            }\n            break;\n          default:\n          // pass\n        }\n        if (deleted) {\n          this.setGeometryCoordinates_(geometry, coordinates);\n          var segments = [];\n          if (left !== undefined) {\n            this.rBush_.remove(left);\n            segments.push(left.segment[0]);\n          }\n          if (right !== undefined) {\n            this.rBush_.remove(right);\n            segments.push(right.segment[1]);\n          }\n          if (left !== undefined && right !== undefined) {\n            /** @type {SegmentData} */\n            var newSegmentData = {\n              depth: segmentData.depth,\n              feature: segmentData.feature,\n              geometry: segmentData.geometry,\n              index: newIndex,\n              segment: segments\n            };\n            this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n          }\n          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n          if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n          }\n          dragSegments.length = 0;\n        }\n      }\n      return deleted;\n    }\n\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n  }, {\n    key: \"setGeometryCoordinates_\",\n    value: function setGeometryCoordinates_(geometry, coordinates) {\n      this.changingFeature_ = true;\n      geometry.setCoordinates(coordinates);\n      this.changingFeature_ = false;\n    }\n\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n  }, {\n    key: \"updateSegmentIndices_\",\n    value: function updateSegmentIndices_(geometry, index, depth, delta) {\n      this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n        if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n          segmentDataMatch.index += delta;\n        }\n      });\n    }\n  }]);\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle') {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n        circleGeometry.clone().transform(userProjection, projection);\n      }\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle' && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n      circleGeometry.clone().transform(userProjection, projection);\n    }\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\nexport default Modify;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","Feature","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","_Event","type","features","mapBrowserEvent","_this","_classCallCheck","_callSuper","_inherits","_createClass","Modify","_PointerInteraction","options","_this2","on","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","key","value","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","i","ii","length","segment","s","ss","includes","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","remove","setActive","active","_superPropGet","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","set","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","Array","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","_this3","getCoordinateFromPixel","sortByDistance","a","b","projectedDistanceToSegmentDataSquared","nodes","hitPointGeometry","layerFilter","_typeof","layer","forEachFeatureAtPixel","geom","getFlatCoordinates","viewExtent","getResolution","box","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/interaction/Modify.js"],"sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  altKeyOnly,\n  always,\n  primaryAction,\n  singleClick,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  buffer as bufferExtent,\n  createOrUpdateFromCoordinate as createExtent,\n} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  equals as coordinatesEqual,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {equals} from '../array.js';\nimport {fromCircle} from '../geom/Polygon.js';\nimport {\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from '../proj.js';\nimport {getUid} from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend',\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {Feature} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    this.un;\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition\n      ? options.deleteCondition\n      : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition\n      ? options.insertVertexCondition\n      : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n    this.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    let features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(\n        VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_.bind(this)\n      );\n      this.source_.addEventListener(\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_.bind(this)\n      );\n    }\n    if (!features) {\n      throw new Error(\n        'The modify interaction requires features, a source or a layer'\n      );\n    }\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(\n      CollectionEventType.ADD,\n      this.handleFeatureAdd_.bind(this)\n    );\n    this.features_.addEventListener(\n      CollectionEventType.REMOVE,\n      this.handleFeatureRemove_.bind(this)\n    );\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n    this.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    this.snapToPointer_ =\n      options.snapToPointer === undefined\n        ? !this.hitDetection_\n        : options.snapToPointer;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const segment = segments[i];\n        for (let s = 0, ss = segment.length; s < ss; ++s) {\n          const feature = segment[s].feature;\n          if (feature && !features.includes(feature)) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYSTART,\n            this.featuresBeingModified_,\n            evt\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(\n      EventType.CHANGE,\n      this.boundHandleFeatureChange_\n    );\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      }\n    );\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates],\n    };\n\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates],\n      };\n\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment,\n      };\n\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment,\n          };\n\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n      circleGeometry = fromCircle(\n        /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)\n      ).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<Feature>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates, features, geometries) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (\n      !mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (\n        mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n        !this.ignoreNextSingleClick_\n      ) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n\n    const vertex = [\n      evt.coordinate[0] + this.delta_[0],\n      evt.coordinate[1] + this.delta_[1],\n    ];\n    const features = [];\n    const geometries = [];\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n      const geometry = segmentData.geometry;\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(\n              fromUserCoordinate(geometry.getCenter(), projection),\n              fromUserCoordinate(vertex, projection)\n            );\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = geometry\n                .clone()\n                .transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry\n                .transform(projection, userProjection)\n                .getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (\n          segmentDataMatch.geometry.getType() === 'Circle' &&\n          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          const closestVertex = closestOnSegmentData(\n            pixelCoordinate,\n            segmentDataMatch,\n            projection\n          );\n          if (\n            coordinatesEqual(closestVertex, vertex) &&\n            !componentSegments[uid][0]\n          ) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[0], vertex) &&\n          !componentSegments[uid][0]\n        ) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[1], vertex) &&\n          !componentSegments[uid][1]\n        ) {\n          if (\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0\n          ) {\n            let coordinates = segmentDataMatch.geometry.getCoordinates();\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n              /* falls through */\n              case 'Polygon':\n                if (\n                  segmentDataMatch.index !==\n                  coordinates[depth[0]].length - 2\n                ) {\n                  continue;\n                }\n                break;\n              default:\n              // pass\n            }\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          getUid(segment) in this.vertexSegments_ &&\n          !componentSegments[uid][0] &&\n          !componentSegments[uid][1] &&\n          this.insertVertexCondition_(evt)\n        ) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry\n            .clone()\n            .transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(\n            projection,\n            userProjection\n          );\n        }\n        this.rBush_.update(\n          circleGeometry.getExtent(),\n          circumferenceSegmentData\n        );\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(\n        new ModifyEvent(\n          ModifyEventType.MODIFYEND,\n          this.featuresBeingModified_,\n          evt\n        )\n      );\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../Map.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map, coordinate) {\n    const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return (\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)\n      );\n    };\n\n    /** @type {Array<SegmentData>|undefined} */\n    let nodes;\n    /** @type {Point|undefined} */\n    let hitPointGeometry;\n    if (this.hitDetection_) {\n      const layerFilter =\n        typeof this.hitDetection_ === 'object'\n          ? (layer) => layer === this.hitDetection_\n          : undefined;\n      map.forEachFeatureAtPixel(\n        pixel,\n        (feature, layer, geometry) => {\n          if (geometry && geometry.getType() === 'Point') {\n            geometry = new Point(\n              toUserCoordinate(geometry.getCoordinates(), projection)\n            );\n          }\n          const geom = geometry || feature.getGeometry();\n          if (\n            feature instanceof Feature &&\n            this.features_.getArray().includes(feature)\n          ) {\n            hitPointGeometry = /** @type {Point} */ (geom);\n            const coordinate = /** @type {Point} */ (feature.getGeometry())\n              .getFlatCoordinates()\n              .slice(0, 2);\n            nodes = [\n              {\n                feature,\n                geometry: hitPointGeometry,\n                segment: [coordinate, coordinate],\n              },\n            ];\n          }\n          return true;\n        },\n        {layerFilter}\n      );\n    }\n    if (!nodes) {\n      const viewExtent = fromUserExtent(\n        createExtent(pixelCoordinate, tempExtent),\n        projection\n      );\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(\n        bufferExtent(viewExtent, buffer, tempExtent),\n        projection\n      );\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (\n          node.geometry.getType() === 'Circle' &&\n          node.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry]\n          );\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex =\n              squaredDist1 > squaredDist2\n                ? closestSegment[1]\n                : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry]\n          );\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (\n              (coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1])) ||\n              (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0]))\n            ) {\n              const geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (\n      this.lastPointerEvent_ &&\n      this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG\n    ) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      const removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYEND,\n            this.featuresBeingModified_,\n            evt\n          )\n        );\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments,\n          };\n\n          this.rBush_.insert(\n            boundingExtent(newSegmentData.segment),\n            newSegmentData\n          );\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(\n      geometry.getExtent(),\n      function (segmentDataMatch) {\n        if (\n          segmentDataMatch.geometry === geometry &&\n          (depth === undefined ||\n            segmentDataMatch.depth === undefined ||\n            equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index\n        ) {\n          segmentDataMatch.index += delta;\n        }\n      }\n    );\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(\n  pointCoordinates,\n  segmentData,\n  projection\n) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n          circleGeometry.clone().transform(userProjection, projection)\n        );\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(\n        circleGeometry.getCenter(),\n        fromUserCoordinate(pointCoordinates, projection)\n      );\n      const distanceToCircumference =\n        Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (\n    geometry.getType() === 'Circle' &&\n    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX\n  ) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n        circleGeometry.clone().transform(userProjection, projection)\n      );\n    }\n    return toUserCoordinate(\n      circleGeometry.getClosestPoint(\n        fromUserCoordinate(pointCoordinates, projection)\n      ),\n      projection\n    );\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(\n    closestOnSegment(coordinate, tempSegment),\n    projection\n  );\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,kBAAkB,MAAM,cAAc;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SACEC,UAAU,EACVC,MAAM,EACNC,aAAa,EACbC,WAAW,QACN,wBAAwB;AAC/B,SACEC,cAAc,EACdC,MAAM,IAAIC,YAAY,EACtBC,4BAA4B,IAAIC,YAAY,QACvC,cAAc;AACrB,SACEC,gBAAgB,EAChBC,QAAQ,IAAIC,kBAAkB,EAC9BC,MAAM,IAAIC,gBAAgB,EAC1BC,eAAe,IAAIC,yBAAyB,EAC5CC,wBAAwB,QACnB,kBAAkB;AACzB,SAAQC,kBAAkB,QAAO,mBAAmB;AACpD,SAAQL,MAAM,QAAO,aAAa;AAClC,SAAQM,UAAU,QAAO,oBAAoB;AAC7C,SACEC,kBAAkB,EAClBC,cAAc,EACdC,iBAAiB,EACjBC,gBAAgB,EAChBC,YAAY,QACP,YAAY;AACnB,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA,IAAMC,0BAA0B,GAAG,CAAC;AAEpC,IAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/B,IAAMC,WAAW,GAAG,EAAE;;AAEtB;AACA;AACA;AACA,IAAMC,eAAe,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,WAAW,EAAE,aAAa;EAC1B;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAaC,WAAW,0BAAAC,MAAA;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAAD,YAAYE,IAAI,EAAEC,QAAQ,EAAEC,eAAe,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAN,WAAA;IAC3CK,KAAA,GAAAE,UAAA,OAAAP,WAAA,GAAME,IAAI;;IAEV;AACJ;AACA;AACA;AACA;IACIG,KAAA,CAAKF,QAAQ,GAAGA,QAAQ;;IAExB;AACJ;AACA;AACA;AACA;IACIE,KAAA,CAAKD,eAAe,GAAGA,eAAe;IAAC,OAAAC,KAAA;EACzC;EAACG,SAAA,CAAAR,WAAA,EAAAC,MAAA;EAAA,OAAAQ,YAAA,CAAAT,WAAA;AAAA,EAxB8B1C,KAAK;;AA2BtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA,IAqBMoD,MAAM,0BAAAC,mBAAA;EACV;AACF;AACA;EACE,SAAAD,OAAYE,OAAO,EAAE;IAAA,IAAAC,MAAA;IAAAP,eAAA,OAAAI,MAAA;IACnBG,MAAA,GAAAN,UAAA,OAAAG,MAAA,IAAM,6CAA+CE,OAAO;;IAE5D;AACJ;AACA;IACIC,MAAA,CAAKC,EAAE;;IAEP;AACJ;AACA;IACID,MAAA,CAAKE,IAAI;;IAET;AACJ;AACA;IACIF,MAAA,CAAKG,EAAE;;IAEP;IACAH,MAAA,CAAKI,yBAAyB,GAAGJ,MAAA,CAAKK,oBAAoB,CAACC,IAAI,CAAAN,MAAK,CAAC;;IAErE;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
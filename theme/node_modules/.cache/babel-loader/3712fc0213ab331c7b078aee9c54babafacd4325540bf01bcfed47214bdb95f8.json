{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport var CustomTile = /*#__PURE__*/function (_ImageTile) {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  function CustomTile(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    var _this;\n    _classCallCheck(this, CustomTile);\n    _this = _callSuper(this, CustomTile, [tileCoord, state, src, crossOrigin, tileLoadFunction, options]);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tileSize_ = tileSize;\n    return _this;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  _inherits(CustomTile, _ImageTile);\n  return _createClass(CustomTile, [{\n    key: \"getImage\",\n    value: function getImage() {\n      if (this.zoomifyImage_) {\n        return this.zoomifyImage_;\n      }\n      var image = _superPropGet(CustomTile, \"getImage\", this, 3)([]);\n      if (this.state == TileState.LOADED) {\n        var tileSize = this.tileSize_;\n        if (image.width == tileSize[0] && image.height == tileSize[1]) {\n          this.zoomifyImage_ = image;\n          return image;\n        }\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n      return image;\n    }\n  }]);\n}(ImageTile);\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nvar Zoomify = /*#__PURE__*/function (_TileImage) {\n  /**\n   * @param {Options} options Options.\n   */\n  function Zoomify(options) {\n    var _this2;\n    _classCallCheck(this, Zoomify);\n    var size = options.size;\n    var tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : 'default';\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var imageWidth = size[0];\n    var imageHeight = size[1];\n    var tierSizeInTiles = [];\n    var tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    var tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        var width = imageWidth;\n        var height = imageHeight;\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    var resolutions = [tilePixelRatio];\n    var tileCountUpToTier = [0];\n    for (var i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n    resolutions.reverse();\n    var tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    var url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    var urls = expandUrl(url);\n    var tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          var tileCoordZ = tileCoord[0];\n          var tileCoordX = tileCoord[1];\n          var tileCoordY = tileCoord[2];\n          var tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          var tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n          var localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n    var tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    var ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    _this2 = _callSuper(this, Zoomify, [{\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }]);\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this2.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    var tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    var testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    var image = new Image();\n    image.addEventListener('error', function () {\n      tileWidth = tileSize;\n      _this2.changed();\n    });\n    image.src = testTileUrl;\n    return _this2;\n  }\n  _inherits(Zoomify, _TileImage);\n  return _createClass(Zoomify);\n}(TileImage);\nexport default Zoomify;","map":{"version":3,"names":["DEFAULT_TILE_SIZE","ImageTile","TileGrid","TileImage","TileState","createCanvasContext2D","createFromTileUrlFunctions","expandUrl","getCenter","toSize","CustomTile","_ImageTile","tileSize","tileCoord","state","src","crossOrigin","tileLoadFunction","options","_this","_classCallCheck","_callSuper","zoomifyImage_","tileSize_","_inherits","_createClass","key","value","getImage","image","_superPropGet","LOADED","width","height","context","drawImage","canvas","Zoomify","_TileImage","_this2","size","tierSizeCalculation","undefined","tilePixelRatio","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","Error","reverse","resolutions","tileCountUpToTier","i","ii","length","tileGrid","extent","url","includes","urls","tileWidth","createFromTemplate","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext","replace","m","p","tileUrlFunction","map","ZoomifyTileClass","bind","attributions","cacheSize","interpolate","reprojectionErrorThreshold","tileClass","transition","zDirection","tileUrl","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image","addEventListener","changed"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol/source/Zoomify.js"],"sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\n\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {getCenter} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    tileSize,\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    options\n  ) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      }\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n    return image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation =\n      options.tierSizeCalculation !== undefined\n        ? options.tierSizeCalculation\n        : 'default';\n\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (\n          imageWidth > tileSizeForTierSizeCalculation ||\n          imageHeight > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (\n          width > tileSizeForTierSizeCalculation ||\n          height > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation),\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1]\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions,\n    });\n\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = tileCoord[2];\n          const tileIndex =\n            tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileGroup =\n            ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup,\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(\n      urls.map(createFromTemplate)\n    );\n\n    const ZoomifyTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize * tilePixelRatio)\n    );\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\n      getCenter(tileGrid.getExtent()),\n      resolutions[resolutions.length - 1]\n    );\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', () => {\n      tileWidth = tileSize;\n      this.changed();\n    });\n    image.src = testTileUrl;\n  }\n}\n\nexport default Zoomify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
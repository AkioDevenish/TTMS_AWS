{"ast":null,"code":"import _classCallCheck from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/*\r\n  Copyright (c) 2015 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (http://www.cecill.info/).\r\n  \r\n  ol/interaction/SelectCluster is an interaction for selecting vector features in a cluster.\r\n*/\n\nimport ol_Map from 'ol/Map.js';\nimport ol_Collection from 'ol/Collection.js';\nimport ol_layer_Vector from 'ol/layer/Vector.js';\nimport ol_source_Vector from 'ol/source/Vector.js';\nimport ol_interaction_Select from 'ol/interaction/Select.js';\nimport ol_Feature from 'ol/Feature.js';\nimport ol_geom_LineString from 'ol/geom/LineString.js';\nimport { unByKey as ol_Observable_unByKey } from 'ol/Observable.js';\nimport { easeOut as ol_easing_easeOut } from 'ol/easing.js';\nimport ol_geom_Point from 'ol/geom/Point.js';\nimport ol_style_Style from 'ol/style/Style.js';\nimport ol_style_Circle from 'ol/style/Circle.js';\nimport ol_render_getVectorContext from '../util/getVectorContext.js';\nimport { createEmpty as ol_extent_createEmpty } from 'ol/extent.js';\nimport { extend as ol_extent_extend } from 'ol/extent.js';\nimport { singleClick as ol_events_condition_singleClick } from 'ol/events/condition.js';\nimport { getUserProjection as ol_proj_getUserProjection } from 'ol/proj.js';\n\n/**\r\n * @classdesc\r\n * Interaction for selecting vector features in a cluster. \r\n * It can be used as an ol.interaction.Select. \r\n * When clicking on a cluster, it springs apart to reveal the features in the cluster.\r\n * Revealed features are selectable and you can pick the one you meant.\r\n * Revealed features are themselves a cluster with an attribute features that contain the original feature.\r\n * \r\n * @constructor\r\n * @extends {ol.interaction.Select}\r\n * @param {olx.interaction.SelectOptions=} options SelectOptions.\r\n *  @param {ol.style} options.featureStyle used to style the revealed features as options.style is used by the Select interaction.\r\n * \t@param {boolean} options.selectCluster false if you don't want to get cluster selected\r\n * \t@param {Number} options.pointRadius to calculate distance between the features\r\n * \t@param {bool} options.spiral means you want the feature to be placed on a spiral (or a circle)\r\n * \t@param {Number} options.circleMaxObjects number of object that can be place on a circle\r\n * \t@param {Number} options.maxObjects number of object that can be drawn, other are hidden\r\n * \t@param {bool} options.animate if the cluster will animate when features spread out, default is false\r\n * \t@param {Number} options.animationDuration animation duration in ms, default is 500ms\r\n * \t@param {boolean} options.autoClose if selecting a cluster should close previously selected clusters. False to get toggle feature. Default is true\r\n * @fires ol.interaction.SelectEvent\r\n * @api stable\r\n */\nvar ol_interaction_SelectCluster = /*#__PURE__*/function (_ol_interaction_Selec) {\n  function olinteractionSelectCluster(options) {\n    var _this;\n    _classCallCheck(this, olinteractionSelectCluster);\n    options = options || {};\n\n    // Create a new overlay layer for \n    var overlay = new ol_layer_Vector({\n      source: new ol_source_Vector({\n        features: new ol_Collection(),\n        wrapX: options.wrapX,\n        useSpatialIndex: true\n      }),\n      name: 'Cluster overlay',\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n      displayInLayerSwitcher: false,\n      style: options.featureStyle\n    });\n\n    // Add the overlay to selection\n    if (options.layers) {\n      if (typeof options.layers == \"function\") {\n        var fnLayers = options.layers;\n        options.layers = function (layer) {\n          return layer === overlay || fnLayers(layer);\n        };\n      } else if (options.layers.push) {\n        options.layers.push(overlay);\n      }\n    }\n\n    // Don't select links\n    if (options.filter) {\n      var fnFilter = options.filter;\n      options.filter = function (f, l) {\n        //if (l===overlay && f.get(\"selectclusterlink\")) return false;\n        if (!l && f.get(\"selectclusterlink\")) return false;else return fnFilter(f, l);\n      };\n    } else options.filter = function (f, l) {\n      //if (l===overlay && f.get(\"selectclusterlink\")) return false; \n      if (!l && f.get(\"selectclusterlink\")) return false;else return true;\n    };\n    if (options.autoClose === false && !options.toggleCondition) {\n      options.toggleCondition = ol_events_condition_singleClick;\n    }\n    _this = _callSuper(this, olinteractionSelectCluster, [options]);\n    _this.overlayLayer_ = overlay;\n    _this.filter_ = options.filter;\n    _this.pointRadius = options.pointRadius || 12;\n    _this.circleMaxObjects = options.circleMaxObjects || 10;\n    _this.maxObjects = options.maxObjects || 60;\n    _this.spiral = options.spiral !== false;\n    _this.animate = options.animate;\n    _this.animationDuration = options.animationDuration || 500;\n    _this.selectCluster_ = options.selectCluster !== false;\n    _this._autoClose = options.autoClose !== false;\n    _this.on(\"select\", _this.selectCluster.bind(_this));\n    return _this;\n  }\n  /**\r\n   * Remove the interaction from its current map, if any,  and attach it to a new\r\n   * map, if any. Pass `null` to just remove the interaction from the current map.\r\n   * @param {ol.Map} map Map.\r\n   * @api stable\r\n   */\n  _inherits(olinteractionSelectCluster, _ol_interaction_Selec);\n  return _createClass(olinteractionSelectCluster, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      if (this.getMap()) {\n        this.getMap().removeLayer(this.overlayLayer_);\n      }\n      if (this._listener) ol_Observable_unByKey(this._listener);\n      this._listener = null;\n      _superPropGet(olinteractionSelectCluster, \"setMap\", this, 3)([map]);\n      this.overlayLayer_.setMap(map);\n      // map.addLayer(this.overlayLayer_);\n      if (map && map.getView()) {\n        this._listener = map.getView().on('change:resolution', this.clear.bind(this));\n      }\n    }\n    /**\r\n     * Clear the selection, close the cluster and remove revealed features\r\n     * @api stable\r\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.getFeatures().clear();\n      this.overlayLayer_.getSource().clear();\n    }\n    /**\r\n     * Get the layer for the revealed features\r\n     * @api stable\r\n     */\n  }, {\n    key: \"getLayer\",\n    value: function getLayer() {\n      return this.overlayLayer_;\n    }\n    /**\r\n     * Select a cluster\r\n     * @param {ol.SelectEvent | ol.Feature} a cluster feature ie. a feature with a 'features' attribute.\r\n     * @api stable\r\n     */\n  }, {\n    key: \"selectCluster\",\n    value: function selectCluster(e) {\n      var _this2 = this;\n      // It's a feature => convert to SelectEvent\n      if (e instanceof ol_Feature) {\n        e = {\n          selected: [e]\n        };\n      }\n      // Nothing selected\n      if (!e.selected.length) {\n        if (this._autoClose) {\n          this.clear();\n        } else {\n          var deselectedFeatures = e.deselected;\n          deselectedFeatures.forEach(function (deselectedFeature) {\n            var selectClusterFeatures = deselectedFeature.get('selectcluserfeatures');\n            if (selectClusterFeatures) {\n              selectClusterFeatures.forEach(function (selectClusterFeature) {\n                _this2.overlayLayer_.getSource().removeFeature(selectClusterFeature);\n              });\n            }\n          });\n        }\n        return;\n      }\n\n      // Get selection\n      var feature = e.selected[0];\n      // It's one of ours\n      if (feature.get('selectclusterfeature')) return;\n\n      // Clic out of the cluster => close it\n      var source = this.overlayLayer_.getSource();\n      if (this._autoClose) {\n        source.clear();\n      }\n      var cluster = feature.get('features');\n      // Not a cluster (or just one feature)\n      if (!cluster || cluster.length == 1) return;\n\n      // Remove cluster from selection\n      if (!this.selectCluster_) this.getFeatures().clear();\n      var center = feature.getGeometry().getCoordinates();\n      // Pixel size in map unit\n      var view = this.getMap().getView();\n      var userproj = ol_proj_getUserProjection();\n      var pix = view.getResolution() * (userproj ? view.getProjection().getMetersPerUnit() / userproj.getMetersPerUnit() : 1);\n      var r, a, i, max;\n      var p, cf, lk;\n\n      // The features\n      var features = [];\n\n      // Draw on a circle\n      if (!this.spiral || cluster.length <= this.circleMaxObjects) {\n        max = Math.min(cluster.length, this.circleMaxObjects);\n        r = pix * this.pointRadius * (0.5 + max / 4);\n        for (i = 0; i < max; i++) {\n          a = 2 * Math.PI * i / max;\n          if (max == 2 || max == 4) a += Math.PI / 4;\n          p = [center[0] + r * Math.sin(a), center[1] + r * Math.cos(a)];\n          cf = new ol_Feature({\n            'selectclusterfeature': true,\n            'features': [cluster[i]],\n            geometry: new ol_geom_Point(p)\n          });\n          cf.setStyle(cluster[i].getStyle());\n          features.push(cf);\n          lk = new ol_Feature({\n            'selectclusterlink': true,\n            geometry: new ol_geom_LineString([center, p])\n          });\n          features.push(lk);\n        }\n      }\n\n      // Draw on a spiral\n      else {\n        // Start angle\n        a = 0;\n        var d = 2 * this.pointRadius;\n        max = Math.min(this.maxObjects, cluster.length);\n        // Feature on a spiral\n        for (i = 0; i < max; i++) {\n          // New radius => increase d in one turn\n          r = d / 2 + d * a / (2 * Math.PI);\n          // Angle\n          a = a + (d + 0.1) / r;\n          var dx = pix * r * Math.sin(a);\n          var dy = pix * r * Math.cos(a);\n          p = [center[0] + dx, center[1] + dy];\n          cf = new ol_Feature({\n            'selectclusterfeature': true,\n            'features': [cluster[i]],\n            geometry: new ol_geom_Point(p)\n          });\n          cf.setStyle(cluster[i].getStyle());\n          features.push(cf);\n          lk = new ol_Feature({\n            'selectclusterlink': true,\n            geometry: new ol_geom_LineString([center, p])\n          });\n          features.push(lk);\n        }\n      }\n      feature.set('selectcluserfeatures', features);\n      if (this.animate) {\n        this.animateCluster_(center, features);\n      } else {\n        source.addFeatures(features);\n      }\n    }\n    /**\r\n     * Animate the cluster and spread out the features\r\n     * @param {ol.Coordinates} the center of the cluster\r\n     */\n  }, {\n    key: \"animateCluster_\",\n    value: function animateCluster_(center, features) {\n      // Stop animation (if one is running)\n      if (this.listenerKey_) {\n        ol_Observable_unByKey(this.listenerKey_);\n      }\n\n      // Features to animate\n      // var features = this.overlayLayer_.getSource().getFeatures();\n      if (!features.length) return;\n      var style = this.overlayLayer_.getStyle();\n      var stylefn = typeof style == 'function' ? style : style.length ? function () {\n        return style;\n      } : function () {\n        return [style];\n      };\n      var duration = this.animationDuration || 500;\n      var start = new Date().getTime();\n\n      // Animate function\n      function animate(event) {\n        var vectorContext = event.vectorContext || ol_render_getVectorContext(event);\n        // Retina device\n        var ratio = event.frameState.pixelRatio;\n        var view = this.getMap().getView();\n        var userproj = ol_proj_getUserProjection();\n        var res = view.getResolution() + (userproj ? view.getProjection().getMetersPerUnit() / userproj.getMetersPerUnit() : 1);\n        var e = ol_easing_easeOut((event.frameState.time - start) / duration);\n        for (var i = 0, feature; feature = features[i]; i++) if (feature.get('features')) {\n          var pt = feature.getGeometry().getCoordinates();\n          pt[0] = center[0] + e * (pt[0] - center[0]);\n          pt[1] = center[1] + e * (pt[1] - center[1]);\n          var geo = new ol_geom_Point(pt);\n          // Image style\n          var st = stylefn(feature, res);\n          for (var s = 0; s < st.length; s++) {\n            var sc;\n            // OL < v4.3 : setImageStyle doesn't check retina\n            var imgs = ol_Map.prototype.getFeaturesAtPixel ? false : st[s].getImage();\n            if (imgs) {\n              sc = imgs.getScale();\n              imgs.setScale(ratio);\n            }\n            // OL3 > v3.14\n            if (vectorContext.setStyle) {\n              vectorContext.setStyle(st[s]);\n              vectorContext.drawGeometry(geo);\n            }\n\n            // older version\n            else {\n              vectorContext.setImageStyle(imgs);\n              vectorContext.drawPointGeometry(geo);\n            }\n            if (imgs) imgs.setScale(sc);\n          }\n        }\n        // Stop animation and restore cluster visibility\n        if (e > 1.0) {\n          ol_Observable_unByKey(this.listenerKey_);\n          this.overlayLayer_.getSource().addFeatures(features);\n          this.overlayLayer_.changed();\n          return;\n        }\n\n        // tell OL3 to continue postcompose animation\n        event.frameState.animate = true;\n      }\n\n      // Start a new postcompose animation\n      this.listenerKey_ = this.overlayLayer_.on(['postcompose', 'postrender'], animate.bind(this));\n      // Start animation with a ghost feature\n      var feature = new ol_Feature(new ol_geom_Point(this.getMap().getView().getCenter()));\n      feature.setStyle(new ol_style_Style({\n        image: new ol_style_Circle({})\n      }));\n      this.overlayLayer_.getSource().addFeature(feature);\n    }\n    /** Helper function to get the extent of a cluster\r\n     * @param {ol.feature} feature\r\n     * @return {ol.extent|null} the extent or null if extent is empty (no cluster or superimposed points)\r\n     */\n  }, {\n    key: \"getClusterExtent\",\n    value: function getClusterExtent(feature) {\n      if (!feature.get('features')) return null;\n      var extent = ol_extent_createEmpty();\n      feature.get('features').forEach(function (f) {\n        extent = ol_extent_extend(extent, f.getGeometry().getExtent());\n      });\n      if (extent[0] === extent[2] && extent[1] === extent[3]) return null;\n      return extent;\n    }\n  }]);\n}(ol_interaction_Select);\nexport default ol_interaction_SelectCluster;","map":{"version":3,"names":["ol_Map","ol_Collection","ol_layer_Vector","ol_source_Vector","ol_interaction_Select","ol_Feature","ol_geom_LineString","unByKey","ol_Observable_unByKey","easeOut","ol_easing_easeOut","ol_geom_Point","ol_style_Style","ol_style_Circle","ol_render_getVectorContext","createEmpty","ol_extent_createEmpty","extend","ol_extent_extend","singleClick","ol_events_condition_singleClick","getUserProjection","ol_proj_getUserProjection","ol_interaction_SelectCluster","_ol_interaction_Selec","olinteractionSelectCluster","options","_this","_classCallCheck","overlay","source","features","wrapX","useSpatialIndex","name","updateWhileAnimating","updateWhileInteracting","displayInLayerSwitcher","style","featureStyle","layers","fnLayers","layer","push","filter","fnFilter","f","l","get","autoClose","toggleCondition","_callSuper","overlayLayer_","filter_","pointRadius","circleMaxObjects","maxObjects","spiral","animate","animationDuration","selectCluster_","selectCluster","_autoClose","on","bind","_inherits","_createClass","key","value","setMap","map","getMap","removeLayer","_listener","_superPropGet","getView","clear","getFeatures","getSource","getLayer","e","_this2","selected","length","deselectedFeatures","deselected","forEach","deselectedFeature","selectClusterFeatures","selectClusterFeature","removeFeature","feature","cluster","center","getGeometry","getCoordinates","view","userproj","pix","getResolution","getProjection","getMetersPerUnit","r","a","i","max","p","cf","lk","Math","min","PI","sin","cos","geometry","setStyle","getStyle","d","dx","dy","set","animateCluster_","addFeatures","listenerKey_","stylefn","duration","start","Date","getTime","event","vectorContext","ratio","frameState","pixelRatio","res","time","pt","geo","st","s","sc","imgs","prototype","getFeaturesAtPixel","getImage","getScale","setScale","drawGeometry","setImageStyle","drawPointGeometry","changed","getCenter","image","addFeature","getClusterExtent","extent","getExtent"],"sources":["/Users/akio/Downloads/themeforest-veRyTIGn-mofi-vue-js-admin-template/theme/node_modules/ol-ext/interaction/SelectCluster.js"],"sourcesContent":["/*\r\n  Copyright (c) 2015 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (http://www.cecill.info/).\r\n  \r\n  ol/interaction/SelectCluster is an interaction for selecting vector features in a cluster.\r\n*/\r\n\r\nimport ol_Map from 'ol/Map.js'\r\nimport ol_Collection from 'ol/Collection.js'\r\nimport ol_layer_Vector from 'ol/layer/Vector.js'\r\nimport ol_source_Vector from 'ol/source/Vector.js'\r\nimport ol_interaction_Select from 'ol/interaction/Select.js'\r\nimport ol_Feature from 'ol/Feature.js'\r\nimport ol_geom_LineString from 'ol/geom/LineString.js'\r\nimport {unByKey as ol_Observable_unByKey} from 'ol/Observable.js'\r\nimport {easeOut as ol_easing_easeOut} from 'ol/easing.js'\r\nimport ol_geom_Point from 'ol/geom/Point.js'\r\nimport ol_style_Style from 'ol/style/Style.js'\r\nimport ol_style_Circle from 'ol/style/Circle.js'\r\nimport ol_render_getVectorContext from '../util/getVectorContext.js';\r\nimport { createEmpty as ol_extent_createEmpty } from 'ol/extent.js'\r\nimport { extend as ol_extent_extend } from 'ol/extent.js'\r\nimport { singleClick as ol_events_condition_singleClick } from 'ol/events/condition.js';\r\nimport {getUserProjection as ol_proj_getUserProjection} from 'ol/proj.js'\r\n\r\n/**\r\n * @classdesc\r\n * Interaction for selecting vector features in a cluster. \r\n * It can be used as an ol.interaction.Select. \r\n * When clicking on a cluster, it springs apart to reveal the features in the cluster.\r\n * Revealed features are selectable and you can pick the one you meant.\r\n * Revealed features are themselves a cluster with an attribute features that contain the original feature.\r\n * \r\n * @constructor\r\n * @extends {ol.interaction.Select}\r\n * @param {olx.interaction.SelectOptions=} options SelectOptions.\r\n *  @param {ol.style} options.featureStyle used to style the revealed features as options.style is used by the Select interaction.\r\n * \t@param {boolean} options.selectCluster false if you don't want to get cluster selected\r\n * \t@param {Number} options.pointRadius to calculate distance between the features\r\n * \t@param {bool} options.spiral means you want the feature to be placed on a spiral (or a circle)\r\n * \t@param {Number} options.circleMaxObjects number of object that can be place on a circle\r\n * \t@param {Number} options.maxObjects number of object that can be drawn, other are hidden\r\n * \t@param {bool} options.animate if the cluster will animate when features spread out, default is false\r\n * \t@param {Number} options.animationDuration animation duration in ms, default is 500ms\r\n * \t@param {boolean} options.autoClose if selecting a cluster should close previously selected clusters. False to get toggle feature. Default is true\r\n * @fires ol.interaction.SelectEvent\r\n * @api stable\r\n */\r\nvar ol_interaction_SelectCluster = class olinteractionSelectCluster extends ol_interaction_Select {\r\n  constructor(options) {\r\n    options = options || {}\r\n\r\n    // Create a new overlay layer for \r\n    var overlay = new ol_layer_Vector({\r\n      source: new ol_source_Vector({\r\n        features: new ol_Collection(),\r\n        wrapX: options.wrapX,\r\n        useSpatialIndex: true\r\n      }),\r\n      name: 'Cluster overlay',\r\n      updateWhileAnimating: true,\r\n      updateWhileInteracting: true,\r\n      displayInLayerSwitcher: false,\r\n      style: options.featureStyle\r\n    })\r\n\r\n    // Add the overlay to selection\r\n    if (options.layers) {\r\n      if (typeof (options.layers) == \"function\") {\r\n        var fnLayers = options.layers\r\n        options.layers = function (layer) {\r\n          return (layer === overlay || fnLayers(layer))\r\n        }\r\n      } else if (options.layers.push) {\r\n        options.layers.push(overlay)\r\n      }\r\n    }\r\n\r\n    // Don't select links\r\n    if (options.filter) {\r\n      var fnFilter = options.filter\r\n      options.filter = function (f, l) {\r\n        //if (l===overlay && f.get(\"selectclusterlink\")) return false;\r\n        if (!l && f.get(\"selectclusterlink\"))\r\n          return false\r\n        else\r\n          return fnFilter(f, l)\r\n      }\r\n    } else\r\n      options.filter = function (f, l) {\r\n        //if (l===overlay && f.get(\"selectclusterlink\")) return false; \r\n        if (!l && f.get(\"selectclusterlink\"))\r\n          return false\r\n        else\r\n          return true\r\n      }\r\n\r\n    if ((options.autoClose === false) && !options.toggleCondition) {\r\n      options.toggleCondition = ol_events_condition_singleClick\r\n    }\r\n\r\n    super(options)\r\n\r\n    this.overlayLayer_ = overlay;\r\n    this.filter_ = options.filter\r\n    this.pointRadius = options.pointRadius || 12\r\n    this.circleMaxObjects = options.circleMaxObjects || 10\r\n    this.maxObjects = options.maxObjects || 60\r\n    this.spiral = (options.spiral !== false)\r\n    this.animate = options.animate\r\n    this.animationDuration = options.animationDuration || 500\r\n    this.selectCluster_ = (options.selectCluster !== false)\r\n    this._autoClose = (options.autoClose !== false)\r\n\r\n    this.on(\"select\", this.selectCluster.bind(this))\r\n  }\r\n  /**\r\n   * Remove the interaction from its current map, if any,  and attach it to a new\r\n   * map, if any. Pass `null` to just remove the interaction from the current map.\r\n   * @param {ol.Map} map Map.\r\n   * @api stable\r\n   */\r\n  setMap(map) {\r\n    if (this.getMap()) {\r\n      this.getMap().removeLayer(this.overlayLayer_)\r\n    }\r\n    if (this._listener)\r\n      ol_Observable_unByKey(this._listener)\r\n    this._listener = null\r\n\r\n    super.setMap(map)\r\n    this.overlayLayer_.setMap(map)\r\n    // map.addLayer(this.overlayLayer_);\r\n    if (map && map.getView()) {\r\n      this._listener = map.getView().on('change:resolution', this.clear.bind(this))\r\n    }\r\n  }\r\n  /**\r\n   * Clear the selection, close the cluster and remove revealed features\r\n   * @api stable\r\n   */\r\n  clear() {\r\n    this.getFeatures().clear()\r\n    this.overlayLayer_.getSource().clear()\r\n  }\r\n  /**\r\n   * Get the layer for the revealed features\r\n   * @api stable\r\n   */\r\n  getLayer() {\r\n    return this.overlayLayer_\r\n  }\r\n  /**\r\n   * Select a cluster\r\n   * @param {ol.SelectEvent | ol.Feature} a cluster feature ie. a feature with a 'features' attribute.\r\n   * @api stable\r\n   */\r\n  selectCluster(e) {\r\n    // It's a feature => convert to SelectEvent\r\n    if (e instanceof ol_Feature) {\r\n      e = { selected: [e] }\r\n    }\r\n    // Nothing selected\r\n    if (!e.selected.length) {\r\n      if (this._autoClose) {\r\n        this.clear()\r\n      } else {\r\n        var deselectedFeatures = e.deselected\r\n        deselectedFeatures.forEach(deselectedFeature => {\r\n          var selectClusterFeatures = deselectedFeature.get('selectcluserfeatures')\r\n          if (selectClusterFeatures) {\r\n            selectClusterFeatures.forEach(selectClusterFeature => {\r\n              this.overlayLayer_.getSource().removeFeature(selectClusterFeature)\r\n            })\r\n          }\r\n        })\r\n      }\r\n      return\r\n    }\r\n\r\n    // Get selection\r\n    var feature = e.selected[0]\r\n    // It's one of ours\r\n    if (feature.get('selectclusterfeature'))\r\n      return\r\n\r\n    // Clic out of the cluster => close it\r\n    var source = this.overlayLayer_.getSource()\r\n    if (this._autoClose) {\r\n      source.clear()\r\n    }\r\n\r\n    var cluster = feature.get('features')\r\n    // Not a cluster (or just one feature)\r\n    if (!cluster || cluster.length == 1)\r\n      return\r\n\r\n    // Remove cluster from selection\r\n    if (!this.selectCluster_)\r\n      this.getFeatures().clear()\r\n\r\n    var center = feature.getGeometry().getCoordinates()\r\n    // Pixel size in map unit\r\n    var view = this.getMap().getView()\r\n    var userproj = ol_proj_getUserProjection()\r\n    var pix = view.getResolution() * (userproj ? view.getProjection().getMetersPerUnit() / userproj.getMetersPerUnit() : 1)\r\n    var r, a, i, max\r\n    var p, cf, lk\r\n\r\n    // The features\r\n    var features = []\r\n\r\n    // Draw on a circle\r\n    if (!this.spiral || cluster.length <= this.circleMaxObjects) {\r\n      max = Math.min(cluster.length, this.circleMaxObjects)\r\n      r = pix * this.pointRadius * (0.5 + max / 4)\r\n      for (i = 0; i < max; i++) {\r\n        a = 2 * Math.PI * i / max\r\n        if (max == 2 || max == 4)\r\n          a += Math.PI / 4\r\n        p = [center[0] + r * Math.sin(a), center[1] + r * Math.cos(a)]\r\n        cf = new ol_Feature({ 'selectclusterfeature': true, 'features': [cluster[i]], geometry: new ol_geom_Point(p) })\r\n        cf.setStyle(cluster[i].getStyle())\r\n        features.push(cf)\r\n        lk = new ol_Feature({ 'selectclusterlink': true, geometry: new ol_geom_LineString([center, p]) })\r\n        features.push(lk)\r\n      }\r\n    }\r\n\r\n    // Draw on a spiral\r\n    else {\r\n      // Start angle\r\n      a = 0\r\n      var d = 2 * this.pointRadius\r\n      max = Math.min(this.maxObjects, cluster.length)\r\n      // Feature on a spiral\r\n      for (i = 0; i < max; i++) {\r\n        // New radius => increase d in one turn\r\n        r = d / 2 + d * a / (2 * Math.PI)\r\n        // Angle\r\n        a = a + (d + 0.1) / r\r\n        var dx = pix * r * Math.sin(a)\r\n        var dy = pix * r * Math.cos(a)\r\n        p = [center[0] + dx, center[1] + dy]\r\n        cf = new ol_Feature({ 'selectclusterfeature': true, 'features': [cluster[i]], geometry: new ol_geom_Point(p) })\r\n        cf.setStyle(cluster[i].getStyle())\r\n        features.push(cf)\r\n        lk = new ol_Feature({ 'selectclusterlink': true, geometry: new ol_geom_LineString([center, p]) })\r\n        features.push(lk)\r\n      }\r\n    }\r\n\r\n    feature.set('selectcluserfeatures', features)\r\n    if (this.animate) {\r\n      this.animateCluster_(center, features)\r\n    } else {\r\n      source.addFeatures(features)\r\n    }\r\n  }\r\n  /**\r\n   * Animate the cluster and spread out the features\r\n   * @param {ol.Coordinates} the center of the cluster\r\n   */\r\n  animateCluster_(center, features) {\r\n    // Stop animation (if one is running)\r\n    if (this.listenerKey_) {\r\n      ol_Observable_unByKey(this.listenerKey_)\r\n    }\r\n\r\n    // Features to animate\r\n    // var features = this.overlayLayer_.getSource().getFeatures();\r\n    if (!features.length)\r\n      return\r\n\r\n    var style = this.overlayLayer_.getStyle()\r\n    var stylefn = (typeof (style) == 'function') ? style : style.length ? function () { return style } : function () { return [style] }\r\n    var duration = this.animationDuration || 500\r\n    var start = new Date().getTime()\r\n\r\n    // Animate function\r\n    function animate(event) {\r\n      var vectorContext = event.vectorContext || ol_render_getVectorContext(event)\r\n      // Retina device\r\n      var ratio = event.frameState.pixelRatio\r\n      var view = this.getMap().getView()\r\n      var userproj = ol_proj_getUserProjection()\r\n      var res = view.getResolution() +  (userproj ? view.getProjection().getMetersPerUnit() / userproj.getMetersPerUnit() : 1)\r\n      var e = ol_easing_easeOut((event.frameState.time - start) / duration)\r\n      for (var i = 0, feature; feature = features[i]; i++)\r\n        if (feature.get('features')) {\r\n          var pt = feature.getGeometry().getCoordinates()\r\n          pt[0] = center[0] + e * (pt[0] - center[0])\r\n          pt[1] = center[1] + e * (pt[1] - center[1])\r\n          var geo = new ol_geom_Point(pt)\r\n          // Image style\r\n          var st = stylefn(feature, res)\r\n          for (var s = 0; s < st.length; s++) {\r\n            var sc\r\n            // OL < v4.3 : setImageStyle doesn't check retina\r\n            var imgs = ol_Map.prototype.getFeaturesAtPixel ? false : st[s].getImage()\r\n            if (imgs) {\r\n              sc = imgs.getScale()\r\n              imgs.setScale(ratio)\r\n            }\r\n            // OL3 > v3.14\r\n            if (vectorContext.setStyle) {\r\n              vectorContext.setStyle(st[s])\r\n              vectorContext.drawGeometry(geo)\r\n            }\r\n\r\n            // older version\r\n            else {\r\n              vectorContext.setImageStyle(imgs)\r\n              vectorContext.drawPointGeometry(geo)\r\n            }\r\n            if (imgs)\r\n              imgs.setScale(sc)\r\n          }\r\n        }\r\n      // Stop animation and restore cluster visibility\r\n      if (e > 1.0) {\r\n        ol_Observable_unByKey(this.listenerKey_)\r\n        this.overlayLayer_.getSource().addFeatures(features)\r\n        this.overlayLayer_.changed()\r\n        return\r\n      }\r\n\r\n\r\n      // tell OL3 to continue postcompose animation\r\n      event.frameState.animate = true\r\n    }\r\n\r\n    // Start a new postcompose animation\r\n    this.listenerKey_ = this.overlayLayer_.on(['postcompose', 'postrender'], animate.bind(this))\r\n    // Start animation with a ghost feature\r\n    var feature = new ol_Feature(new ol_geom_Point(this.getMap().getView().getCenter()))\r\n    feature.setStyle(new ol_style_Style({ image: new ol_style_Circle({}) }))\r\n    this.overlayLayer_.getSource().addFeature(feature)\r\n  }\r\n  /** Helper function to get the extent of a cluster\r\n   * @param {ol.feature} feature\r\n   * @return {ol.extent|null} the extent or null if extent is empty (no cluster or superimposed points)\r\n   */\r\n  getClusterExtent(feature) {\r\n    if (!feature.get('features'))\r\n      return null\r\n    var extent = ol_extent_createEmpty()\r\n    feature.get('features').forEach(function (f) {\r\n      extent = ol_extent_extend(extent, f.getGeometry().getExtent())\r\n    })\r\n    if (extent[0] === extent[2] && extent[1] === extent[3])\r\n      return null\r\n    return extent\r\n  }\r\n}\r\n\r\nexport default ol_interaction_SelectCluster\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
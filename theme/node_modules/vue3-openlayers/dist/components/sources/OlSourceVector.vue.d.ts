import { default as __DTS_3__ } from 'ol/events/Event';
import { ViewOptions } from 'ol/View';
import { Attribution, State, AttributionLike } from 'ol/source/Source';
import { FeatureUrlFunction, FeatureLoader } from 'ol/featureloader';
import { default as __DTS_2__ } from 'ol/format/Feature';
import { default as __DTS_1__ } from 'ol/render/Feature';
import { Projection } from 'ol/proj';
import { Collection, Feature } from 'ol';
import { Extent } from 'ol/extent';
import { Coordinate } from 'ol/coordinate';
import { FeatureLike } from 'ol/Feature';
import { EventsKey, Listener } from 'ol/events';
import { VectorSourceOnSignature } from 'ol/source/Vector';
import VectorSource, { type Options } from "ol/source/Vector";
import type VectorLayer from "ol/layer/Vector";
import type HeatmapLayer from "ol/layer/Heatmap";
import { DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType, Ref } from 'vue';
import type Geometry from "ol/geom/Geometry";
declare const _default: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options<Geometry>>, {
    overlaps: boolean;
    projection: string;
    useSpatialIndex: boolean;
    wrapX: boolean;
}>, {
    layer: Ref<HeatmapLayer> | Ref<VectorLayer<VectorSource<Geometry>>> | null;
    source: Ref<{
        on: VectorSourceOnSignature<EventsKey>;
        once: VectorSourceOnSignature<EventsKey>;
        un: VectorSourceOnSignature<void>;
        addFeature: (feature: FeatureLike) => void;
        addFeatures: (features: FeatureLike[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: FeatureLike) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: Coordinate, callback: (arg0: FeatureLike) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: Extent, callback: (arg0: FeatureLike) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: Extent, callback: (arg0: FeatureLike) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => Collection<FeatureLike> | null;
        getFeatures: () => FeatureLike[];
        getFeaturesAtCoordinate: (coordinate: Coordinate) => Feature<Geometry>[];
        getFeaturesInExtent: (extent: Extent, projection?: Projection | undefined) => FeatureLike[];
        getClosestFeatureToCoordinate: (coordinate: Coordinate, filter?: ((arg0: FeatureLike) => boolean) | undefined) => FeatureLike;
        getExtent: (extent?: Extent | undefined) => Extent;
        getFeatureById: (id: string | number) => Feature<Geometry> | __DTS_1__ | __DTS_1__[] | null;
        getFeatureByUid: (uid: string) => FeatureLike | null;
        getFormat: () => __DTS_2__<typeof Feature | typeof __DTS_1__> | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | FeatureUrlFunction | undefined;
        hasFeature: (feature: FeatureLike) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: Extent, resolution: number, projection: Projection) => void;
        removeLoadedExtent: (extent: Extent) => void;
        removeFeature: (feature: FeatureLike) => void;
        setLoader: (loader: FeatureLoader) => void;
        setUrl: (url: string | FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => Projection | null;
        getResolutions: (projection?: Projection | undefined) => number[] | null;
        getView: () => Promise<ViewOptions>;
        getState: () => State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: AttributionLike | undefined) => void;
        setState: (state: State) => void;
        get: (key: string) => any;
        getKeys: () => string[];
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: Listener) => void;
        removeChangeListener: (key: string, listener: Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: Listener) => void;
        dispatchEvent: (event: string | __DTS_3__) => boolean | undefined;
        getListeners: (type: string) => Listener[] | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: Listener) => void;
        dispose: () => void;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options<Geometry>>, {
    overlaps: boolean;
    projection: string;
    useSpatialIndex: boolean;
    wrapX: boolean;
}>>>, {
    wrapX: boolean;
    overlaps: boolean;
    useSpatialIndex: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
